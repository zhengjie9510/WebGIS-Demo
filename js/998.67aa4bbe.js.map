{"version":3,"file":"js/998.67aa4bbe.js","mappings":"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","sources":["webpack://webgis/./src/components/cesium/radar_scan.vue","webpack://webgis/./src/components/cesium/radar_scan.vue?ea85","webpack://webgis/./node_modules/@cesium/engine/Source/Core/CircleGeometry.js","webpack://webgis/./node_modules/@cesium/engine/Source/Scene/createOsmBuildings.js"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer', { terrainProvider: Cesium.createWorldTerrain() })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      viewer.scene.primitives.add(Cesium.createOsmBuildings());\r\n      // Create the scene.\r\n      var scene = viewer.scene\r\n      // Create the circle geometry.\r\n      var circleGeometry = new Cesium.CircleGeometry({\r\n        center: Cesium.Cartesian3.fromDegrees(-74.02, 40.69),\r\n        radius: 200.0,\r\n        vertexFormat: Cesium.VertexFormat.POSITION_AND_ST,\r\n      })\r\n      var instance = new Cesium.GeometryInstance({\r\n        geometry: circleGeometry,\r\n      })\r\n      scene.primitives.add(\r\n        new Cesium.GroundPrimitive({\r\n          geometryInstances: instance,\r\n          appearance: new Cesium.MaterialAppearance({\r\n            material: new Cesium.Material({\r\n              translucent: false,\r\n              fabric: {\r\n                uniforms: {\r\n                  color: new Cesium.Color(0.0, 1.0, 0.0),\r\n                  rotate: 90.0,\r\n                  percent: 0.1,\r\n                },\r\n                source: `\r\n                  uniform vec4 color;\r\n                  uniform float percent;\r\n                  \r\n                  float get_angle(vec2 base,vec2 dir)\r\n                  { \r\n                    base = normalize(base);\r\n                    dir = normalize(dir);\r\n                    float angle = degrees(acos(abs(dot(dir,base))));\r\n                    if (dir.s > 0.0 && dir.t > 0.0){angle = angle;}\r\n                    else if (dir.s < 0.0 && dir.t > 0.0){angle = 180.0 - angle;}\r\n                    else if (dir.s < 0.0 && dir.t < 0.0){angle = 180.0 + angle;}\r\n                    else{angle = 360.0 - angle;}\r\n                    return angle;\r\n                  }\r\n\r\n                  czm_material czm_getMaterial(czm_materialInput materialInput)\r\n                  {\r\n                    czm_material material = czm_getDefaultMaterial(materialInput);\r\n                    material.diffuse = czm_gammaCorrect(color.rgb); \r\n\r\n                    vec2 st = materialInput.st;\r\n                    vec2 base = vec2(0.5,0.0);\r\n                    vec2 dir = st-vec2(0.5,0.5);\r\n                    float len = length(dir);\r\n                    if(len > 0.49){\r\n                      material.alpha = 1.0;\r\n                      material.diffuse = vec3(1.0,1.0,0.0);\r\n                      material.emission=vec3(0.2);\r\n                    }\r\n                    else{\r\n                      float angle = get_angle(base,dir);\r\n                      material.alpha = (mod(angle + (-czm_frameNumber),360.0)-(1.0-percent)*360.0)/(360.0*percent);\r\n                      material.emission=vec3(0.5);\r\n                    } \r\n                    return material;\r\n                  }\r\n                  `,\r\n              },\r\n            }),\r\n          }),\r\n        })\r\n      )\r\n      viewer.camera.flyToBoundingSphere(\r\n        Cesium.CircleGeometry.createGeometry(circleGeometry).boundingSphere\r\n      )\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./radar_scan.vue?vue&type=template&id=3f994ffe&scoped=true\"\nimport script from \"./radar_scan.vue?vue&type=script&lang=js\"\nexport * from \"./radar_scan.vue?vue&type=script&lang=js\"\n\nimport \"./radar_scan.vue?vue&type=style&index=0&id=3f994ffe&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3f994ffe\"]])\n\nexport default __exports__","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nconst scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = circleGeometry._ellipseGeometry._granularity;\n  const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n","import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {boolean} [options.enableShowOutline=true] If true, enable rendering outlines. This can be set to false to avoid the additional processing of geometry at load time.\n * @param {boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Cesium3DTileset}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.scene.primitives.add(Cesium.createOsmBuildings());\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * viewer.scene.primitives.add(Cesium.createOsmBuildings({\n *   style: new Cesium.Cesium3DTileStyle({\n *     color: {\n *       conditions: [\n *         [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *         [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *         [true, \"color('#ffffff')\"]\n *       ]\n *     }\n *   })\n * }));\n */\nfunction createOsmBuildings(options) {\n  options = combine(options, {\n    url: IonResource.fromAssetId(96188),\n  });\n\n  const tileset = new Cesium3DTileset(options);\n\n  let style = options.style;\n\n  if (!defined(style)) {\n    const color = defaultValue(\n      options.defaultColor,\n      Color.WHITE\n    ).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildings;\n"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Cesium","terrainProvider","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","primitives","add","circleGeometry","center","radius","vertexFormat","instance","geometry","geometryInstances","appearance","material","translucent","fabric","uniforms","color","rotate","percent","source","camera","flyToBoundingSphere","boundingSphere","__exports__","render","CircleGeometry","options","defaultValue","Check","ellipseGeometryOptions","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","stRotation","shadowVolume","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","VertexFormat","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints","createOsmBuildings","combine","url","IonResource","tileset","Cesium3DTileset","style","defaultColor","Color","toCssColorString","Cesium3DTileStyle"],"sourceRoot":""}