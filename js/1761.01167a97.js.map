{"version":3,"file":"js/1761.01167a97.js","mappings":"qQAEIA,EAAAA,EAAAA,GAAgC,MAA5BC,MAAM,eAAc,OAAG,K,GACtBA,MAAM,iB,UAKXD,EAAAA,EAAAA,GAAmC,OAA9BC,MAAM,mBAAiB,W,UAE9BD,EAAAA,EAAAA,GAAgC,OAA3BE,GAAG,mBAAiB,W,uEATzBF,EAAAA,EAAAA,GAQM,OARDC,MAAM,QAA2BE,OAAK,QAAEC,EAAAA,Q,CAC3CC,GACAL,EAAAA,EAAAA,GAIM,MAJNM,EAIM,EAHJN,EAAAA,EAAAA,GAA4B,WAAvB,OAAG,QAAGI,EAAAA,KAAKG,KAAG,IACnBP,EAAAA,EAAAA,GAA4B,WAAvB,OAAG,QAAGI,EAAAA,KAAKI,KAAG,IACnBR,EAAAA,EAAAA,GAA+B,WAA1B,OAAG,QAAGI,EAAAA,KAAKK,QAAM,KAExBC,GAAmC,UAPVN,EAAAA,YAS3BO,GAAgC,G,qGAOlC,IAAIC,EACAC,EACAC,EAEJ,OACEC,OACE,MAAO,CACLC,UAAU,EACVb,MAAO,CACLc,SAAU,WACVC,IAAK,QACLC,KAAM,SAERC,KAAM,CACJb,IAAK,EACLC,IAAK,EACLC,OAAQ,GAGd,EACAY,UACEC,KAAKC,MACP,EACAC,QAAS,CACPC,aACE,MAAMC,EAAS,IAAIC,EAAAA,EAAc,kBAAmB,CAClDC,sBAAuBD,EAAAA,IACvBE,WAAW,EACXC,UAAU,IAERH,EAAAA,EAAAA,oCAEFD,EAAOK,gBAAkBC,OAAOC,kBAElCP,EAAOQ,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9CX,EAAOQ,MAAMI,0BAA2B,EAGxCZ,EAAOa,OAAOC,MAAM,CAClBC,YAAad,EAAAA,EAAAA,YAA6B,GAAI,EAAG,IAAK,IACtDe,SAAU,IAGZ9B,EAAU,IAAIe,EAAAA,EAA+BD,EAAOQ,MAAMS,QAC1D/B,EAAQgC,gBAAgBC,IAOtB,GANIhC,IACFA,IACAA,OAAWiC,EACXxB,KAAKN,UAAW,GAGdU,EAAOE,2BAA2BD,EAAAA,EACpCb,EAAgBY,EAAOQ,MAAMK,OAAOQ,cAAcF,EAAM5B,cAGrD,CACH,MAAM+B,EAAMtB,EAAOa,OAAOU,WAAWJ,EAAM5B,UAC3CH,EAAgBY,EAAOQ,MAAMgB,MAAMC,KAAKH,EAAKtB,EAAOQ,MACtD,CACA,GAAIpB,EAAe,CACjB,MAAMG,EAAWS,EAAOQ,MAAMgB,MAAME,UAAUC,wBAAwBvC,GAChEP,EAAMoB,EAAAA,EAAAA,UAAsBV,EAASqC,WAAWC,QAAQ,GACxD/C,EAAMmB,EAAAA,EAAAA,UAAsBV,EAASuC,UAAUD,QAAQ,GACvD9C,EAASQ,EAASR,OAAO8C,QAAQ,GACvCjC,KAAKF,KAAO,CAAEb,IAAKA,EAAKC,IAAKA,EAAKC,OAAQA,GAC1CI,EAAWa,EAAOQ,MAAMuB,WAAWC,kBAAiB,KAClD,MAAMC,EAAiBhC,EAAAA,EAAAA,yBAAgDD,EAAOQ,MAAOpB,GACrF,GAAI6C,EAAgB,CAClB,IAAI1C,EAAW,CAAEC,IAAKyC,EAAeC,EAAI,IAAM,KAAMzC,KAAMwC,EAAeE,EAAI,IAAU,MACxFvC,KAAKnB,MAAQ2D,OAAOC,OAAOzC,KAAKnB,MAAOc,GACvCK,KAAKN,UAAW,CAClB,IAEJ,IACCW,EAAAA,EAAAA,WACL,I,WCrFJ,MAAMqC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/public/info_window.vue","webpack://webgis/./src/components/public/info_window.vue?71ac"],"sourcesContent":["<template>\r\n  <div class=\"popup\" v-show=\"visiable\" :style=\"style\">\r\n    <h2 class=\"popup-title\">经纬度</h2>\r\n    <div class=\"popup-content\">\r\n      <div>经度：{{ info.lon }}</div>\r\n      <div>纬度：{{ info.lat }}</div>\r\n      <div>高度：{{ info.height }}</div>\r\n    </div>\r\n    <div class='triangle-bottom'></div>\r\n  </div>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\nlet handler = undefined\r\nlet listener = undefined\r\nlet earthPosition = undefined\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      visiable: false,\r\n      style: {\r\n        position: 'absolute',\r\n        top: '100px',\r\n        left: '100px',\r\n      },\r\n      info: {\r\n        lon: 0,\r\n        lat: 0,\r\n        height: 0\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    async init() {\r\n      const viewer = new Cesium.Viewer('cesiumContainer', {\r\n        terrainProvider: await Cesium.createWorldTerrainAsync(),\r\n        animation: false,\r\n        timeline: false,\r\n      })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      viewer.scene.debugShowFramesPerSecond = true // 显示帧率\r\n\r\n      // 定位到中国\r\n      viewer.camera.flyTo({\r\n        destination: Cesium.Rectangle.fromDegrees(73, 3, 136, 54),\r\n        duration: 3,\r\n      })\r\n\r\n      handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas)\r\n      handler.setInputAction((click) => {\r\n        if (listener) {\r\n          listener()\r\n          listener = undefined\r\n          this.visiable = false\r\n        }\r\n        // 球面\r\n        if (viewer.terrainProvider instanceof Cesium.EllipsoidTerrainProvider) {\r\n          earthPosition = viewer.scene.camera.pickEllipsoid(click.position);\r\n        }\r\n        // 地形\r\n        else {\r\n          const ray = viewer.camera.getPickRay(click.position);\r\n          earthPosition = viewer.scene.globe.pick(ray, viewer.scene);\r\n        }\r\n        if (earthPosition) {\r\n          const position = viewer.scene.globe.ellipsoid.cartesianToCartographic(earthPosition)\r\n          const lon = Cesium.Math.toDegrees(position.longitude).toFixed(6)\r\n          const lat = Cesium.Math.toDegrees(position.latitude).toFixed(6)\r\n          const height = position.height.toFixed(2)\r\n          this.info = { lon: lon, lat: lat, height: height }\r\n          listener = viewer.scene.postRender.addEventListener(() => {\r\n            const windowPosition = Cesium.SceneTransforms.wgs84ToWindowCoordinates(viewer.scene, earthPosition);\r\n            if (windowPosition) {\r\n              let position = { top: windowPosition.y - 115 + 'px', left: windowPosition.x - 200 / 2 + 'px' }\r\n              this.style = Object.assign(this.style, position)\r\n              this.visiable = true\r\n            }\r\n          })\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.popup {\r\n  z-index: 1000;\r\n  width: 200px;\r\n  height: 100px;\r\n  border: 2px solid #ffffff;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 2px grey;\r\n  position: absolute;\r\n  background-color: #7fd3cad9;\r\n\r\n  .popup-title {\r\n    text-align: center;\r\n    font-size: 18px;\r\n    margin: 0px;\r\n    height: 25px;\r\n  }\r\n\r\n  .popup-content {\r\n    margin: 0px 10px;\r\n    height: 75px;\r\n  }\r\n\r\n  .triangle-bottom {\r\n    width: 0;\r\n    height: 0;\r\n    border-top: 10px solid #ffffff;\r\n    border-left: 10px dashed transparent;\r\n    border-right: 10px dashed transparent;\r\n    position: absolute;\r\n    left: 90px;\r\n    top: 100px;\r\n  }\r\n}\r\n</style>\r\n","import { render } from \"./info_window.vue?vue&type=template&id=2154d930&scoped=true\"\nimport script from \"./info_window.vue?vue&type=script&lang=js\"\nexport * from \"./info_window.vue?vue&type=script&lang=js\"\n\nimport \"./info_window.vue?vue&type=style&index=0&id=2154d930&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2154d930\"]])\n\nexport default __exports__"],"names":["_createElementVNode","class","id","style","$data","_hoisted_1","_hoisted_2","lon","lat","height","_hoisted_3","_hoisted_4","handler","listener","earthPosition","data","visiable","position","top","left","info","mounted","this","init","methods","async","viewer","Cesium","terrainProvider","animation","timeline","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","debugShowFramesPerSecond","camera","flyTo","destination","duration","canvas","setInputAction","click","undefined","pickEllipsoid","ray","getPickRay","globe","pick","ellipsoid","cartesianToCartographic","longitude","toFixed","latitude","postRender","addEventListener","windowPosition","y","x","Object","assign","__exports__","render"],"sourceRoot":""}