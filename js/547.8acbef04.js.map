{"version":3,"file":"js/547.8acbef04.js","mappings":"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","sources":["webpack://webgis/./src/components/public/optimizing_lots_of_objects.vue","webpack://webgis/./node_modules/three/examples/jsm/controls/OrbitControls.js","webpack://webgis/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack://webgis/./src/components/public/optimizing_lots_of_objects.vue?4eea"],"sourcesContent":["<template>\r\n  <div class=\"container\"><canvas id=\"c\"></canvas></div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils'\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      const canvas = document.querySelector('#c')\r\n      const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true })\r\n\r\n      const fov = 60\r\n      const aspect = 2 // the canvas default\r\n      const near = 0.1\r\n      const far = 10\r\n      const camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\r\n      camera.position.z = 2.5\r\n\r\n      const controls = new OrbitControls(camera, canvas)\r\n      controls.enableDamping = true\r\n      controls.enablePan = false\r\n      controls.minDistance = 1.2\r\n      controls.maxDistance = 4\r\n      controls.update()\r\n\r\n      const scene = new THREE.Scene()\r\n      scene.background = new THREE.Color('black')\r\n\r\n      {\r\n        const loader = new THREE.TextureLoader()\r\n        const texture = loader.load(\r\n          'https://threejsfundamentals.org/threejs/resources/images/world.jpg',\r\n          render\r\n        )\r\n        const geometry = new THREE.SphereGeometry(1, 64, 32)\r\n        const material = new THREE.MeshBasicMaterial({ map: texture })\r\n        scene.add(new THREE.Mesh(geometry, material))\r\n      }\r\n\r\n      async function loadFile(url) {\r\n        const req = await fetch(url)\r\n        return req.text()\r\n      }\r\n\r\n      function parseData(text) {\r\n        const data = []\r\n        const settings = { data }\r\n        let max\r\n        let min\r\n        // split into lines\r\n        text.split('\\n').forEach((line) => {\r\n          // split the line by whitespace\r\n          const parts = line.trim().split(/\\s+/)\r\n          if (parts.length === 2) {\r\n            // only 2 parts, must be a key/value pair\r\n            settings[parts[0]] = parseFloat(parts[1])\r\n          } else if (parts.length > 2) {\r\n            // more than 2 parts, must be data\r\n            const values = parts.map((v) => {\r\n              const value = parseFloat(v)\r\n              if (value === settings.NODATA_value) {\r\n                return undefined\r\n              }\r\n              max = Math.max(max === undefined ? value : max, value)\r\n              min = Math.min(min === undefined ? value : min, value)\r\n              return value\r\n            })\r\n            data.push(values)\r\n          }\r\n        })\r\n        return Object.assign(settings, { min, max })\r\n      }\r\n\r\n      function addBoxes(file) {\r\n        const { min, max, data } = file\r\n        const range = max - min\r\n\r\n        // these helpers will make it easy to position the boxes\r\n        // We can rotate the lon helper on its Y axis to the longitude\r\n        const lonHelper = new THREE.Object3D()\r\n        scene.add(lonHelper)\r\n        // We rotate the latHelper on its X axis to the latitude\r\n        const latHelper = new THREE.Object3D()\r\n        lonHelper.add(latHelper)\r\n        // The position helper moves the object to the edge of the sphere\r\n        const positionHelper = new THREE.Object3D()\r\n        positionHelper.position.z = 1.0\r\n        latHelper.add(positionHelper)\r\n        // Used to move the center of the box so it scales from the position Z axis\r\n        const originHelper = new THREE.Object3D()\r\n        originHelper.position.z = 0.5\r\n        positionHelper.add(originHelper)\r\n\r\n        const color = new THREE.Color()\r\n        const lonFudge = Math.PI * 0.5\r\n        const latFudge = Math.PI * -0.135\r\n        const geometries = []\r\n        data.forEach((row, latNdx) => {\r\n          row.forEach((value, lonNdx) => {\r\n            if (value === undefined) {\r\n              return\r\n            }\r\n            const amount = (value - min) / range\r\n\r\n            const boxWidth = 1\r\n            const boxHeight = 1\r\n            const boxDepth = 1\r\n            const geometry = new THREE.BoxGeometry(\r\n              boxWidth,\r\n              boxHeight,\r\n              boxDepth\r\n            )\r\n\r\n            // adjust the helpers to point to the latitude and longitude\r\n            lonHelper.rotation.y =\r\n              THREE.MathUtils.degToRad(lonNdx + file.xllcorner) + lonFudge\r\n            latHelper.rotation.x =\r\n              THREE.MathUtils.degToRad(latNdx + file.yllcorner) + latFudge\r\n\r\n            // use the world matrix of the origin helper to\r\n            // position this geometry\r\n            positionHelper.scale.set(\r\n              0.005,\r\n              0.005,\r\n              THREE.MathUtils.lerp(0.01, 0.5, amount)\r\n            )\r\n\r\n            originHelper.updateWorldMatrix(true, false)\r\n            geometry.applyMatrix4(originHelper.matrixWorld)\r\n\r\n            // compute a color\r\n            const hue = THREE.MathUtils.lerp(0.7, 0.3, amount)\r\n            const saturation = 1\r\n            const lightness = THREE.MathUtils.lerp(0.4, 1.0, amount)\r\n            color.setHSL(hue, saturation, lightness)\r\n            // get the colors as an array of values from 0 to 255\r\n            const rgb = color.toArray().map((v) => v * 255)\r\n\r\n            // make an array to store colors for each vertex\r\n            const numVerts = geometry.getAttribute('position').count\r\n            const itemSize = 3 // r, g, b\r\n            const colors = new Uint8Array(itemSize * numVerts)\r\n\r\n            // copy the color into the colors array for each vertex\r\n            colors.forEach((v, ndx) => {\r\n              colors[ndx] = rgb[ndx % 3]\r\n            })\r\n\r\n            const normalized = true\r\n            const colorAttrib = new THREE.BufferAttribute(\r\n              colors,\r\n              itemSize,\r\n              normalized\r\n            )\r\n            geometry.setAttribute('color', colorAttrib)\r\n\r\n            geometries.push(geometry)\r\n          })\r\n        })\r\n        const mergedGeometry = mergeBufferGeometries(geometries, false)\r\n        const material = new THREE.MeshBasicMaterial({\r\n          vertexColors: true,\r\n        })\r\n        const mesh = new THREE.Mesh(mergedGeometry, material)\r\n        scene.add(mesh)\r\n      }\r\n\r\n      loadFile(\r\n        'https://threejsfundamentals.org/threejs/resources/data/gpw/gpw_v4_basic_demographic_characteristics_rev10_a000_014mt_2010_cntm_1_deg.asc'\r\n      )\r\n        .then(parseData)\r\n        .then(addBoxes)\r\n        .then(render)\r\n\r\n      function resizeRendererToDisplaySize(renderer) {\r\n        const canvas = renderer.domElement\r\n        const width = canvas.clientWidth\r\n        const height = canvas.clientHeight\r\n        const needResize = canvas.width !== width || canvas.height !== height\r\n        if (needResize) {\r\n          renderer.setSize(width, height, false)\r\n        }\r\n        return needResize\r\n      }\r\n\r\n      let renderRequested = false\r\n\r\n      function render() {\r\n        renderRequested = undefined\r\n\r\n        if (resizeRendererToDisplaySize(renderer)) {\r\n          const canvas = renderer.domElement\r\n          camera.aspect = canvas.clientWidth / canvas.clientHeight\r\n          camera.updateProjectionMatrix()\r\n        }\r\n\r\n        controls.update()\r\n        renderer.render(scene, camera)\r\n      }\r\n      render()\r\n\r\n      function requestRenderIfNotRequested() {\r\n        if (!renderRequested) {\r\n          renderRequested = true\r\n          requestAnimationFrame(render)\r\n        }\r\n      }\r\n\r\n      controls.addEventListener('change', requestRenderIfNotRequested)\r\n      window.addEventListener('resize', requestRenderIfNotRequested)\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.container {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n#c {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0%;\r\n}\r\n</style>\r\n","import {\n\tEventDispatcher,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3\n} from 'three';\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\n\nclass OrbitControls extends EventDispatcher {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\t\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\t\tthis.object = object;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.05;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.panSpeed = 1.0;\n\t\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t\t// Touch fingers\n\t\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// the target DOM element for key events\n\t\tthis._domElementKeyEvents = null;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.getDistance = function () {\n\n\t\t\treturn this.object.position.distanceTo( this.target );\n\n\t\t};\n\n\t\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\t\tthis._domElementKeyEvents = domElement;\n\n\t\t};\n\n\t\tthis.saveState = function () {\n\n\t\t\tscope.target0.copy( scope.target );\n\t\t\tscope.position0.copy( scope.object.position );\n\t\t\tscope.zoom0 = scope.object.zoom;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function () {\n\n\t\t\tconst offset = new Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tconst quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\t\tconst quatInverse = quat.clone().invert();\n\n\t\t\tconst lastPosition = new Vector3();\n\t\t\tconst lastQuaternion = new Quaternion();\n\n\t\t\tconst twoPI = 2 * Math.PI;\n\n\t\t\treturn function update() {\n\n\t\t\t\tconst position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t}\n\n\t\t\t\t// restrict theta to be between desired limits\n\n\t\t\t\tlet min = scope.minAzimuthAngle;\n\t\t\t\tlet max = scope.maxAzimuthAngle;\n\n\t\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\t}\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function () {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\tscope.domElement.removeEventListener( 'pointercancel', onPointerCancel );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\t\tscope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t\t}\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tconst scope = this;\n\n\t\tconst STATE = {\n\t\t\tNONE: - 1,\n\t\t\tROTATE: 0,\n\t\t\tDOLLY: 1,\n\t\t\tPAN: 2,\n\t\t\tTOUCH_ROTATE: 3,\n\t\t\tTOUCH_PAN: 4,\n\t\t\tTOUCH_DOLLY_PAN: 5,\n\t\t\tTOUCH_DOLLY_ROTATE: 6\n\t\t};\n\n\t\tlet state = STATE.NONE;\n\n\t\tconst EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tconst spherical = new Spherical();\n\t\tconst sphericalDelta = new Spherical();\n\n\t\tlet scale = 1;\n\t\tconst panOffset = new Vector3();\n\t\tlet zoomChanged = false;\n\n\t\tconst rotateStart = new Vector2();\n\t\tconst rotateEnd = new Vector2();\n\t\tconst rotateDelta = new Vector2();\n\n\t\tconst panStart = new Vector2();\n\t\tconst panEnd = new Vector2();\n\t\tconst panDelta = new Vector2();\n\n\t\tconst dollyStart = new Vector2();\n\t\tconst dollyEnd = new Vector2();\n\t\tconst dollyDelta = new Vector2();\n\n\t\tconst pointers = [];\n\t\tconst pointerPositions = {};\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tconst panLeft = function () {\n\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tconst panUp = function () {\n\n\t\t\tconst v = new Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t\t}\n\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tconst pan = function () {\n\n\t\t\tconst offset = new Vector3();\n\n\t\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\t\tconst element = scope.domElement;\n\n\t\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tconst position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tlet targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tswitch ( event.code ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tneedsUpdate = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tscope.update();\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\trotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\trotateStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartPan() {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );\n\t\t\t\tconst y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );\n\n\t\t\t\tpanStart.set( x, y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly() {\n\n\t\t\tconst dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;\n\t\t\tconst dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyPan() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enablePan ) handleTouchStartPan();\n\n\t\t}\n\n\t\tfunction handleTouchStartDollyRotate() {\n\n\t\t\tif ( scope.enableZoom ) handleTouchStartDolly();\n\n\t\t\tif ( scope.enableRotate ) handleTouchStartRotate();\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\tif ( pointers.length == 1 ) {\n\n\t\t\t\trotateEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\trotateEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\t\tconst element = scope.domElement;\n\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\tif ( pointers.length === 1 ) {\n\n\t\t\t\tpanEnd.set( event.pageX, event.pageY );\n\n\t\t\t} else {\n\n\t\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\t\tconst x = 0.5 * ( event.pageX + position.x );\n\t\t\t\tconst y = 0.5 * ( event.pageY + position.y );\n\n\t\t\t\tpanEnd.set( x, y );\n\n\t\t\t}\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\tconst position = getSecondPointerPosition( event );\n\n\t\t\tconst dx = event.pageX - position.x;\n\t\t\tconst dy = event.pageY - position.y;\n\n\t\t\tconst distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyOut( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t\t}\n\n\t\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onPointerDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( pointers.length === 0 ) {\n\n\t\t\t\tscope.domElement.setPointerCapture( event.pointerId );\n\n\t\t\t\tscope.domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t\tscope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\taddPointer( event );\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchStart( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseDown( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( event.pointerType === 'touch' ) {\n\n\t\t\t\tonTouchMove( event );\n\n\t\t\t} else {\n\n\t\t\t\tonMouseMove( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerUp( event ) {\n\n\t\t    removePointer( event );\n\n\t\t    if ( pointers.length === 0 ) {\n\n\t\t        scope.domElement.releasePointerCapture( event.pointerId );\n\n\t\t        scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t        scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\t\t    }\n\n\t\t    scope.dispatchEvent( _endEvent );\n\n\t\t    state = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onPointerCancel( event ) {\n\n\t\t\tremovePointer( event );\n\n\t\t}\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tlet mouseAction;\n\n\t\t\tswitch ( event.button ) {\n\n\t\t\t\tcase 0:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tmouseAction = - 1;\n\n\t\t\t}\n\n\t\t\tswitch ( mouseAction ) {\n\n\t\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.DOLLY:\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( _endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( pointers.length ) {\n\n\t\t\t\tcase 1:\n\n\t\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\n\t\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyPan();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleTouchStartDollyRotate();\n\n\t\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( _startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\ttrackPointer( event );\n\n\t\t\tswitch ( state ) {\n\n\t\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\t\tscope.update();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\tfunction addPointer( event ) {\n\n\t\t\tpointers.push( event );\n\n\t\t}\n\n\t\tfunction removePointer( event ) {\n\n\t\t\tdelete pointerPositions[ event.pointerId ];\n\n\t\t\tfor ( let i = 0; i < pointers.length; i ++ ) {\n\n\t\t\t\tif ( pointers[ i ].pointerId == event.pointerId ) {\n\n\t\t\t\t\tpointers.splice( i, 1 );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction trackPointer( event ) {\n\n\t\t\tlet position = pointerPositions[ event.pointerId ];\n\n\t\t\tif ( position === undefined ) {\n\n\t\t\t\tposition = new Vector2();\n\t\t\t\tpointerPositions[ event.pointerId ] = position;\n\n\t\t\t}\n\n\t\t\tposition.set( event.pageX, event.pageY );\n\n\t\t}\n\n\t\tfunction getSecondPointerPosition( event ) {\n\n\t\t\tconst pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];\n\n\t\t\treturn pointerPositions[ pointer.pointerId ];\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.addEventListener( 'pointercancel', onPointerCancel );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t}\n\n}\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nclass MapControls extends OrbitControls {\n\n\tconstructor( object, domElement ) {\n\n\t\tsuper( object, domElement );\n\n\t\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\t\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\t\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\t\tthis.touches.ONE = TOUCH.PAN;\n\t\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n\t}\n\n}\n\nexport { OrbitControls, MapControls };\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3\n} from 'three';\n\n\nfunction computeTangents( geometry ) {\n\n\tgeometry.computeTangents();\n\tconsole.warn( 'THREE.BufferGeometryUtils: .computeTangents() has been removed. Use BufferGeometry.computeTangents() instead.' );\n\n}\n\n/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\nfunction mergeBufferGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\t// gather .userData\n\n\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeBufferAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeBufferAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tarray.set( attributes[ i ].array, offset );\n\n\t\toffset += attributes[ i ].array.length;\n\n\t}\n\n\treturn new BufferAttribute( array, itemSize, normalized );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n/**\n * @param {Array<BufferGeometry>} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry>}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst attrArrays = {};\n\tconst morphAttrsArrays = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t// initialize the arrays\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\n\t\tattrArrays[ name ] = [];\n\n\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\tif ( morphAttr ) {\n\n\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst decimalShift = Math.log10( 1 / tolerance );\n\tconst shiftMultiplier = Math.pow( 10, decimalShift );\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the attribute arrays\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newarray = attrArrays[ name ];\n\t\t\t\tconst newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// Generate typed arrays from new attribute arrays and update\n\t// the attributeBuffers\n\tconst result = geometry.clone();\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst oldAttribute = geometry.getAttribute( name );\n\n\t\tconst buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\tconst attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\tresult.setAttribute( name, attribute );\n\n\t\t// Update the attribute arrays\n\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\tfor ( let j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\tconst oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\tconst buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\tconst morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry>}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tif ( object.geometry.isBufferGeometry !== true ) {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils: Geometry is not of type BufferGeometry.' );\n\t\treturn null;\n\n\t}\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tmaterial,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( material.morphTargets && morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.boneTransform( a, _vA );\n\t\t\tobject.boneTransform( b, _vB );\n\t\t\tobject.boneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group, groupMaterial;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else if ( positionAttribute !== undefined ) {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tgroupMaterial,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tmaterial,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\n\n\nexport {\n\tcomputeTangents,\n\tmergeBufferGeometries,\n\tmergeBufferAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n};\n","import { render } from \"./optimizing_lots_of_objects.vue?vue&type=template&id=1beabe6c&scoped=true\"\nimport script from \"./optimizing_lots_of_objects.vue?vue&type=script&lang=js\"\nexport * from \"./optimizing_lots_of_objects.vue?vue&type=script&lang=js\"\n\nimport \"./optimizing_lots_of_objects.vue?vue&type=style&index=0&id=1beabe6c&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1beabe6c\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","_changeEvent","type","_startEvent","_endEvent","OrbitControls","EventDispatcher","constructor","object","domElement","super","undefined","console","warn","document","error","this","style","touchAction","enabled","target","Vector3","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","MIDDLE","touches","ONE","TOUCH","TWO","target0","clone","position0","position","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","saveState","scope","copy","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","offset","quat","Quaternion","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","twoPI","sub","applyQuaternion","setFromVector3","rotateLeft","getAutoRotationAngle","sphericalDelta","min","max","isFinite","makeSafe","radius","scale","addScaledVector","panOffset","add","setFromSpherical","lookAt","multiplyScalar","set","zoomChanged","distanceToSquared","EPS","dot","quaternion","dispose","removeEventListener","onContextMenu","onPointerDown","onPointerCancel","onMouseWheel","onPointerMove","onPointerUp","ROTATE","DOLLY","PAN","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","isPerspectiveCamera","targetDistance","length","tan","fov","clientHeight","matrix","isOrthographicCamera","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","clientX","clientY","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","subVectors","x","y","handleMouseMoveDolly","handleMouseMovePan","handleMouseWheel","handleKeyDown","needsUpdate","code","preventDefault","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveRotate","getSecondPointerPosition","handleTouchMovePan","handleTouchMoveDolly","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","setPointerCapture","pointerId","addPointer","pointerType","onTouchStart","onMouseDown","onTouchMove","onMouseMove","removePointer","releasePointerCapture","mouseAction","button","ctrlKey","metaKey","shiftKey","trackPointer","push","i","splice","pointer","passive","mergeBufferGeometries","geometries","useGroups","isIndexed","index","attributesUsed","Set","Object","attributes","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","BufferGeometry","geometry","attributesCount","name","has","size","userData","mergedUserData","count","addGroup","indexOffset","mergedIndex","j","getX","setIndex","mergedAttribute","mergeBufferAttributes","setAttribute","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","itemSize","normalized","arrayLength","attribute","isInterleavedBufferAttribute","array","BufferAttribute","mounted","init","methods","canvas","querySelector","renderer","THREE","antialias","aspect","near","far","camera","z","controls","scene","background","loader","texture","load","render","material","map","async","loadFile","url","req","fetch","text","parseData","data","settings","split","forEach","line","parts","trim","parseFloat","values","value","NODATA_value","assign","addBoxes","file","range","lonHelper","latHelper","positionHelper","originHelper","color","lonFudge","latFudge","row","latNdx","lonNdx","amount","boxWidth","boxHeight","boxDepth","rotation","xllcorner","yllcorner","updateWorldMatrix","applyMatrix4","matrixWorld","hue","saturation","lightness","setHSL","rgb","toArray","numVerts","getAttribute","colors","Uint8Array","ndx","colorAttrib","vertexColors","mesh","resizeRendererToDisplaySize","width","height","needResize","setSize","then","renderRequested","requestRenderIfNotRequested","requestAnimationFrame","window","__exports__"],"sourceRoot":""}