{"version":3,"file":"js/8491.a7662cf7.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,4JAoBF,GACEC,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIC,EAAAA,EAAO,mBACpBC,EAAAA,EAAAA,oCAEFF,EAAOG,gBAAkBC,OAAOC,kBAElCL,EAAOM,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9C,IAAIH,EAAQN,EAAOM,MAKnB,SAASI,EAAcC,GAErB,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAIC,EAAUC,EAAAA,EAAAA,UAAqBF,GACnCD,EAAUI,KACR,IAAIC,EAAAA,EACFN,EAASO,KAAKC,IAAIL,GAClBH,EAASO,KAAKE,IAAIN,IAGxB,CACA,OAAOF,CACT,CAGA,IAAIS,EAAW,IAAIC,EAAAA,EAAuB,CACxCC,kBAAmBC,EAAAA,EAAAA,iBAA4B,EAC5C,GACD,IACC,GACD,IACC,GACD,KAEFC,aAAcC,EAAAA,EAAAA,uBACdC,eAAgBjB,EAAc,KAC9BkB,WAAYC,EAAAA,EAAAA,UAIVC,EAAYxB,EAAMyB,WAAWC,IAC/B,IAAIC,EAAAA,EAAU,CACZC,kBAAmB,IAAIC,EAAAA,EAAiB,CACtCd,SAAUA,IAEZe,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRC,MAAO,IAAIC,EAAAA,EAAM,EAAK,EAAK,EAAK,GAChCC,WAAY,GACZC,OAAQ,GAEVC,OAAQ,mkBAkBlB9C,EAAO+C,OAAOC,oBACZ1B,EAAAA,EAAAA,eAAsCD,GAAU4B,gBAGlDjD,EAAOM,MAAM4C,UAAUC,kBAAiB,WACtC,IAAIN,EAASf,EAAUM,WAAWE,SAASG,SAASI,OACpDA,GAAU,KACNA,EAAS,IACXA,EAAS,GAEXf,EAAUM,WAAWE,SAASG,SAASI,OAASA,CAClD,GACF,I,WCxGJ,MAAMO,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/public/dynamic_polyline_volume.vue","webpack://webgis/./src/components/public/dynamic_polyline_volume.vue?134c"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport {\n  Viewer,\n  Math as CesiumMath,\n  FeatureDetection,\n  Cartesian3,\n  MaterialAppearance,\n  Cartesian2,\n  GeometryInstance,\n  Primitive,\n  Material,\n  Color,\n  PolylineVolumeGeometry,\n  VertexFormat,\n  CornerType,\n} from 'cesium'\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      var viewer = new Viewer('cesiumContainer')\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n      var scene = viewer.scene\n\n      // Example 1: Draw a red tube on the globe surface.\n\n      // Create positions for a 2D circle.\n      function computeCircle(radius) {\n        var positions = []\n        for (var i = 0; i < 360; i++) {\n          var radians = CesiumMath.toRadians(i)\n          positions.push(\n            new Cartesian2(\n              radius * Math.cos(radians),\n              radius * Math.sin(radians)\n            )\n          )\n        }\n        return positions\n      }\n      // Create the polyline volume geometry instance.  The shape defined by the\n      // shapePositions option will be extruded along the polylinePositions.\n      var geometry = new PolylineVolumeGeometry({\n        polylinePositions: Cartesian3.fromDegreesArray([\n          -85.0,\n          32.0,\n          -85.0,\n          36.0,\n          -89.0,\n          36.0,\n        ]),\n        vertexFormat: VertexFormat.POSITION_NORMAL_AND_ST,\n        shapePositions: computeCircle(6000.0),\n        cornerType: CornerType.MITERED,\n      })\n\n      // Add all instances to primitives.\n      var primitive = scene.primitives.add(\n        new Primitive({\n          geometryInstances: new GeometryInstance({\n            geometry: geometry,\n          }),\n          appearance: new MaterialAppearance({\n            material: new Material({\n              fabric: {\n                uniforms: {\n                  color: new Color(1.0, 0.0, 0.0, 1.0),\n                  percentage: 0.1,\n                  offset: 0.0,\n                },\n                source: `\n                  uniform vec4 color;\n                  uniform float percentage;\n                  uniform float offset;\n                  czm_material czm_getMaterial(czm_materialInput materialInput)\n                  {\n                      czm_material material = czm_getDefaultMaterial(materialInput);\n                      vec2 st = materialInput.st;\n                      material.diffuse = color.rgb;\n                      material.alpha = 1.0-mod(st.s+offset,percentage)*(1.0/percentage);\n                      return material;\n                  }`,\n              },\n            }),\n          }),\n        })\n      )\n\n      viewer.camera.flyToBoundingSphere(\n        PolylineVolumeGeometry.createGeometry(geometry).boundingSphere\n      )\n\n      viewer.scene.preUpdate.addEventListener(function() {\n        var offset = primitive.appearance.material.uniforms.offset\n        offset += 0.001\n        if (offset > 1.0) {\n          offset = 0.0\n        }\n        primitive.appearance.material.uniforms.offset = offset\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./dynamic_polyline_volume.vue?vue&type=template&id=5d18a7cb&scoped=true\"\nimport script from \"./dynamic_polyline_volume.vue?vue&type=script&lang=js\"\nexport * from \"./dynamic_polyline_volume.vue?vue&type=script&lang=js\"\n\nimport \"./dynamic_polyline_volume.vue?vue&type=style&index=0&id=5d18a7cb&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5d18a7cb\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Viewer","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","computeCircle","radius","positions","i","radians","CesiumMath","push","Cartesian2","Math","cos","sin","geometry","PolylineVolumeGeometry","polylinePositions","Cartesian3","vertexFormat","VertexFormat","shapePositions","cornerType","CornerType","primitive","primitives","add","Primitive","geometryInstances","GeometryInstance","appearance","MaterialAppearance","material","Material","fabric","uniforms","color","Color","percentage","offset","source","camera","flyToBoundingSphere","boundingSphere","preUpdate","addEventListener","__exports__","render"],"sourceRoot":""}