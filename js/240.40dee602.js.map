{"version":3,"file":"js/240.40dee602.js","mappings":"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","sources":["webpack://webgis/./node_modules/topojson-client/src/reverse.js","webpack://webgis/./node_modules/topojson-client/src/identity.js","webpack://webgis/./node_modules/topojson-client/src/transform.js","webpack://webgis/./node_modules/topojson-client/src/feature.js","webpack://webgis/./node_modules/@cesium/engine/Source/Core/PinBuilder.js"],"sourcesContent":["export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|String} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise.<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {String} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise.<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`),\n    undefined,\n    color,\n    size,\n    this._cache\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {String} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`,\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n"],"names":["array","n","t","j","length","i","x","transform","identity","x0","y0","kx","scale","ky","dx","translate","dy","input","output","Array","topology","o","objects","type","features","geometries","map","feature","id","bbox","properties","geometry","object","transformPoint","arcs","arc","points","pop","a","k","push","reverse","point","p","line","ring","polygon","coordinates","PinBuilder","this","_cache","prototype","fromColor","color","size","defined","DeveloperError","createPin","undefined","fromUrl","url","fromMakiIconId","buildModuleUrl","encodeURIComponent","fromText","text","colorScratch","Color","drawPin","context2D","save","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","fill","stroke","restore","drawIcon","image","imageSize","sizeX","sizeY","width","height","Math","round","y","globalCompositeOperation","drawImage","fillRect","stringifyScratch","label","cache","JSON","stringify","item","canvas","document","createElement","getContext","resource","Resource","promise","fetchImage","then","writeTextToCanvas","font"],"sourceRoot":""}