{"version":3,"file":"js/7410.84926428.js","mappings":"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","sources":["webpack://webgis/./src/components/three/custom_surface.vue","webpack://webgis/./src/components/three/custom_surface.vue?0657"],"sourcesContent":["<template>\n  <div class=\"container\"><canvas id=\"c\"></canvas></div>\n</template>\n<script>\nimport * as THREE from 'three'\nclass SurfaceGeometry extends THREE.BufferGeometry {\n  constructor(width = 1, height = 1, matrix) {\n    super();\n    this.type = 'SurfaceGeometry';\n    const width_half = width / 2;\n    const height_half = height / 2;\n    const widthSegments = matrix[0].length - 1\n    const heightSegments = matrix.length - 1\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const segment_width = width / gridX;\n    const segment_height = height / gridY; //\n\n    const numVertices = gridX1 * gridY1;\n    const numIndices = gridX * gridY * 6; // 6 indices per quad\n\n    const positionData = new Float32Array(numVertices * 3);\n    const indexData = new Uint16Array(numIndices);\n\n    let vertexIndex = 0;\n    let indexIndex = 0;\n\n    for (let iy = 0; iy < gridY1; iy++) {\n      const y = iy * segment_height - height_half;\n\n      for (let ix = 0; ix < gridX1; ix++) {\n        const x = ix * segment_width - width_half;\n\n        positionData[vertexIndex] = x;\n        positionData[vertexIndex + 1] = -y;\n        positionData[vertexIndex + 2] = matrix[ix][iy];\n\n        vertexIndex += 3;\n      }\n    }\n    for (let iy = 0; iy < gridY; iy++) {\n      for (let ix = 0; ix < gridX; ix++) {\n        const a = ix + gridX1 * iy;\n        const b = ix + gridX1 * (iy + 1);\n        const c = ix + 1 + gridX1 * (iy + 1);\n        const d = ix + 1 + gridX1 * iy;\n\n        indexData[indexIndex++] = a;\n        indexData[indexIndex++] = b;\n        indexData[indexIndex++] = d;\n        indexData[indexIndex++] = b;\n        indexData[indexIndex++] = c;\n        indexData[indexIndex++] = d;\n      }\n    }\n\n    this.setIndex(new THREE.BufferAttribute(indexData, 1));\n    this.setAttribute('position', new THREE.BufferAttribute(positionData, 3));\n    this.computeVertexNormals()\n  }\n}\nclass SurfaceMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super();\n    this.type = 'SurfaceMaterial';\n    this.vertexShader = `\n        out float value;\n        void main() {\n            value = position.z;\n            vec3 transformed = position.xyz;\n            vec4 mvPosition = modelViewMatrix * vec4(transformed,1.);\n            gl_Position = projectionMatrix * mvPosition;\n        }`;\n    this.fragmentShader = `\n        uniform float min_value;\n        uniform float max_value;\n        in float value;\n        vec4 interpolateColor(float t) {\n          t = smoothstep(min_value,max_value,t);\n          vec3 green = vec3(0.0, 1.0, 0.0);\n          vec3 red = vec3(1.0, 0.0, 0.0);\n          vec3 color = mix(green, red, t);\n          return vec4(color, smoothstep(0.0,0.1,t));\n        }\n        void main() {\n\n            gl_FragColor = interpolateColor(value);\n        }\n\n        `;\n    if (parameters !== undefined) {\n      if (parameters.attributes !== undefined) {\n        console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n      }\n\n      this.setValues(parameters);\n    }\n  }\n}\nclass App {\n  constructor(canvas) {\n    this.canvas = canvas\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas, antialias: true });\n    this.renderer.setSize(this.canvas.innerWidth, this.canvas.innerHeight)\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n\n    this.scene = new THREE.Scene()\n    this.camera = new THREE.PerspectiveCamera(45, this.canvas.clientWidth / this.canvas.clientHeight, 0.1, 10000)\n    this.camera.position.z = 5\n\n    this.init()\n  }\n  init() {\n\n    const matrix = this.generateMatrix(100, 10)\n    const geometry = new SurfaceGeometry(5, 5, matrix);\n    const material = new SurfaceMaterial({\n      wireframe: true,\n      uniforms: {\n        min_value: { value: 0.0 },\n        max_value: { value: 1.0 },\n      },\n      transparent: true\n    })\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.rotateX(-45)\n    this.mesh = mesh\n    this.scene.add(mesh);\n  }\n  generateMatrix(size, sigma) {\n    var matrix = [];\n    var centerX = Math.floor(size / 2);\n    var centerY = Math.floor(size / 2);\n\n    // 循环生成矩阵\n    for (var i = 0; i < size; i++) {\n      matrix[i] = [];\n      for (var j = 0; j < size; j++) {\n        // 计算距离矩阵中心的距离\n        var distance = Math.sqrt(Math.pow(i - centerX, 2) + Math.pow(j - centerY, 2));\n\n        // 计算高斯分布的值\n        var value = Math.exp(-Math.pow(distance, 2) / (2 * Math.pow(sigma, 2)));\n\n        // 将值保存到矩阵中\n        matrix[i][j] = value;\n      }\n    }\n\n    return matrix;\n  }\n  resizeRendererToDisplaySize(renderer) {\n    const canvas = renderer.domElement\n    const width = canvas.clientWidth\n    const height = canvas.clientHeight\n    const needResize = canvas.width !== width || canvas.height !== height\n    if (needResize) {\n      renderer.setSize(width, height, false)\n    }\n    return needResize\n  }\n  render() {\n    if (this.resizeRendererToDisplaySize(this.renderer)) {\n      const canvas = this.renderer.domElement\n      this.camera.aspect = canvas.clientWidth / canvas.clientHeight\n      this.camera.updateProjectionMatrix()\n    }\n    this.mesh.rotateZ(0.005)\n    this.renderer.render(this.scene, this.camera);\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      const canvas = document.querySelector('#c')\n      const app = new App(canvas)\n      app.render()\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n\n#c {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  margin: 0%;\n}\n</style>\n","import { render } from \"./custom_surface.vue?vue&type=template&id=ec9b2d76&scoped=true\"\nimport script from \"./custom_surface.vue?vue&type=script&lang=js\"\nexport * from \"./custom_surface.vue?vue&type=script&lang=js\"\n\nimport \"./custom_surface.vue?vue&type=style&index=0&id=ec9b2d76&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-ec9b2d76\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","SurfaceGeometry","THREE","constructor","width","height","matrix","super","this","type","width_half","height_half","widthSegments","length","heightSegments","gridX","Math","floor","gridY","gridX1","gridY1","segment_width","segment_height","numVertices","numIndices","positionData","Float32Array","indexData","Uint16Array","vertexIndex","indexIndex","iy","y","ix","x","a","b","c","d","setIndex","setAttribute","computeVertexNormals","SurfaceMaterial","parameters","vertexShader","fragmentShader","undefined","attributes","console","error","setValues","App","canvas","renderer","antialias","setSize","innerWidth","innerHeight","setPixelRatio","window","devicePixelRatio","scene","camera","clientWidth","clientHeight","position","z","init","generateMatrix","geometry","material","wireframe","uniforms","min_value","value","max_value","transparent","mesh","rotateX","add","size","sigma","centerX","centerY","i","j","distance","sqrt","pow","exp","resizeRendererToDisplaySize","domElement","needResize","render","aspect","updateProjectionMatrix","rotateZ","requestAnimationFrame","bind","mounted","methods","document","querySelector","app","__exports__"],"sourceRoot":""}