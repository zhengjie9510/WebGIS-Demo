{"version":3,"file":"js/8424.1544eee9.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,+MAOF,MAAMC,EAIJC,YAAYC,GACVC,KAAKC,aAAeF,CACtB,CAOAG,kBAAkBC,GAEhB,MAAMC,EAAY,IAAIC,aAAa,CACjC,IAAO,IAAO,KACb,KAAQ,IAAO,IAChB,KAAQ,IAAO,MAEXC,EAAW,IAAIC,EAAAA,EAAgB,CACnCC,WAAY,CACVC,SAAU,IAAIF,EAAAA,EAAyB,CACrCG,kBAAmBH,EAAAA,EAAAA,MACnBI,uBAAwB,EACxBC,OAAQR,KAGZS,QAAS,CAAC,EAAG,EAAG,GAChBC,cAAeP,EAAAA,EAAAA,MACfQ,eAAgBR,EAAAA,EAAAA,aAAmCH,KAG/CY,EAAcT,EAAAA,EAAAA,aAAgC,CAClDJ,QAASA,EACTG,SAAUA,EACVW,mBAAoB,CAClBR,SAAU,GAEZS,YAAaX,EAAAA,EAAAA,cAGf,OAAOS,CACT,CAWAG,oBAAoBhB,GAClB,MAAMc,EAAqB,CACzB,SAAY,GAGRG,EAAmB,6NAQnBC,EAAqB,sHAMrBC,EAAUf,EAAAA,EAAAA,UAA+B,CAC7CJ,QAASA,EACToB,mBAAoBH,EACpBI,qBAAsBH,EACtBJ,mBAAoBA,IAEtB,OAAOK,CACT,CAOAG,cAActB,GACZ,MAAMa,EAAchB,KAAKE,kBAAkBC,GACrCmB,EAAUtB,KAAKmB,oBAAoBhB,GACnCuB,EAAcnB,EAAAA,EAAAA,UAA6B,CAC/CoB,UAAW,CACTC,SAAS,KAGPC,EAAa,CACjBC,UACE,OAAOvB,EAAAA,EAAAA,GACT,GAEIwB,EAAU,IAAIxB,EAAAA,EAAmB,CACrCR,YAAaC,KAAKC,aAClBe,YAAaA,EACbgB,cAAeV,EACfO,WAAYA,EACZH,YAAaA,EACbO,KAAM1B,EAAAA,EAAAA,SAER,OAAOwB,CACT,CAKAG,OAAOC,GACL,MAAMJ,EAAU/B,KAAKyB,cAAcU,EAAWhC,SAC9CgC,EAAWC,YAAYC,KAAKN,EAC9B,EAGF,OACEO,UACEtC,KAAKuC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIlC,EAAAA,EAAc,mBAC3BA,EAAAA,EAAAA,oCAEFkC,EAAOC,gBAAkBC,OAAOC,kBAElCH,EAAOI,MAAMC,MAAMC,yBAA0B,EAE7C,MAAMC,EAAczC,EAAAA,EAAAA,YAA8B,IAAK,GAAI,GACrDR,EAAcQ,EAAAA,EAAAA,wBAA0CyC,GAC9DP,EAAOI,MAAMI,WAAWC,IAAI,IAAIrD,EAAkBE,IAClD0C,EAAOU,OAAOC,QAAQ,CACpBC,YAAa9C,EAAAA,EAAAA,YAA8B,IAAK,GAAI,MAExD,I,WC5IJ,MAAM+C,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/cesium/custom_primitive.vue","webpack://webgis/./src/components/cesium/custom_primitive.vue?37d2"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\nclass TrianglePrimitive {\r\n  /**\r\n   * @param {Cesium.Matrix4} modelMatrix matrix to WorldCoordinateSystem\r\n   */\r\n  constructor(modelMatrix) {\r\n    this._modelMatrix = modelMatrix\r\n  }\r\n\r\n  /**\r\n   * Creates a vertex array for rendering the CPU wind.\r\n   * @param {Cesium.Context} context - The Cesium rendering context.\r\n   * @returns {Cesium.VertexArray} The created vertex array.\r\n   */\r\n  createVertexArray(context) {\r\n\r\n    const positions = new Float32Array([\r\n      10000, 50000, 5000,\r\n      -20000, -10000, 5000,\r\n      50000, -30000, 5000,\r\n    ])\r\n    const geometry = new Cesium.Geometry({\r\n      attributes: {\r\n        position: new Cesium.GeometryAttribute({\r\n          componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n          componentsPerAttribute: 3,\r\n          values: positions,\r\n        }),\r\n      },\r\n      indices: [0, 1, 2],\r\n      primitiveType: Cesium.PrimitiveType.LINES,\r\n      boundingSphere: Cesium.BoundingSphere.fromVertices(positions),\r\n    })\r\n\r\n    const vertexArray = Cesium.VertexArray.fromGeometry({\r\n      context: context,\r\n      geometry: geometry,\r\n      attributeLocations: {\r\n        position: 0,\r\n      },\r\n      bufferUsage: Cesium.BufferUsage.STATIC_DRAW\r\n    })\r\n\r\n    return vertexArray\r\n  }\r\n\r\n  /**\r\n   * Creates a draw command for rendering the CPU wind.\r\n   * @param {Cesium.Context} context - The Cesium rendering context.\r\n   * @returns {Cesium.ShaderProgram} The created shader program.\r\n   */\r\n  /**\r\n   * Creates a draw command for rendering the CPU wind.\r\n   * @param {Cesium.Context} context - The Cesium rendering context.\r\n   */\r\n  createShaderProgram(context) {\r\n    const attributeLocations = {\r\n      \"position\": 0,\r\n    }\r\n\r\n    const vertexShaderText = `\r\n      in vec3 position;\r\n      void main() {\r\n          vec4 position = czm_projection * czm_view * czm_model * vec4(position, 1.0);\r\n          gl_PointSize = 10.0;\r\n          gl_Position = position;\r\n      }\r\n      `\r\n    const fragmentShaderText = `\r\n      uniform vec3 u_color;\r\n      void main() {\r\n          out_FragColor =  vec4(u_color, 1.0);\r\n      }\r\n      `\r\n    const program = Cesium.ShaderProgram.fromCache({\r\n      context: context,\r\n      vertexShaderSource: vertexShaderText,\r\n      fragmentShaderSource: fragmentShaderText,\r\n      attributeLocations: attributeLocations,\r\n    })\r\n    return program\r\n  }\r\n\r\n  /**\r\n   * Creates a draw command for rendering CPU wind.\r\n   * @param {Object} context - The context object.\r\n   * @returns {Cesium.DrawCommand} - The draw command.\r\n   */\r\n  createCommand(context) {\r\n    const vertexArray = this.createVertexArray(context)\r\n    const program = this.createShaderProgram(context)\r\n    const renderState = Cesium.RenderState.fromCache({\r\n      depthTest: {\r\n        enabled: true\r\n      }\r\n    })\r\n    const uniformMap = {\r\n      u_color() {\r\n        return Cesium.Color.RED\r\n      },\r\n    }\r\n    const command = new Cesium.DrawCommand({\r\n      modelMatrix: this._modelMatrix,\r\n      vertexArray: vertexArray,\r\n      shaderProgram: program,\r\n      uniformMap: uniformMap,\r\n      renderState: renderState,\r\n      pass: Cesium.Pass.OPAQUE,\r\n    })\r\n    return command\r\n  }\r\n\r\n  /**\r\n   * @param {Cesium.FrameState} frameState\r\n   */\r\n  update(frameState) {\r\n    const command = this.createCommand(frameState.context)\r\n    frameState.commandList.push(command)\r\n  }\r\n}\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer')\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.globe.depthTestAgainstTerrain = true\r\n\r\n      const modelCenter = Cesium.Cartesian3.fromDegrees(112, 23, 0)\r\n      const modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(modelCenter)\r\n      viewer.scene.primitives.add(new TrianglePrimitive(modelMatrix))\r\n      viewer.camera.setView({\r\n        destination: Cesium.Cartesian3.fromDegrees(112, 23, 200000),\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./custom_primitive.vue?vue&type=template&id=3664ea32&scoped=true\"\nimport script from \"./custom_primitive.vue?vue&type=script&lang=js\"\nexport * from \"./custom_primitive.vue?vue&type=script&lang=js\"\n\nimport \"./custom_primitive.vue?vue&type=style&index=0&id=3664ea32&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-3664ea32\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","TrianglePrimitive","constructor","modelMatrix","this","_modelMatrix","createVertexArray","context","positions","Float32Array","geometry","Cesium","attributes","position","componentDatatype","componentsPerAttribute","values","indices","primitiveType","boundingSphere","vertexArray","attributeLocations","bufferUsage","createShaderProgram","vertexShaderText","fragmentShaderText","program","vertexShaderSource","fragmentShaderSource","createCommand","renderState","depthTest","enabled","uniformMap","u_color","command","shaderProgram","pass","update","frameState","commandList","push","mounted","init","methods","viewer","resolutionScale","window","devicePixelRatio","scene","globe","depthTestAgainstTerrain","modelCenter","primitives","add","camera","setView","destination","__exports__","render"],"sourceRoot":""}