{"version":3,"file":"js/6511.893dd2c4.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,2HAOF,GACEC,OACE,MAAO,CAAEC,KAAMC,gBACjB,EACAC,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIC,EAAAA,EAAc,kBAAmB,CAChDC,gBAAiB,IAAID,EAAAA,EAAkC,CACrDE,IAAK,6DACLC,WAAY,CAAC,IAAK,IAAK,IAAK,OAE9BC,gBAAiBJ,EAAAA,MAEfA,EAAAA,EAAAA,oCAEFD,EAAOM,gBAAkBC,OAAOC,kBAElCR,EAAOS,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9CZ,EAAOS,MAAMI,0BAA2B,EAExC,MAAMC,EAAkBb,EAAAA,EAAAA,aACrB,kBACD,kBACA,KAEIc,EAAqB,IAAId,EAAAA,EAAAA,YAC7B,mBACC,kBACD,mBAEFD,EAAOS,MAAMO,OAAOC,QAAQ,CAC1BC,YAAaJ,EACbK,YAAaJ,EACbK,aAAcnB,EAAAA,EAAAA,WAGhB,MAAMoB,EAAe,IAAIpB,EAAAA,EAAoB,CAC3CqB,SAAU,CACRC,UAAW,CACTC,KAAMvB,EAAAA,EAAAA,MACNwB,MAAO,GAETC,UAAW,CACTF,KAAMvB,EAAAA,EAAAA,MACNwB,MAAO,IAGXE,mBAAoB,qlBAahBC,EAAU,IAAI3B,EAAAA,EAAuB,CACzCE,IAAKF,EAAAA,EAAAA,YAA+B,OACpCoB,aAAcA,IAEhBO,EAAQC,aAAaC,MAAMF,IACzB,MAAOG,EAAWC,GAAa,CAC7BJ,EAAQK,WAAW,0BAA0BC,QAC7CN,EAAQK,WAAW,0BAA0BE,SAE/CP,EAAQP,aAAae,WAAW,YAAaL,GAC7CH,EAAQP,aAAae,WAAW,YAAaJ,GAE7ChC,EAAOS,MAAM4B,WAAWC,IAAIV,EAAQ,GAExC,I,WC9EJ,MAAMW,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O,uECwBA,SAASC,EAAmBC,IAC1BC,EAAAA,EAAAA,GACE,qBACA,6HAGFD,GAAUE,EAAAA,EAAAA,GAAaF,EAASE,EAAAA,EAAAA,cAEhC,MAAMC,EAAW,IAAIC,EAAAA,EAAsB,CACzCC,sBAAsBH,EAAAA,EAAAA,GAAaF,EAAQK,sBAAsB,GACjEC,kBAAkBJ,EAAAA,EAAAA,GAAaF,EAAQM,kBAAkB,KAc3D,OATAH,EAASI,cAAgBH,EAAAA,EAAAA,wBACvB,CACE3C,IAAK+C,EAAAA,EAAAA,YAAwB,GAC7BH,sBAAsBH,EAAAA,EAAAA,GAAaF,EAAQK,sBAAsB,GACjEC,kBAAkBJ,EAAAA,EAAAA,GAAaF,EAAQM,kBAAkB,IAE3DH,GAGKA,CACT,CACA,Q","sources":["webpack://webgis/./src/components/cesium/3dTiles_shader.vue","webpack://webgis/./src/components/cesium/3dTiles_shader.vue?ec14","webpack://webgis/./node_modules/@cesium/engine/Source/Core/createWorldTerrain.js"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\nexport default {\r\n  data() {\r\n    return { path: process.env.BASE_URL }\r\n  },\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer', {\r\n        imageryProvider: new Cesium.UrlTemplateImageryProvider({\r\n          url: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\",\r\n          subdomains: [\"a\", \"b\", \"c\", \"d\"],\r\n        }),\r\n        terrainProvider: Cesium.createWorldTerrain()\r\n      })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      viewer.scene.debugShowFramesPerSecond = true;\r\n\r\n      const initialPosition = Cesium.Cartesian3.fromDegrees(\r\n        -74.01881302800248,\r\n        40.69114333714821,\r\n        753\r\n      );\r\n      const initialOrientation = new Cesium.HeadingPitchRoll.fromDegrees(\r\n        21.27879878293835,\r\n        -21.34390550872461,\r\n        0.0716951918898415\r\n      );\r\n      viewer.scene.camera.setView({\r\n        destination: initialPosition,\r\n        orientation: initialOrientation,\r\n        endTransform: Cesium.Matrix4.IDENTITY,\r\n      });\r\n\r\n      const customShader = new Cesium.CustomShader({\r\n        uniforms: {\r\n          maxHeight: {\r\n            type: Cesium.UniformType.FLOAT,\r\n            value: 0.0,\r\n          },\r\n          minHeight: {\r\n            type: Cesium.UniformType.FLOAT,\r\n            value: 0.0,\r\n          },\r\n        },\r\n        fragmentShaderText: `\r\n          void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material) {\r\n            float curz = fsInput.attributes.positionMC.z;\r\n            float d = (curz - minHeight) / (maxHeight - minHeight);\r\n            float r = 0.01;\r\n            r = fract(r * czm_frameNumber);\r\n            float c = smoothstep(r, r+0.03, d) - smoothstep(r + 0.035,r + 0.04, d);\r\n            vec3 linearColor = mix(vec3(1.0,1.0,1.0) ,vec3(255.0,48.0,48.0)/255.0,r);\r\n            vec3 renderColor = mix(vec3(0.0,0.96,1.0) ,linearColor,c);\r\n            material.diffuse = renderColor;\r\n          }`\r\n      });\r\n\r\n      const tileset = new Cesium.Cesium3DTileset({\r\n        url: Cesium.IonResource.fromAssetId(96188),\r\n        customShader: customShader\r\n      });\r\n      tileset.readyPromise.then((tileset) => {\r\n        const [maxheight, minheight] = [\r\n          tileset.properties['cesium#estimatedHeight'].maximum,\r\n          tileset.properties['cesium#estimatedHeight'].minimum,\r\n        ];\r\n        tileset.customShader.setUniform(\"maxHeight\", maxheight);\r\n        tileset.customShader.setUniform(\"minHeight\", minheight);\r\n\r\n        viewer.scene.primitives.add(tileset);\r\n      });\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./3dTiles_shader.vue?vue&type=template&id=974c3aec&scoped=true\"\nimport script from \"./3dTiles_shader.vue?vue&type=script&lang=js\"\nexport * from \"./3dTiles_shader.vue?vue&type=script&lang=js\"\n\nimport \"./3dTiles_shader.vue?vue&type=style&index=0&id=974c3aec&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-974c3aec\"]])\n\nexport default __exports__","import CesiumTerrainProvider from \"./CesiumTerrainProvider.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport deprecationWarning from \"./deprecationWarning.js\";\nimport IonResource from \"./IonResource.js\";\n\n/**\n * Creates a {@link CesiumTerrainProvider} instance for the {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {CesiumTerrainProvider}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *     terrainProvider : Cesium.createWorldTerrain();\n * });\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * const viewer1 = new Cesium.Viewer('cesiumContainer', {\n *     terrainProvider : Cesium.createWorldTerrain({\n *         requestWaterMask : true,\n *         requestVertexNormals : true\n *     });\n * });\n *\n */\nfunction createWorldTerrain(options) {\n  deprecationWarning(\n    \"createWorldTerrain\",\n    \"createWorldTerrain was deprecated in CesiumJS 1.104.  It will be in CesiumJS 1.107.  Use createWorldTerrainAsync instead.\"\n  );\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const provider = new CesiumTerrainProvider({\n    requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n    requestWaterMask: defaultValue(options.requestWaterMask, false),\n  });\n\n  // This is here in order to avoid throwing a second deprecation error\n  // by using the deprecated url parameter in the constructor above\n  provider._readyPromise = CesiumTerrainProvider._initializeReadyPromise(\n    {\n      url: IonResource.fromAssetId(1),\n      requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n      requestWaterMask: defaultValue(options.requestWaterMask, false),\n    },\n    provider\n  );\n\n  return provider;\n}\nexport default createWorldTerrain;\n"],"names":["id","_createElementBlock","_hoisted_1","data","path","process","mounted","this","init","methods","viewer","Cesium","imageryProvider","url","subdomains","terrainProvider","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","debugShowFramesPerSecond","initialPosition","initialOrientation","camera","setView","destination","orientation","endTransform","customShader","uniforms","maxHeight","type","value","minHeight","fragmentShaderText","tileset","readyPromise","then","maxheight","minheight","properties","maximum","minimum","setUniform","primitives","add","__exports__","render","createWorldTerrain","options","deprecationWarning","defaultValue","provider","CesiumTerrainProvider","requestVertexNormals","requestWaterMask","_readyPromise","IonResource"],"sourceRoot":""}