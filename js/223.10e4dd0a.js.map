{"version":3,"file":"js/223.10e4dd0a.js","mappings":"+KACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,mHAkBF,GACEC,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIC,EAAAA,EAAO,mBACpBC,EAAAA,EAAAA,oCAEFF,EAAOG,gBAAkBC,OAAOC,kBAElCL,EAAOM,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9C,IAAIH,EAAQN,EAAOM,MAMfI,EAAkB,IAAIC,EAAAA,EAAiB,CACzCC,SAAUC,EAAAA,EAAAA,oBAAiC,CACzCC,UAAWC,EAAAA,EAAAA,iBAA4B,EAAE,IAAO,IAAO,GAAM,KAC7DC,cAAe,IACfC,cAAe,IACfC,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,QAKhDC,EAAUlB,EAAMmB,WAAWC,IAC7B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBlB,EACnBmB,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAsBdC,EAAoB,IAAI1B,EAAAA,EAAiB,CAC3CC,SAAUC,EAAAA,EAAAA,oBAAiC,CACzCC,UAAWC,EAAAA,EAAAA,iBAA4B,EACpC,IACD,IACC,GACD,IACC,GACD,IACC,IACD,IACC,IACD,KAEFC,cAAe,IACfE,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,UAKhDe,EAAYhC,EAAMmB,WAAWC,IAC/B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBS,EACnBR,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAsBdtB,EAAYC,EAAAA,EAAAA,iBAA4B,EACzC,IACD,IACC,MACD,IACC,IACD,IACC,MACD,IACC,IACD,IACC,MACD,IACC,IACD,IACC,KACD,IACC,GACD,IACC,KACD,IACC,GACD,KAEEwB,EAAiB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEEC,EAAiB,CACnB,EACA,IACA,EACA,IACA,EACA,IACA,EACA,IACA,EACA,IACA,GAGEC,EAAmB,IAAI9B,EAAAA,EAAiB,CAC1CC,SAAU,IAAIC,EAAAA,EAAa,CACzBC,UAAWA,EACXyB,eAAgBA,EAChBC,eAAgBA,EAChBtB,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,SAKhDmB,EAAWpC,EAAMmB,WAAWC,IAC9B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBa,EACnBZ,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAmBlBpC,EAAOM,MAAMqC,UAAUC,kBAAiB,WACtC,IAAIC,EAAYrB,EAAQK,WAAWE,SAASG,SAASC,OACrDU,GAAa,IACTA,EAAY,IACdA,EAAY,GAEdrB,EAAQK,WAAWE,SAASG,SAASC,OAASU,EAE9C,IAAIC,EAAcR,EAAUT,WAAWE,SAASG,SAASC,OACzDW,GAAe,IACXA,EAAc,IAChBA,EAAc,GAEhBR,EAAUT,WAAWE,SAASG,SAASC,OAASW,EAEhD,IAAIC,EAAaL,EAASb,WAAWE,SAASG,SAASC,OACvDY,GAAc,IACVA,EAAa,IACfA,EAAa,GAEfL,EAASb,WAAWE,SAASG,SAASC,OAASY,CACjD,GACF,I,QCrPJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/public/dynamic_wall.vue","webpack://webgis/./src/components/public/dynamic_wall.vue?c89e"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport {\r\n  Viewer,\r\n  FeatureDetection,\r\n  WallGeometry,\r\n  Cartesian3,\r\n  VertexFormat,\r\n  GeometryInstance,\r\n  Primitive,\r\n  MaterialAppearance,\r\n  Material,\r\n  ColorGeometryInstanceAttribute,\r\n  Color,\r\n} from 'cesium'\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Viewer('cesiumContainer')\r\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      var scene = viewer.scene\r\n\r\n      // Example 1: Draw a red wall with constant min and max heights\r\n\r\n      // Use the maximumHeight and minumumHeight options to specify\r\n      // the heights of the top and bottom of the wall.\r\n      var redWallInstance = new GeometryInstance({\r\n        geometry: WallGeometry.fromConstantHeights({\r\n          positions: Cartesian3.fromDegreesArray([-115.0, 44.0, -90.0, 44.0]),\r\n          maximumHeight: 200000.0,\r\n          minimumHeight: 100000.0,\r\n          vertexFormat: VertexFormat.POSITION_AND_ST,\r\n        }),\r\n        attributes: {\r\n          color: ColorGeometryInstanceAttribute.fromColor(Color.RED),\r\n        },\r\n      })\r\n\r\n      // Add red wall instances to primitives.\r\n      var redWall = scene.primitives.add(\r\n        new Primitive({\r\n          geometryInstances: redWallInstance,\r\n          appearance: new MaterialAppearance({\r\n            material: new Material({\r\n              fabric: {\r\n                uniforms: {\r\n                  color: new Color(1.0, 0.0, 0.0),\r\n                  offset: 0.0,\r\n                },\r\n                source: `\r\n                                    uniform vec4 color;\r\n                                    uniform float offset;\r\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\r\n                                    {\r\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\r\n                                        vec2 st = materialInput.st;\r\n                                        material.diffuse = color.rgb;\r\n                                        material.alpha = fract(1.0 - st.t + offset);\r\n                                        material.emission=vec3(0.5);\r\n                                        return material;\r\n                                    }`,\r\n              },\r\n            }),\r\n          }),\r\n        })\r\n      )\r\n\r\n      // Example 2: Draw a green wall with constant height\r\n\r\n      // If minumumHeight is not specified, the wall will be\r\n      // drawn on the globe surface.\r\n      var greenWallInstance = new GeometryInstance({\r\n        geometry: WallGeometry.fromConstantHeights({\r\n          positions: Cartesian3.fromDegreesArray([\r\n            -107.0,\r\n            43.0,\r\n            -97.0,\r\n            43.0,\r\n            -97.0,\r\n            40.0,\r\n            -107.0,\r\n            40.0,\r\n            -107.0,\r\n            43.0,\r\n          ]),\r\n          maximumHeight: 100000.0,\r\n          vertexFormat: VertexFormat.POSITION_AND_ST,\r\n        }),\r\n        attributes: {\r\n          color: ColorGeometryInstanceAttribute.fromColor(Color.GREEN),\r\n        },\r\n      })\r\n\r\n      // Add green wall instances to primitives.\r\n      var greenWall = scene.primitives.add(\r\n        new Primitive({\r\n          geometryInstances: greenWallInstance,\r\n          appearance: new MaterialAppearance({\r\n            material: new Material({\r\n              fabric: {\r\n                uniforms: {\r\n                  color: new Color(0.0, 1.0, 0.0),\r\n                  offset: 0.0,\r\n                },\r\n                source: `\r\n                                    uniform vec4 color;\r\n                                    uniform float offset;\r\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\r\n                                    {\r\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\r\n                                        vec2 st = materialInput.st;\r\n                                        material.diffuse = color.rgb;\r\n                                        material.alpha = fract(1.0 - st.t + offset);\r\n                                        material.emission=vec3(0.5);\r\n                                        return material;\r\n                                    }`,\r\n              },\r\n            }),\r\n          }),\r\n        })\r\n      )\r\n\r\n      // Example 3: Draw a blue wall with per position heights\r\n      // To use per position heights, create an array of heights\r\n      // for maximumHeights (and optionally minumumHeights)\r\n      // with a length equal to the number of positions.\r\n      var positions = Cartesian3.fromDegreesArray([\r\n        -115.0,\r\n        50.0,\r\n        -112.5,\r\n        50.0,\r\n        -110.0,\r\n        50.0,\r\n        -107.5,\r\n        50.0,\r\n        -105.0,\r\n        50.0,\r\n        -102.5,\r\n        50.0,\r\n        -100.0,\r\n        50.0,\r\n        -97.5,\r\n        50.0,\r\n        -95.0,\r\n        50.0,\r\n        -92.5,\r\n        50.0,\r\n        -90.0,\r\n        50.0,\r\n      ])\r\n      var maximumHeights = [\r\n        100000,\r\n        200000,\r\n        100000,\r\n        200000,\r\n        100000,\r\n        200000,\r\n        100000,\r\n        200000,\r\n        100000,\r\n        200000,\r\n        100000,\r\n      ]\r\n      var minimumHeights = [\r\n        0,\r\n        100000,\r\n        0,\r\n        100000,\r\n        0,\r\n        100000,\r\n        0,\r\n        100000,\r\n        0,\r\n        100000,\r\n        0,\r\n      ]\r\n\r\n      var blueWallInstance = new GeometryInstance({\r\n        geometry: new WallGeometry({\r\n          positions: positions,\r\n          maximumHeights: maximumHeights,\r\n          minimumHeights: minimumHeights,\r\n          vertexFormat: VertexFormat.POSITION_AND_ST,\r\n        }),\r\n        attributes: {\r\n          color: ColorGeometryInstanceAttribute.fromColor(Color.BLUE),\r\n        },\r\n      })\r\n\r\n      // Add blue wall instances to primitives.\r\n      var blueWall = scene.primitives.add(\r\n        new Primitive({\r\n          geometryInstances: blueWallInstance,\r\n          appearance: new MaterialAppearance({\r\n            material: new Material({\r\n              fabric: {\r\n                uniforms: {\r\n                  color: new Color(0.0, 0.0, 1.0),\r\n                  offset: 0.0,\r\n                },\r\n                source: `\r\n                                    uniform vec4 color;\r\n                                    uniform float offset;\r\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\r\n                                    {\r\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\r\n                                        vec2 st = materialInput.st;\r\n                                        material.diffuse = color.rgb;\r\n                                        material.alpha = fract(1.0 - st.t + offset);\r\n                                        material.emission=vec3(0.5);\r\n                                        return material;\r\n                                    }`,\r\n              },\r\n            }),\r\n          }),\r\n        })\r\n      )\r\n\r\n      // 动态修改雷达材质中的offset变量，从而实现动态效果。\r\n      viewer.scene.preUpdate.addEventListener(function() {\r\n        var redoffset = redWall.appearance.material.uniforms.offset\r\n        redoffset += 0.01\r\n        if (redoffset > 1.0) {\r\n          redoffset = 0.0\r\n        }\r\n        redWall.appearance.material.uniforms.offset = redoffset\r\n\r\n        var greenoffset = greenWall.appearance.material.uniforms.offset\r\n        greenoffset += 0.01\r\n        if (greenoffset > 1.0) {\r\n          greenoffset = 0.0\r\n        }\r\n        greenWall.appearance.material.uniforms.offset = greenoffset\r\n\r\n        var blueoffset = blueWall.appearance.material.uniforms.offset\r\n        blueoffset += 0.01\r\n        if (blueoffset > 1.0) {\r\n          blueoffset = 0.0\r\n        }\r\n        blueWall.appearance.material.uniforms.offset = blueoffset\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./dynamic_wall.vue?vue&type=template&id=76299419&scoped=true\"\nimport script from \"./dynamic_wall.vue?vue&type=script&lang=js\"\nexport * from \"./dynamic_wall.vue?vue&type=script&lang=js\"\n\nimport \"./dynamic_wall.vue?vue&type=style&index=0&id=76299419&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\Z-Personal\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-76299419\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Viewer","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","redWallInstance","GeometryInstance","geometry","WallGeometry","positions","Cartesian3","maximumHeight","minimumHeight","vertexFormat","VertexFormat","attributes","color","ColorGeometryInstanceAttribute","Color","redWall","primitives","add","Primitive","geometryInstances","appearance","MaterialAppearance","material","Material","fabric","uniforms","offset","source","greenWallInstance","greenWall","maximumHeights","minimumHeights","blueWallInstance","blueWall","preUpdate","addEventListener","redoffset","greenoffset","blueoffset","__exports__","render"],"sourceRoot":""}