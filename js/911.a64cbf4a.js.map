{"version":3,"file":"js/911.a64cbf4a.js","mappings":"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","sources":["webpack://webgis/./node_modules/cesium/Source/Core/CircleGeometry.js","webpack://webgis/./node_modules/cesium/Source/Scene/ConditionsExpression.js","webpack://webgis/./node_modules/cesium/Source/Scene/Cesium3DTileStyle.js","webpack://webgis/./node_modules/cesium/Source/Scene/createOsmBuildings.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nconst scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = circleGeometry._ellipseGeometry._granularity;\n  const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n","import clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates a conditions expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * Implements the {@link StyleExpression} interface.\n * </p>\n *\n * @alias ConditionsExpression\n * @constructor\n *\n * @param {Object} [conditionsExpression] The conditions expression defined using the 3D Tiles Styling language.\n * @param {Object} [defines] Defines in the style.\n *\n * @example\n * const expression = new Cesium.ConditionsExpression({\n *     conditions : [\n *         ['${Area} > 10, 'color(\"#FF0000\")'],\n *         ['${id} !== \"1\"', 'color(\"#00FF00\")'],\n *         ['true', 'color(\"#FFFFFF\")']\n *     ]\n * });\n * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n */\nfunction ConditionsExpression(conditionsExpression, defines) {\n  this._conditionsExpression = clone(conditionsExpression, true);\n  this._conditions = conditionsExpression.conditions;\n  this._runtimeConditions = undefined;\n\n  setRuntime(this, defines);\n}\n\nObject.defineProperties(ConditionsExpression.prototype, {\n  /**\n   * Gets the conditions expression defined in the 3D Tiles Styling language.\n   *\n   * @memberof ConditionsExpression.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  conditionsExpression: {\n    get: function () {\n      return this._conditionsExpression;\n    },\n  },\n});\n\nfunction Statement(condition, expression) {\n  this.condition = condition;\n  this.expression = expression;\n}\n\nfunction setRuntime(expression, defines) {\n  const runtimeConditions = [];\n  const conditions = expression._conditions;\n  if (!defined(conditions)) {\n    return;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    const cond = String(statement[0]);\n    const condExpression = String(statement[1]);\n    runtimeConditions.push(\n      new Statement(\n        new Expression(cond, defines),\n        new Expression(condExpression, defines)\n      )\n    );\n  }\n  expression._runtimeConditions = runtimeConditions;\n}\n\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Object} [result] The object onto which to store the result.\n * @returns {Boolean|Number|String|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\nConditionsExpression.prototype.evaluate = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluate(feature, result);\n    }\n  }\n};\n\n/**\n * Evaluates the result of a Color expression, using the values defined by a feature.\n * <p>\n * This is equivalent to {@link ConditionsExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nConditionsExpression.prototype.evaluateColor = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluateColor(feature, result);\n    }\n  }\n};\n\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {String} returnType The return type of the generated function.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nConditionsExpression.prototype.getShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n  returnType\n) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return undefined;\n  }\n\n  let shaderFunction = \"\";\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n\n    const condition = statement.condition.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState\n    );\n    const expression = statement.expression.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState\n    );\n\n    // Build the if/else chain from the list of conditions\n    shaderFunction +=\n      `    ${i === 0 ? \"if\" : \"else if\"} (${condition})\\n` +\n      `    {\\n` +\n      `        return ${expression};\\n` +\n      `    }\\n`;\n  }\n\n  shaderFunction =\n    `${returnType} ${functionSignature}\\n` +\n    `{\\n${shaderFunction}    return ${returnType}(1.0);\\n` + // Return a default value if no conditions are met\n    `}\\n`;\n\n  return shaderFunction;\n};\n\n/**\n * Gets the variables used by the expression.\n *\n * @returns {String[]} The variables used by the expression.\n *\n * @private\n */\nConditionsExpression.prototype.getVariables = function () {\n  let variables = [];\n\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return variables;\n  }\n\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    variables.push.apply(variables, statement.condition.getVariables());\n    variables.push.apply(variables, statement.expression.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default ConditionsExpression;\n","import clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ConditionsExpression from \"./ConditionsExpression.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {Object} [style] An object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n */\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n\n  this._colorShaderTranslucent = false;\n\n  setup(this, style);\n}\n\nfunction setup(that, styleJson) {\n  styleJson = defaultValue(clone(styleJson, true), that._style);\n  that._style = styleJson;\n\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n\n  const meta = {};\n  if (defined(styleJson.meta)) {\n    const defines = styleJson.defines;\n    const metaJson = defaultValue(styleJson.meta, defaultValue.EMPTY_OBJECT);\n    for (const property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new Expression(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  const defines = defaultValue(tileStyle._style, defaultValue.EMPTY_OBJECT)\n    .defines;\n\n  if (!defined(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new Expression(String(value));\n  } else if (typeof value === \"string\") {\n    return new Expression(value, defines);\n  } else if (defined(value.conditions)) {\n    return new ConditionsExpression(value, defines);\n  }\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!defined(expression)) {\n    return undefined;\n  } else if (defined(expression.expression)) {\n    return expression.expression;\n  } else if (defined(expression.conditionsExpression)) {\n    return clone(expression.conditionsExpression, true);\n  }\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {Object}\n   * @readonly\n   *\n   * @default {}\n   */\n  style: {\n    get: function () {\n      return this._style;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(\n        this._pointOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(\n        this._pointOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(\n        this._labelOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(\n        this._labelOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelStyle : `(\\${Temperature} > 90) ? ${LabelStyle.FILL_AND_OUTLINE} : ${LabelStyle.FILL}`\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(\n        this._backgroundColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(\n        this._backgroundPadding\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(\n        this._backgroundEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(\n        this._scaleByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(\n        this._translucencyByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(\n        this._distanceDisplayCondition\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(\n        this._anchorLineEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(\n        this._anchorLineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(\n        this._disableDepthTestDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(\n        this._horizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    },\n  },\n\n  /**\n   Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n    * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n    * <p>\n    * The expression must return a <code>HorizontalOrigin</code>.\n    * </p>\n    * <p>\n    * This expression is only applicable to point features in a Vector tile.\n    * </p>\n    *\n    * @memberof Cesium3DTileStyle.prototype\n    *\n    * @type {StyleExpression}\n    *\n    * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n    *\n    * @example\n    * const style = new Cesium3DTileStyle({\n    *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n    * });\n    * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n    *\n    * @example\n    * const style = new Cesium.Cesium3DTileStyle();\n    * // Override labelHorizontalOrigin expression with a custom function\n    * style.labelHorizontalOrigin = {\n    *     evaluate : function(feature) {\n    *         return HorizontalOrigin.CENTER;\n    *     }\n    * };\n    */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(\n        this._labelHorizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(\n        this._labelVerticalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    },\n  },\n});\n\n/**\n * Asynchronously creates a Cesium3DTileStyle from a url.\n *\n * @param {Resource|String} url The url of the style to be loaded.\n *\n * @returns {Promise.<Cesium3DTileStyle>} A promise which resolves to the created style\n *\n * @private\n */\nCesium3DTileStyle.fromUrl = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  return resource.fetchJson(url).then(function (styleJson) {\n    return new Cesium3DTileStyle(styleJson);\n  });\n};\n\n/**\n * Gets the color shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getColorShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent;\n    // Return the cached result, may be undefined\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  if (defined(this.color) && defined(this.color.getShaderFunction)) {\n    this._colorShaderFunction = this.color.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"vec4\"\n    );\n  } else {\n    this._colorShaderFunction = undefined;\n  }\n\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n\n/**\n * Gets the show shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getShowShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n\n  if (defined(this.show) && defined(this.show.getShaderFunction)) {\n    this._showShaderFunction = this.show.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"bool\"\n    );\n  } else {\n    this._showShaderFunction = undefined;\n  }\n  return this._showShaderFunction;\n};\n\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {String} functionSignature Signature of the generated function.\n * @param {Object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {Object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {String} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  if (defined(this.pointSize) && defined(this.pointSize.getShaderFunction)) {\n    this._pointSizeShaderFunction = this.pointSize.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"float\"\n    );\n  } else {\n    this._pointSizeShaderFunction = undefined;\n  }\n\n  return this._pointSizeShaderFunction;\n};\n\n/**\n * Gets the variables used by the style.\n *\n * @returns {String[]} The variables used by the style.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getVariables = function () {\n  let variables = [];\n\n  if (defined(this.color) && defined(this.color.getVariables)) {\n    variables.push.apply(variables, this.color.getVariables());\n  }\n\n  if (defined(this.show) && defined(this.show.getVariables)) {\n    variables.push.apply(variables, this.show.getVariables());\n  }\n\n  if (defined(this.pointSize) && defined(this.pointSize.getVariables)) {\n    variables.push.apply(variables, this.pointSize.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default Cesium3DTileStyle;\n","import Color from \"../Core/Color.js\";\nimport combine from \"../Core/combine.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport IonResource from \"../Core/IonResource.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {Object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {Boolean} [options.enableShowOutline=true] If true, enable rendering outlines. This can be set to false to avoid the additional processing of geometry at load time.\n * @param {Boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Cesium3DTileset}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.scene.primitives.add(Cesium.createOsmBuildings());\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * viewer.scene.primitives.add(Cesium.createOsmBuildings({\n *   style: new Cesium.Cesium3DTileStyle({\n *     color: {\n *       conditions: [\n *         [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *         [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *         [true, \"color('#ffffff')\"]\n *       ]\n *     }\n *   })\n * }));\n */\nfunction createOsmBuildings(options) {\n  options = combine(options, {\n    url: IonResource.fromAssetId(96188),\n  });\n\n  const tileset = new Cesium3DTileset(options);\n\n  let style = options.style;\n\n  if (!defined(style)) {\n    const color = defaultValue(\n      options.defaultColor,\n      Color.WHITE\n    ).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildings;\n"],"names":["CircleGeometry","options","defaultValue","radius","Check","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","vertexFormat","stRotation","shadowVolume","this","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","VertexFormat","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints","ConditionsExpression","conditionsExpression","defines","_conditionsExpression","clone","_conditions","conditions","_runtimeConditions","setRuntime","Statement","condition","expression","runtimeConditions","length","i","statement","cond","String","condExpression","push","Expression","evaluate","feature","evaluateColor","getShaderFunction","functionSignature","variableSubstitutionMap","shaderState","returnType","shaderFunction","getShaderExpression","getVariables","variables","apply","filter","variable","index","indexOf","Cesium3DTileStyle","style","_style","_ready","_show","_color","_pointSize","_pointOutlineColor","_pointOutlineWidth","_labelColor","_labelOutlineColor","_labelOutlineWidth","_font","_labelStyle","_labelText","_backgroundColor","_backgroundPadding","_backgroundEnabled","_scaleByDistance","_translucencyByDistance","_distanceDisplayCondition","_heightOffset","_anchorLineEnabled","_anchorLineColor","_image","_disableDepthTestDistance","_horizontalOrigin","_verticalOrigin","_labelHorizontalOrigin","_labelVerticalOrigin","_meta","_colorShaderFunction","_showShaderFunction","_pointSizeShaderFunction","_colorShaderFunctionReady","_showShaderFunctionReady","_pointSizeShaderFunctionReady","_colorShaderTranslucent","setup","that","styleJson","show","color","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","labelOutlineColor","labelOutlineWidth","labelStyle","font","labelText","backgroundColor","backgroundPadding","backgroundEnabled","scaleByDistance","translucencyByDistance","distanceDisplayCondition","heightOffset","anchorLineEnabled","anchorLineColor","image","disableDepthTestDistance","horizontalOrigin","verticalOrigin","labelHorizontalOrigin","labelVerticalOrigin","meta","metaJson","property","hasOwnProperty","getExpression","tileStyle","getJsonFromExpression","set","fromUrl","url","DeveloperError","resource","Resource","fetchJson","then","getColorShaderFunction","translucent","getShowShaderFunction","getPointSizeShaderFunction","createOsmBuildings","combine","IonResource","tileset","Cesium3DTileset","defaultColor","Color","toCssColorString"],"sourceRoot":""}