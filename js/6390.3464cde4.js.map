{"version":3,"file":"js/6390.3464cde4.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,iNAQF,SAASC,EAAUC,GACjB,OAAOC,MAAMD,GACVE,MAAKC,IACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAO,uBAAsBF,EAASG,UAElD,OAAOH,EAASI,MAAM,IAEvBC,OAAMC,IACLC,QAAQD,MAAM,SAAUA,EAAM,GAEpC,CAGA,OACEE,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,MAAME,EAAS,IAAIC,EAAAA,EAAc,kBAAmB,CAClDC,gBAAiB,IAAID,EAAAA,EAAkC,CACrDhB,IAAK,6DACLkB,WAAY,CAAC,IAAK,IAAK,IAAK,SAG5BF,EAAAA,EAAAA,oCAEFD,EAAOI,gBAAkBC,OAAOC,kBAElCN,EAAOO,MAAMC,kBAAkBC,KAAKC,SAAU,EAE9C1B,EAAU2B,wCACPxB,MAAKyB,IACJ,IAAIC,EAAY,IAAIC,aAAaF,EAAKC,WAClCE,EAAS,IAAIC,WAAWJ,EAAKG,QAE7BE,EAAa,IAAIhB,EAAAA,EAA0B,CAC7CiB,SAAU,IAAIjB,EAAAA,EAAyB,CACrCkB,kBAAmBlB,EAAAA,EAAAA,OACnBmB,uBAAwB,EACxBC,OAAQR,IAEVS,MAAO,IAAIrB,EAAAA,EAAyB,CAClCkB,kBAAmBlB,EAAAA,EAAAA,MACnBmB,uBAAwB,EACxBC,OAAQN,MAKRQ,EAAU,IAAIC,YAAYZ,EAAKW,SAE/BE,EAAW,IAAIxB,EAAAA,EAAgB,CACjCgB,WAAYA,EACZM,QAASA,EACTG,cAAezB,EAAAA,EAAAA,UACf0B,eAAgB1B,EAAAA,EAAAA,aAAmCY,KAGrDY,EAAWxB,EAAAA,EAAAA,cAAsCwB,GAGjD,IAAIG,EAAc3B,EAAAA,EAAAA,wBAChBA,EAAAA,EAAAA,YAA8BW,EAAKiB,SAASC,EAAGlB,EAAKiB,SAASE,IAI3DC,EAAW,IAAI/B,EAAAA,EAAwB,CACzCwB,SAAUA,EACVG,YAAaA,IAGf,SAASK,IACP,MAAO,mrBAoBT,CAEA,SAASC,IACP,MAAO,yUAQT,CAEA,IAAIC,EAAa,IAAIlC,EAAAA,EAA0B,CAC7CmC,aAAa,EACbC,mBAAoBJ,IACpBK,SAAU,IAAIrC,EAAAA,EAAgB,CAC5BmC,aAAa,EACbG,OAAQ,CACNC,KAAM,UACNC,OAAQP,OAGZQ,gBAAiBzC,EAAAA,EAAAA,gBAAAA,MACjB0C,YAAa,CACXC,SAAU3C,EAAAA,EAAAA,YACV4C,UAAW,CAAEnC,SAAS,GACtBoC,WAAW,KAIf,MAAMC,EAAY,IAAI9C,EAAAA,EAAiB,CACrC+C,kBAAmBhB,EACnBG,WAAYA,EACZc,cAAc,IAGhBjD,EAAOO,MAAM2C,WAAWC,IAAIJ,GAC5B,IAAIK,EAASnD,EAAAA,EAAAA,YAA8BW,EAAKiB,SAASC,EAAGlB,EAAKiB,SAASE,GACtEsB,EAAS,IACbrD,EAAOsD,OAAOC,oBAAoB,IAAItD,EAAAA,EAAsBmD,EAAQC,GAAS,CAAEG,SAAU,GAAI,GAEnG,I,WC1IJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/cesium/custom_geometry_1.vue","webpack://webgis/./src/components/cesium/custom_geometry_1.vue?a717"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\n\r\nfunction fetchJSON(url) {\r\n  return fetch(url)\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch(error => {\r\n      console.error('Error:', error);\r\n    });\r\n}\r\n\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      const viewer = new Cesium.Viewer('cesiumContainer', {\r\n        imageryProvider: new Cesium.UrlTemplateImageryProvider({\r\n          url: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\",\r\n          subdomains: [\"a\", \"b\", \"c\", \"d\"],\r\n        })\r\n      })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n\r\n      fetchJSON(process.env.BASE_URL + 'SampleData/surface.json')\r\n        .then(data => {\r\n          let positions = new Float32Array(data.positions)\r\n          let colors = new Uint8Array(data.colors)\r\n\r\n          let attributes = new Cesium.GeometryAttributes({\r\n            position: new Cesium.GeometryAttribute({\r\n              componentDatatype: Cesium.ComponentDatatype.DOUBLE,\r\n              componentsPerAttribute: 3,\r\n              values: positions,\r\n            }),\r\n            color: new Cesium.GeometryAttribute({\r\n              componentDatatype: Cesium.ComponentDatatype.FLOAT,\r\n              componentsPerAttribute: 4,\r\n              values: colors,\r\n            }),\r\n          })\r\n\r\n\r\n          let indices = new Uint32Array(data.indices)\r\n\r\n          let geometry = new Cesium.Geometry({\r\n            attributes: attributes,\r\n            indices: indices,\r\n            primitiveType: Cesium.PrimitiveType.TRIANGLES,\r\n            boundingSphere: Cesium.BoundingSphere.fromVertices(positions),\r\n          })\r\n\r\n          geometry = Cesium.GeometryPipeline.computeNormal(geometry)\r\n\r\n          //模型矩阵\r\n          let modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(\r\n            Cesium.Cartesian3.fromDegrees(data.centroid.x, data.centroid.y)\r\n          )\r\n\r\n          //四面体的实例\r\n          let instance = new Cesium.GeometryInstance({\r\n            geometry: geometry,\r\n            modelMatrix: modelMatrix,\r\n          })\r\n\r\n          function v_shader() {\r\n            return `\r\n            in vec3 position3DHigh;\r\n            in vec3 position3DLow;\r\n            in vec3 normal;\r\n            in vec4 color;\r\n            in float batchId;\r\n\r\n            out vec3 v_positionEC;\r\n            out vec3 v_normalEC;\r\n            out vec4 v_color;\r\n\r\n            void main()\r\n            {\r\n                vec4 p = czm_computePosition();\r\n\r\n                v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\r\n                v_normalEC = czm_normal * normal;                         // normal in eye coordinates\r\n                v_color = color;\r\n                gl_Position = czm_modelViewProjectionRelativeToEye * p;\r\n            }`\r\n          }\r\n\r\n          function f_shader() {\r\n            return `\r\n            in vec4 v_color;\r\n            czm_material czm_getMaterial(czm_materialInput materialInput)\r\n            {\r\n                czm_material material = czm_getDefaultMaterial(materialInput);\r\n                material.diffuse = czm_gammaCorrect(1. - v_color.rgb/255.); \r\n                return material;\r\n            }`\r\n          }\r\n\r\n          let appearance = new Cesium.MaterialAppearance({\r\n            translucent: true,\r\n            vertexShaderSource: v_shader(),\r\n            material: new Cesium.Material({\r\n              translucent: false,\r\n              fabric: {\r\n                type: 'MyColor',\r\n                source: f_shader(),\r\n              }\r\n            }),\r\n            materialSupport: Cesium.MaterialAppearance.MaterialSupport.BASIC,\r\n            renderState: {\r\n              blending: Cesium.BlendingState.ALPHA_BLEND, //使用Alpha混合功能启用混合\r\n              depthTest: { enabled: true }, //深度检测\r\n              depthMask: true, //将深度值写入深度缓冲区\r\n            },\r\n          })\r\n\r\n          const primitive = new Cesium.Primitive({\r\n            geometryInstances: instance,\r\n            appearance: appearance,\r\n            asynchronous: false,\r\n          })\r\n\r\n          viewer.scene.primitives.add(primitive)\r\n          let center = Cesium.Cartesian3.fromDegrees(data.centroid.x, data.centroid.y)\r\n          let radius = 5000\r\n          viewer.camera.flyToBoundingSphere(new Cesium.BoundingSphere(center, radius), { duration: 0 })\r\n        });\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./custom_geometry_1.vue?vue&type=template&id=60980ce3&scoped=true\"\nimport script from \"./custom_geometry_1.vue?vue&type=script&lang=js\"\nexport * from \"./custom_geometry_1.vue?vue&type=script&lang=js\"\n\nimport \"./custom_geometry_1.vue?vue&type=style&index=0&id=60980ce3&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-60980ce3\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","fetchJSON","url","fetch","then","response","ok","Error","status","json","catch","error","console","mounted","this","init","methods","viewer","Cesium","imageryProvider","subdomains","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","process","data","positions","Float32Array","colors","Uint8Array","attributes","position","componentDatatype","componentsPerAttribute","values","color","indices","Uint32Array","geometry","primitiveType","boundingSphere","modelMatrix","centroid","x","y","instance","v_shader","f_shader","appearance","translucent","vertexShaderSource","material","fabric","type","source","materialSupport","renderState","blending","depthTest","depthMask","primitive","geometryInstances","asynchronous","primitives","add","center","radius","camera","flyToBoundingSphere","duration","__exports__","render"],"sourceRoot":""}