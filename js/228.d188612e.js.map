{"version":3,"file":"js/228.d188612e.js","mappings":"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","sources":["webpack://webgis/./node_modules/cesium/Source/Core/getFilenameFromUri.js","webpack://webgis/./node_modules/cesium/Source/Core/PinBuilder.js","webpack://webgis/./node_modules/topojson-client/src/reverse.js","webpack://webgis/./node_modules/topojson-client/src/identity.js","webpack://webgis/./node_modules/topojson-client/src/transform.js","webpack://webgis/./node_modules/topojson-client/src/feature.js","webpack://webgis/./node_modules/cesium/Source/DataSources/GeoJsonDataSource.js"],"sourcesContent":["import Uri from \"urijs\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Given a URI, returns the last segment of the URI, removing any path or query information.\n * @function getFilenameFromUri\n *\n * @param {String} uri The Uri.\n * @returns {String} The last segment of the Uri.\n *\n * @example\n * //fileName will be\"simple.czml\";\n * const fileName = Cesium.getFilenameFromUri('/Gallery/simple.czml?value=true&example=false');\n */\nfunction getFilenameFromUri(uri) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(uri)) {\n    throw new DeveloperError(\"uri is required.\");\n  }\n  //>>includeEnd('debug');\n\n  const uriObject = new Uri(uri);\n  uriObject.normalize();\n  let path = uriObject.path();\n  const index = path.lastIndexOf(\"/\");\n  if (index !== -1) {\n    path = path.substr(index + 1);\n  }\n  return path;\n}\nexport default getFilenameFromUri;\n","import buildModuleUrl from \"./buildModuleUrl.js\";\nimport Color from \"./Color.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Resource from \"./Resource.js\";\nimport writeTextToCanvas from \"./writeTextToCanvas.js\";\n\n/**\n * A utility class for generating custom map pins as canvas elements.\n * <br /><br />\n * <div align='center'>\n * <img src='Images/PinBuilder.png' width='500'/><br />\n * Example pins generated using both the maki icon set, which ships with Cesium, and single character text.\n * </div>\n *\n * @alias PinBuilder\n * @constructor\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Map%20Pins.html|Cesium Sandcastle PinBuilder Demo}\n */\nfunction PinBuilder() {\n  this._cache = {};\n}\n\n/**\n * Creates an empty pin of the specified color and size.\n *\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromColor = function (color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(undefined, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified icon, color, and size.\n *\n * @param {Resource|String} url The url of the image to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise.<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromUrl = function (url, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(url, undefined, color, size, this._cache);\n};\n\n/**\n * Creates a pin with the specified {@link https://www.mapbox.com/maki/|maki} icon identifier, color, and size.\n *\n * @param {String} id The id of the maki icon to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement|Promise.<HTMLCanvasElement>} The canvas element or a Promise to the canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromMakiIconId = function (id, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(id)) {\n    throw new DeveloperError(\"id is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n  return createPin(\n    buildModuleUrl(`Assets/Textures/maki/${encodeURIComponent(id)}.png`),\n    undefined,\n    color,\n    size,\n    this._cache\n  );\n};\n\n/**\n * Creates a pin with the specified text, color, and size.  The text will be sized to be as large as possible\n * while still being contained completely within the pin.\n *\n * @param {String} text The text to be stamped onto the pin.\n * @param {Color} color The color of the pin.\n * @param {Number} size The size of the pin, in pixels.\n * @returns {HTMLCanvasElement} The canvas element that represents the generated pin.\n */\nPinBuilder.prototype.fromText = function (text, color, size) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(text)) {\n    throw new DeveloperError(\"text is required\");\n  }\n  if (!defined(color)) {\n    throw new DeveloperError(\"color is required\");\n  }\n  if (!defined(size)) {\n    throw new DeveloperError(\"size is required\");\n  }\n  //>>includeEnd('debug');\n\n  return createPin(undefined, text, color, size, this._cache);\n};\n\nconst colorScratch = new Color();\n\n//This function (except for the 3 commented lines) was auto-generated from an online tool,\n//http://www.professorcloud.com/svg-to-canvas/, using Assets/Textures/pin.svg as input.\n//The reason we simply can't load and draw the SVG directly to the canvas is because\n//it taints the canvas in Internet Explorer (and possibly some other browsers); making\n//it impossible to create a WebGL texture from the result.\nfunction drawPin(context2D, color, size) {\n  context2D.save();\n  context2D.scale(size / 24, size / 24); //Added to auto-generated code to scale up to desired size.\n  context2D.fillStyle = color.toCssColorString(); //Modified from auto-generated code.\n  context2D.strokeStyle = color.brighten(0.6, colorScratch).toCssColorString(); //Modified from auto-generated code.\n  context2D.lineWidth = 0.846;\n  context2D.beginPath();\n  context2D.moveTo(6.72, 0.422);\n  context2D.lineTo(17.28, 0.422);\n  context2D.bezierCurveTo(18.553, 0.422, 19.577, 1.758, 19.577, 3.415);\n  context2D.lineTo(19.577, 10.973);\n  context2D.bezierCurveTo(19.577, 12.63, 18.553, 13.966, 17.282, 13.966);\n  context2D.lineTo(14.386, 14.008);\n  context2D.lineTo(11.826, 23.578);\n  context2D.lineTo(9.614, 14.008);\n  context2D.lineTo(6.719, 13.965);\n  context2D.bezierCurveTo(5.446, 13.983, 4.422, 12.629, 4.422, 10.972);\n  context2D.lineTo(4.422, 3.416);\n  context2D.bezierCurveTo(4.423, 1.76, 5.447, 0.423, 6.718, 0.423);\n  context2D.closePath();\n  context2D.fill();\n  context2D.stroke();\n  context2D.restore();\n}\n\n//This function takes an image or canvas and uses it as a template\n//to \"stamp\" the pin with a white image outlined in black.  The color\n//values of the input image are ignored completely and only the alpha\n//values are used.\nfunction drawIcon(context2D, image, size) {\n  //Size is the largest image that looks good inside of pin box.\n  const imageSize = size / 2.5;\n  let sizeX = imageSize;\n  let sizeY = imageSize;\n\n  if (image.width > image.height) {\n    sizeY = imageSize * (image.height / image.width);\n  } else if (image.width < image.height) {\n    sizeX = imageSize * (image.width / image.height);\n  }\n\n  //x and y are the center of the pin box\n  const x = Math.round((size - sizeX) / 2);\n  const y = Math.round((7 / 24) * size - sizeY / 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x - 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y - 1, sizeX, sizeY);\n  context2D.drawImage(image, x + 1, y, sizeX, sizeY);\n  context2D.drawImage(image, x, y + 1, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.BLACK.toCssColorString();\n  context2D.fillRect(x - 1, y - 1, sizeX + 2, sizeY + 2);\n\n  context2D.globalCompositeOperation = \"destination-out\";\n  context2D.drawImage(image, x, y, sizeX, sizeY);\n\n  context2D.globalCompositeOperation = \"destination-over\";\n  context2D.fillStyle = Color.WHITE.toCssColorString();\n  context2D.fillRect(x - 1, y - 2, sizeX + 2, sizeY + 2);\n}\n\nconst stringifyScratch = new Array(4);\nfunction createPin(url, label, color, size, cache) {\n  //Use the parameters as a unique ID for caching.\n  stringifyScratch[0] = url;\n  stringifyScratch[1] = label;\n  stringifyScratch[2] = color;\n  stringifyScratch[3] = size;\n  const id = JSON.stringify(stringifyScratch);\n\n  const item = cache[id];\n  if (defined(item)) {\n    return item;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = size;\n  canvas.height = size;\n\n  const context2D = canvas.getContext(\"2d\");\n  drawPin(context2D, color, size);\n\n  if (defined(url)) {\n    const resource = Resource.createIfNeeded(url);\n\n    //If we have an image url, load it and then stamp the pin.\n    const promise = resource.fetchImage().then(function (image) {\n      drawIcon(context2D, image, size);\n      cache[id] = canvas;\n      return canvas;\n    });\n    cache[id] = promise;\n    return promise;\n  } else if (defined(label)) {\n    //If we have a label, write it to a canvas and then stamp the pin.\n    const image = writeTextToCanvas(label, {\n      font: `bold ${size}px sans-serif`,\n    });\n    drawIcon(context2D, image, size);\n  }\n\n  cache[id] = canvas;\n  return canvas;\n}\nexport default PinBuilder;\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","import ArcType from \"../Core/ArcType.js\";\nimport Cartesian3 from \"../Core/Cartesian3.js\";\nimport Color from \"../Core/Color.js\";\nimport createGuid from \"../Core/createGuid.js\";\nimport Credit from \"../Core/Credit.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Event from \"../Core/Event.js\";\nimport getFilenameFromUri from \"../Core/getFilenameFromUri.js\";\nimport PinBuilder from \"../Core/PinBuilder.js\";\nimport PolygonHierarchy from \"../Core/PolygonHierarchy.js\";\nimport Resource from \"../Core/Resource.js\";\nimport RuntimeError from \"../Core/RuntimeError.js\";\nimport HeightReference from \"../Scene/HeightReference.js\";\nimport VerticalOrigin from \"../Scene/VerticalOrigin.js\";\nimport * as topojson from \"topojson-client\";\nimport BillboardGraphics from \"./BillboardGraphics.js\";\nimport CallbackProperty from \"./CallbackProperty.js\";\nimport ColorMaterialProperty from \"./ColorMaterialProperty.js\";\nimport ConstantPositionProperty from \"./ConstantPositionProperty.js\";\nimport ConstantProperty from \"./ConstantProperty.js\";\nimport DataSource from \"./DataSource.js\";\nimport EntityCluster from \"./EntityCluster.js\";\nimport EntityCollection from \"./EntityCollection.js\";\nimport PolygonGraphics from \"./PolygonGraphics.js\";\nimport PolylineGraphics from \"./PolylineGraphics.js\";\n\nfunction defaultCrsFunction(coordinates) {\n  return Cartesian3.fromDegrees(coordinates[0], coordinates[1], coordinates[2]);\n}\n\nconst crsNames = {\n  \"urn:ogc:def:crs:OGC:1.3:CRS84\": defaultCrsFunction,\n  \"EPSG:4326\": defaultCrsFunction,\n  \"urn:ogc:def:crs:EPSG::4326\": defaultCrsFunction,\n};\n\nconst crsLinkHrefs = {};\nconst crsLinkTypes = {};\nlet defaultMarkerSize = 48;\nlet defaultMarkerSymbol;\nlet defaultMarkerColor = Color.ROYALBLUE;\nlet defaultStroke = Color.YELLOW;\nlet defaultStrokeWidth = 2;\nlet defaultFill = Color.fromBytes(255, 255, 0, 100);\nlet defaultClampToGround = false;\n\nconst sizes = {\n  small: 24,\n  medium: 48,\n  large: 64,\n};\n\nconst simpleStyleIdentifiers = [\n  \"title\",\n  \"description\", //\n  \"marker-size\",\n  \"marker-symbol\",\n  \"marker-color\",\n  \"stroke\", //\n  \"stroke-opacity\",\n  \"stroke-width\",\n  \"fill\",\n  \"fill-opacity\",\n];\n\nfunction defaultDescribe(properties, nameProperty) {\n  let html = \"\";\n  for (const key in properties) {\n    if (properties.hasOwnProperty(key)) {\n      if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = properties[key];\n      if (defined(value)) {\n        if (typeof value === \"object\") {\n          html += `<tr><th>${key}</th><td>${defaultDescribe(value)}</td></tr>`;\n        } else {\n          html += `<tr><th>${key}</th><td>${value}</td></tr>`;\n        }\n      }\n    }\n  }\n\n  if (html.length > 0) {\n    html = `<table class=\"cesium-infoBox-defaultTable\"><tbody>${html}</tbody></table>`;\n  }\n\n  return html;\n}\n\nfunction createDescriptionCallback(describe, properties, nameProperty) {\n  let description;\n  return function (time, result) {\n    if (!defined(description)) {\n      description = describe(properties, nameProperty);\n    }\n    return description;\n  };\n}\n\nfunction defaultDescribeProperty(properties, nameProperty) {\n  return new CallbackProperty(\n    createDescriptionCallback(defaultDescribe, properties, nameProperty),\n    true\n  );\n}\n\n//GeoJSON specifies only the Feature object has a usable id property\n//But since \"multi\" geometries create multiple entity,\n//we can't use it for them either.\nfunction createObject(geoJson, entityCollection, describe) {\n  let id = geoJson.id;\n  if (!defined(id) || geoJson.type !== \"Feature\") {\n    id = createGuid();\n  } else {\n    let i = 2;\n    let finalId = id;\n    while (defined(entityCollection.getById(finalId))) {\n      finalId = `${id}_${i}`;\n      i++;\n    }\n    id = finalId;\n  }\n\n  const entity = entityCollection.getOrCreateEntity(id);\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    entity.properties = properties;\n\n    let nameProperty;\n\n    //Check for the simplestyle specified name first.\n    const name = properties.title;\n    if (defined(name)) {\n      entity.name = name;\n      nameProperty = \"title\";\n    } else {\n      //Else, find the name by selecting an appropriate property.\n      //The name will be obtained based on this order:\n      //1) The first case-insensitive property with the name 'title',\n      //2) The first case-insensitive property with the name 'name',\n      //3) The first property containing the word 'title'.\n      //4) The first property containing the word 'name',\n      let namePropertyPrecedence = Number.MAX_VALUE;\n      for (const key in properties) {\n        if (properties.hasOwnProperty(key) && properties[key]) {\n          const lowerKey = key.toLowerCase();\n\n          if (namePropertyPrecedence > 1 && lowerKey === \"title\") {\n            namePropertyPrecedence = 1;\n            nameProperty = key;\n            break;\n          } else if (namePropertyPrecedence > 2 && lowerKey === \"name\") {\n            namePropertyPrecedence = 2;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 3 && /title/i.test(key)) {\n            namePropertyPrecedence = 3;\n            nameProperty = key;\n          } else if (namePropertyPrecedence > 4 && /name/i.test(key)) {\n            namePropertyPrecedence = 4;\n            nameProperty = key;\n          }\n        }\n      }\n      if (defined(nameProperty)) {\n        entity.name = properties[nameProperty];\n      }\n    }\n\n    const description = properties.description;\n    if (description !== null) {\n      entity.description = !defined(description)\n        ? describe(properties, nameProperty)\n        : new ConstantProperty(description);\n    }\n  }\n  return entity;\n}\n\nfunction coordinatesArrayToCartesianArray(coordinates, crsFunction) {\n  const positions = new Array(coordinates.length);\n  for (let i = 0; i < coordinates.length; i++) {\n    positions[i] = crsFunction(coordinates[i]);\n  }\n  return positions;\n}\n\nconst geoJsonObjectTypes = {\n  Feature: processFeature,\n  FeatureCollection: processFeatureCollection,\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\nconst geometryTypes = {\n  GeometryCollection: processGeometryCollection,\n  LineString: processLineString,\n  MultiLineString: processMultiLineString,\n  MultiPoint: processMultiPoint,\n  MultiPolygon: processMultiPolygon,\n  Point: processPoint,\n  Polygon: processPolygon,\n  Topology: processTopology,\n};\n\n// GeoJSON processing functions\nfunction processFeature(dataSource, feature, notUsed, crsFunction, options) {\n  if (feature.geometry === null) {\n    //Null geometry is allowed, so just create an empty entity instance for it.\n    createObject(feature, dataSource._entityCollection, options.describe);\n    return;\n  }\n\n  if (!defined(feature.geometry)) {\n    throw new RuntimeError(\"feature.geometry is required.\");\n  }\n\n  const geometryType = feature.geometry.type;\n  const geometryHandler = geometryTypes[geometryType];\n  if (!defined(geometryHandler)) {\n    throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n  }\n  geometryHandler(dataSource, feature, feature.geometry, crsFunction, options);\n}\n\nfunction processFeatureCollection(\n  dataSource,\n  featureCollection,\n  notUsed,\n  crsFunction,\n  options\n) {\n  const features = featureCollection.features;\n  for (let i = 0, len = features.length; i < len; i++) {\n    processFeature(dataSource, features[i], undefined, crsFunction, options);\n  }\n}\n\nfunction processGeometryCollection(\n  dataSource,\n  geoJson,\n  geometryCollection,\n  crsFunction,\n  options\n) {\n  const geometries = geometryCollection.geometries;\n  for (let i = 0, len = geometries.length; i < len; i++) {\n    const geometry = geometries[i];\n    const geometryType = geometry.type;\n    const geometryHandler = geometryTypes[geometryType];\n    if (!defined(geometryHandler)) {\n      throw new RuntimeError(`Unknown geometry type: ${geometryType}`);\n    }\n    geometryHandler(dataSource, geoJson, geometry, crsFunction, options);\n  }\n}\n\nfunction createPoint(dataSource, geoJson, crsFunction, coordinates, options) {\n  let symbol = options.markerSymbol;\n  let color = options.markerColor;\n  let size = options.markerSize;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const cssColor = properties[\"marker-color\"];\n    if (defined(cssColor)) {\n      color = Color.fromCssColorString(cssColor);\n    }\n\n    size = defaultValue(sizes[properties[\"marker-size\"]], size);\n    const markerSymbol = properties[\"marker-symbol\"];\n    if (defined(markerSymbol)) {\n      symbol = markerSymbol;\n    }\n  }\n\n  let canvasOrPromise;\n  if (defined(symbol)) {\n    if (symbol.length === 1) {\n      canvasOrPromise = dataSource._pinBuilder.fromText(\n        symbol.toUpperCase(),\n        color,\n        size\n      );\n    } else {\n      canvasOrPromise = dataSource._pinBuilder.fromMakiIconId(\n        symbol,\n        color,\n        size\n      );\n    }\n  } else {\n    canvasOrPromise = dataSource._pinBuilder.fromColor(color, size);\n  }\n\n  const billboard = new BillboardGraphics();\n  billboard.verticalOrigin = new ConstantProperty(VerticalOrigin.BOTTOM);\n\n  // Clamp to ground if there isn't a height specified\n  if (coordinates.length === 2 && options.clampToGround) {\n    billboard.heightReference = HeightReference.CLAMP_TO_GROUND;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.billboard = billboard;\n  entity.position = new ConstantPositionProperty(crsFunction(coordinates));\n\n  const promise = Promise.resolve(canvasOrPromise)\n    .then(function (image) {\n      billboard.image = new ConstantProperty(image);\n    })\n    .catch(function () {\n      billboard.image = new ConstantProperty(\n        dataSource._pinBuilder.fromColor(color, size)\n      );\n    });\n\n  dataSource._promises.push(promise);\n}\n\nfunction processPoint(dataSource, geoJson, geometry, crsFunction, options) {\n  createPoint(dataSource, geoJson, crsFunction, geometry.coordinates, options);\n}\n\nfunction processMultiPoint(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const coordinates = geometry.coordinates;\n  for (let i = 0; i < coordinates.length; i++) {\n    createPoint(dataSource, geoJson, crsFunction, coordinates[i], options);\n  }\n}\n\nfunction createLineString(\n  dataSource,\n  geoJson,\n  crsFunction,\n  coordinates,\n  options\n) {\n  let material = options.strokeMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    const opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = material.color.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n    if (defined(color)) {\n      material = new ColorMaterialProperty(color);\n    }\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  const polylineGraphics = new PolylineGraphics();\n  entity.polyline = polylineGraphics;\n\n  polylineGraphics.clampToGround = options.clampToGround;\n  polylineGraphics.material = material;\n  polylineGraphics.width = widthProperty;\n  polylineGraphics.positions = new ConstantProperty(\n    coordinatesArrayToCartesianArray(coordinates, crsFunction)\n  );\n  polylineGraphics.arcType = ArcType.RHUMB;\n}\n\nfunction processLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  createLineString(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiLineString(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const lineStrings = geometry.coordinates;\n  for (let i = 0; i < lineStrings.length; i++) {\n    createLineString(dataSource, geoJson, crsFunction, lineStrings[i], options);\n  }\n}\n\nfunction createPolygon(dataSource, geoJson, crsFunction, coordinates, options) {\n  if (coordinates.length === 0 || coordinates[0].length === 0) {\n    return;\n  }\n\n  let outlineColorProperty = options.strokeMaterialProperty.color;\n  let material = options.fillMaterialProperty;\n  let widthProperty = options.strokeWidthProperty;\n\n  const properties = geoJson.properties;\n  if (defined(properties)) {\n    const width = properties[\"stroke-width\"];\n    if (defined(width)) {\n      widthProperty = new ConstantProperty(width);\n    }\n\n    let color;\n    const stroke = properties.stroke;\n    if (defined(stroke)) {\n      color = Color.fromCssColorString(stroke);\n    }\n    let opacity = properties[\"stroke-opacity\"];\n    if (defined(opacity) && opacity !== 1.0) {\n      if (!defined(color)) {\n        color = outlineColorProperty.getValue().clone();\n      }\n      color.alpha = opacity;\n    }\n\n    if (defined(color)) {\n      outlineColorProperty = new ConstantProperty(color);\n    }\n\n    let fillColor;\n    const fill = properties.fill;\n    const materialColor = material.color.getValue();\n    if (defined(fill)) {\n      fillColor = Color.fromCssColorString(fill);\n      fillColor.alpha = materialColor.alpha;\n    }\n    opacity = properties[\"fill-opacity\"];\n    if (defined(opacity) && opacity !== materialColor.alpha) {\n      if (!defined(fillColor)) {\n        fillColor = materialColor.clone();\n      }\n      fillColor.alpha = opacity;\n    }\n    if (defined(fillColor)) {\n      material = new ColorMaterialProperty(fillColor);\n    }\n  }\n\n  const polygon = new PolygonGraphics();\n  polygon.outline = new ConstantProperty(true);\n  polygon.outlineColor = outlineColorProperty;\n  polygon.outlineWidth = widthProperty;\n  polygon.material = material;\n  polygon.arcType = ArcType.RHUMB;\n\n  const holes = [];\n  for (let i = 1, len = coordinates.length; i < len; i++) {\n    holes.push(\n      new PolygonHierarchy(\n        coordinatesArrayToCartesianArray(coordinates[i], crsFunction)\n      )\n    );\n  }\n\n  const positions = coordinates[0];\n  polygon.hierarchy = new ConstantProperty(\n    new PolygonHierarchy(\n      coordinatesArrayToCartesianArray(positions, crsFunction),\n      holes\n    )\n  );\n  if (positions[0].length > 2) {\n    polygon.perPositionHeight = new ConstantProperty(true);\n  } else if (!options.clampToGround) {\n    polygon.height = 0;\n  }\n\n  const entity = createObject(\n    geoJson,\n    dataSource._entityCollection,\n    options.describe\n  );\n  entity.polygon = polygon;\n}\n\nfunction processPolygon(dataSource, geoJson, geometry, crsFunction, options) {\n  createPolygon(\n    dataSource,\n    geoJson,\n    crsFunction,\n    geometry.coordinates,\n    options\n  );\n}\n\nfunction processMultiPolygon(\n  dataSource,\n  geoJson,\n  geometry,\n  crsFunction,\n  options\n) {\n  const polygons = geometry.coordinates;\n  for (let i = 0; i < polygons.length; i++) {\n    createPolygon(dataSource, geoJson, crsFunction, polygons[i], options);\n  }\n}\n\nfunction processTopology(dataSource, geoJson, geometry, crsFunction, options) {\n  for (const property in geometry.objects) {\n    if (geometry.objects.hasOwnProperty(property)) {\n      const feature = topojson.feature(geometry, geometry.objects[property]);\n      const typeHandler = geoJsonObjectTypes[feature.type];\n      typeHandler(dataSource, feature, feature, crsFunction, options);\n    }\n  }\n}\n\n/**\n * @typedef {Object} GeoJsonDataSource.LoadOptions\n *\n * Initialization options for the <code>load</code> method.\n *\n * @property {String} [sourceUri] Overrides the url to use for resolving relative links.\n * @property {GeoJsonDataSource.describe} [describe=GeoJsonDataSource.defaultDescribeProperty] A function which returns a Property object (or just a string).\n * @property {Number} [markerSize=GeoJsonDataSource.markerSize] The default size of the map pin created for each point, in pixels.\n * @property {String} [markerSymbol=GeoJsonDataSource.markerSymbol] The default symbol of the map pin created for each point.\n * @property {Color} [markerColor=GeoJsonDataSource.markerColor] The default color of the map pin created for each point.\n * @property {Color} [stroke=GeoJsonDataSource.stroke] The default color of polylines and polygon outlines.\n * @property {Number} [strokeWidth=GeoJsonDataSource.strokeWidth] The default width of polylines and polygon outlines.\n * @property {Color} [fill=GeoJsonDataSource.fill] The default color for polygon interiors.\n * @property {Boolean} [clampToGround=GeoJsonDataSource.clampToGround] true if we want the geometry features (polygons or linestrings) clamped to the ground.\n * @property {Credit|String} [credit] A credit for the data source, which is displayed on the canvas.\n */\n\n/**\n * A {@link DataSource} which processes both\n * {@link http://www.geojson.org/|GeoJSON} and {@link https://github.com/mbostock/topojson|TopoJSON} data.\n * {@link https://github.com/mapbox/simplestyle-spec|simplestyle-spec} properties will also be used if they\n * are present.\n *\n * @alias GeoJsonDataSource\n * @constructor\n *\n * @param {String} [name] The name of this data source.  If undefined, a name will be taken from\n *                        the name of the GeoJSON file.\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20and%20TopoJSON.html|Cesium Sandcastle GeoJSON and TopoJSON Demo}\n * @demo {@link https://sandcastle.cesium.com/index.html?src=GeoJSON%20simplestyle.html|Cesium Sandcastle GeoJSON simplestyle Demo}\n *\n * @example\n * const viewer = new Cesium.Viewer('cesiumContainer');\n * viewer.dataSources.add(Cesium.GeoJsonDataSource.load('../../SampleData/ne_10m_us_states.topojson', {\n *   stroke: Cesium.Color.HOTPINK,\n *   fill: Cesium.Color.PINK,\n *   strokeWidth: 3,\n *   markerSymbol: '?'\n * }));\n */\nfunction GeoJsonDataSource(name) {\n  this._name = name;\n  this._changed = new Event();\n  this._error = new Event();\n  this._isLoading = false;\n  this._loading = new Event();\n  this._entityCollection = new EntityCollection(this);\n  this._promises = [];\n  this._pinBuilder = new PinBuilder();\n  this._entityCluster = new EntityCluster();\n  this._credit = undefined;\n  this._resourceCredits = [];\n}\n\n/**\n * Creates a Promise to a new instance loaded with the provided GeoJSON or TopoJSON data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} A promise that will resolve when the data is loaded.\n */\nGeoJsonDataSource.load = function (data, options) {\n  return new GeoJsonDataSource().load(data, options);\n};\n\nObject.defineProperties(GeoJsonDataSource, {\n  /**\n   * Gets or sets the default size of the map pin created for each point, in pixels.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 48\n   */\n  markerSize: {\n    get: function () {\n      return defaultMarkerSize;\n    },\n    set: function (value) {\n      defaultMarkerSize = value;\n    },\n  },\n  /**\n   * Gets or sets the default symbol of the map pin created for each point.\n   * This can be any valid {@link http://mapbox.com/maki/|Maki} identifier, any single character,\n   * or blank if no symbol is to be used.\n   * @memberof GeoJsonDataSource\n   * @type {String}\n   */\n  markerSymbol: {\n    get: function () {\n      return defaultMarkerSymbol;\n    },\n    set: function (value) {\n      defaultMarkerSymbol = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of the map pin created for each point.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.ROYALBLUE\n   */\n  markerColor: {\n    get: function () {\n      return defaultMarkerColor;\n    },\n    set: function (value) {\n      defaultMarkerColor = value;\n    },\n  },\n  /**\n   * Gets or sets the default color of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.BLACK\n   */\n  stroke: {\n    get: function () {\n      return defaultStroke;\n    },\n    set: function (value) {\n      defaultStroke = value;\n    },\n  },\n  /**\n   * Gets or sets the default width of polylines and polygon outlines.\n   * @memberof GeoJsonDataSource\n   * @type {Number}\n   * @default 2.0\n   */\n  strokeWidth: {\n    get: function () {\n      return defaultStrokeWidth;\n    },\n    set: function (value) {\n      defaultStrokeWidth = value;\n    },\n  },\n  /**\n   * Gets or sets default color for polygon interiors.\n   * @memberof GeoJsonDataSource\n   * @type {Color}\n   * @default Color.YELLOW\n   */\n  fill: {\n    get: function () {\n      return defaultFill;\n    },\n    set: function (value) {\n      defaultFill = value;\n    },\n  },\n  /**\n   * Gets or sets default of whether to clamp to the ground.\n   * @memberof GeoJsonDataSource\n   * @type {Boolean}\n   * @default false\n   */\n  clampToGround: {\n    get: function () {\n      return defaultClampToGround;\n    },\n    set: function (value) {\n      defaultClampToGround = value;\n    },\n  },\n\n  /**\n   * Gets an object that maps the name of a crs to a callback function which takes a GeoJSON coordinate\n   * and transforms it into a WGS84 Earth-fixed Cartesian.  Older versions of GeoJSON which\n   * supported the EPSG type can be added to this list as well, by specifying the complete EPSG name,\n   * for example 'EPSG:4326'.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsNames: {\n    get: function () {\n      return crsNames;\n    },\n  },\n\n  /**\n   * Gets an object that maps the href property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in this object take precedence over those defined in <code>crsLinkHrefs</code>, assuming\n   * the link has a type specified.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkHrefs: {\n    get: function () {\n      return crsLinkHrefs;\n    },\n  },\n\n  /**\n   * Gets an object that maps the type property of a crs link to a callback function\n   * which takes the crs properties object and returns a Promise that resolves\n   * to a function that takes a GeoJSON coordinate and transforms it into a WGS84 Earth-fixed Cartesian.\n   * Items in <code>crsLinkHrefs</code> take precedence over this object.\n   * @memberof GeoJsonDataSource\n   * @type {Object}\n   */\n  crsLinkTypes: {\n    get: function () {\n      return crsLinkTypes;\n    },\n  },\n});\n\nObject.defineProperties(GeoJsonDataSource.prototype, {\n  /**\n   * Gets or sets a human-readable name for this instance.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {String}\n   */\n  name: {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      if (this._name !== value) {\n        this._name = value;\n        this._changed.raiseEvent(this);\n      }\n    },\n  },\n  /**\n   * This DataSource only defines static data, therefore this property is always undefined.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {DataSourceClock}\n   */\n  clock: {\n    value: undefined,\n    writable: false,\n  },\n  /**\n   * Gets the collection of {@link Entity} instances.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCollection}\n   */\n  entities: {\n    get: function () {\n      return this._entityCollection;\n    },\n  },\n  /**\n   * Gets a value indicating if the data source is currently loading data.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  isLoading: {\n    get: function () {\n      return this._isLoading;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the underlying data changes.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  changedEvent: {\n    get: function () {\n      return this._changed;\n    },\n  },\n  /**\n   * Gets an event that will be raised if an error is encountered during processing.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  errorEvent: {\n    get: function () {\n      return this._error;\n    },\n  },\n  /**\n   * Gets an event that will be raised when the data source either starts or stops loading.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Event}\n   */\n  loadingEvent: {\n    get: function () {\n      return this._loading;\n    },\n  },\n  /**\n   * Gets whether or not this data source should be displayed.\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Boolean}\n   */\n  show: {\n    get: function () {\n      return this._entityCollection.show;\n    },\n    set: function (value) {\n      this._entityCollection.show = value;\n    },\n  },\n\n  /**\n   * Gets or sets the clustering options for this data source. This object can be shared between multiple data sources.\n   *\n   * @memberof GeoJsonDataSource.prototype\n   * @type {EntityCluster}\n   */\n  clustering: {\n    get: function () {\n      return this._entityCluster;\n    },\n    set: function (value) {\n      //>>includeStart('debug', pragmas.debug);\n      if (!defined(value)) {\n        throw new DeveloperError(\"value must be defined.\");\n      }\n      //>>includeEnd('debug');\n      this._entityCluster = value;\n    },\n  },\n  /**\n   * Gets the credit that will be displayed for the data source\n   * @memberof GeoJsonDataSource.prototype\n   * @type {Credit}\n   */\n  credit: {\n    get: function () {\n      return this._credit;\n    },\n  },\n});\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.load = function (data, options) {\n  return preload(this, data, options, true);\n};\n\n/**\n * Asynchronously loads the provided GeoJSON or TopoJSON data, without replacing any existing data.\n *\n * @param {Resource|String|Object} data A url, GeoJSON object, or TopoJSON object to be loaded.\n * @param {GeoJsonDataSource.LoadOptions} [options] An object specifying configuration options\n *\n * @returns {Promise.<GeoJsonDataSource>} a promise that will resolve when the GeoJSON is loaded.\n */\nGeoJsonDataSource.prototype.process = function (data, options) {\n  return preload(this, data, options, false);\n};\n\nfunction preload(that, data, options, clear) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(data)) {\n    throw new DeveloperError(\"data is required.\");\n  }\n  //>>includeEnd('debug');\n\n  DataSource.setLoading(that, true);\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  // User specified credit\n  let credit = options.credit;\n  if (typeof credit === \"string\") {\n    credit = new Credit(credit);\n  }\n  that._credit = credit;\n\n  let promise = data;\n  let sourceUri = options.sourceUri;\n  if (typeof data === \"string\" || data instanceof Resource) {\n    data = Resource.createIfNeeded(data);\n    promise = data.fetchJson();\n    sourceUri = defaultValue(sourceUri, data.getUrlComponent());\n\n    // Add resource credits to our list of credits to display\n    const resourceCredits = that._resourceCredits;\n    const credits = data.credits;\n    if (defined(credits)) {\n      const length = credits.length;\n      for (let i = 0; i < length; i++) {\n        resourceCredits.push(credits[i]);\n      }\n    }\n  }\n\n  options = {\n    describe: defaultValue(options.describe, defaultDescribeProperty),\n    markerSize: defaultValue(options.markerSize, defaultMarkerSize),\n    markerSymbol: defaultValue(options.markerSymbol, defaultMarkerSymbol),\n    markerColor: defaultValue(options.markerColor, defaultMarkerColor),\n    strokeWidthProperty: new ConstantProperty(\n      defaultValue(options.strokeWidth, defaultStrokeWidth)\n    ),\n    strokeMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.stroke, defaultStroke)\n    ),\n    fillMaterialProperty: new ColorMaterialProperty(\n      defaultValue(options.fill, defaultFill)\n    ),\n    clampToGround: defaultValue(options.clampToGround, defaultClampToGround),\n  };\n\n  return Promise.resolve(promise)\n    .then(function (geoJson) {\n      return load(that, geoJson, options, sourceUri, clear);\n    })\n    .catch(function (error) {\n      DataSource.setLoading(that, false);\n      that._error.raiseEvent(that, error);\n      throw error;\n    });\n}\n\n/**\n * Updates the data source to the provided time.  This function is optional and\n * is not required to be implemented.  It is provided for data sources which\n * retrieve data based on the current animation time or scene state.\n * If implemented, update will be called by {@link DataSourceDisplay} once a frame.\n *\n * @param {JulianDate} time The simulation time.\n * @returns {Boolean} True if this data source is ready to be displayed at the provided time, false otherwise.\n */\nGeoJsonDataSource.prototype.update = function (time) {\n  return true;\n};\n\nfunction load(that, geoJson, options, sourceUri, clear) {\n  let name;\n  if (defined(sourceUri)) {\n    name = getFilenameFromUri(sourceUri);\n  }\n\n  if (defined(name) && that._name !== name) {\n    that._name = name;\n    that._changed.raiseEvent(that);\n  }\n\n  const typeHandler = geoJsonObjectTypes[geoJson.type];\n  if (!defined(typeHandler)) {\n    throw new RuntimeError(`Unsupported GeoJSON object type: ${geoJson.type}`);\n  }\n\n  //Check for a Coordinate Reference System.\n  const crs = geoJson.crs;\n  let crsFunction = crs !== null ? defaultCrsFunction : null;\n\n  if (defined(crs)) {\n    if (!defined(crs.properties)) {\n      throw new RuntimeError(\"crs.properties is undefined.\");\n    }\n\n    const properties = crs.properties;\n    if (crs.type === \"name\") {\n      crsFunction = crsNames[properties.name];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs name: ${properties.name}`);\n      }\n    } else if (crs.type === \"link\") {\n      let handler = crsLinkHrefs[properties.href];\n      if (!defined(handler)) {\n        handler = crsLinkTypes[properties.type];\n      }\n\n      if (!defined(handler)) {\n        throw new RuntimeError(\n          `Unable to resolve crs link: ${JSON.stringify(properties)}`\n        );\n      }\n\n      crsFunction = handler(properties);\n    } else if (crs.type === \"EPSG\") {\n      crsFunction = crsNames[`EPSG:${properties.code}`];\n      if (!defined(crsFunction)) {\n        throw new RuntimeError(`Unknown crs EPSG code: ${properties.code}`);\n      }\n    } else {\n      throw new RuntimeError(`Unknown crs type: ${crs.type}`);\n    }\n  }\n\n  return Promise.resolve(crsFunction).then(function (crsFunction) {\n    if (clear) {\n      that._entityCollection.removeAll();\n    }\n\n    // null is a valid value for the crs, but means the entire load process becomes a no-op\n    // because we can't assume anything about the coordinates.\n    if (crsFunction !== null) {\n      typeHandler(that, geoJson, geoJson, crsFunction, options);\n    }\n\n    return Promise.all(that._promises).then(function () {\n      that._promises.length = 0;\n      DataSource.setLoading(that, false);\n      return that;\n    });\n  });\n}\n\n/**\n * This callback is displayed as part of the GeoJsonDataSource class.\n * @callback GeoJsonDataSource.describe\n * @param {Object} properties The properties of the feature.\n * @param {String} nameProperty The property key that Cesium estimates to have the name of the feature.\n */\nexport default GeoJsonDataSource;\n"],"names":["getFilenameFromUri","uri","defined","DeveloperError","uriObject","Uri","normalize","path","index","lastIndexOf","substr","PinBuilder","this","_cache","prototype","fromColor","color","size","createPin","undefined","fromUrl","url","fromMakiIconId","id","buildModuleUrl","encodeURIComponent","fromText","text","colorScratch","Color","drawPin","context2D","save","scale","fillStyle","toCssColorString","strokeStyle","brighten","lineWidth","beginPath","moveTo","lineTo","bezierCurveTo","closePath","fill","stroke","restore","drawIcon","image","imageSize","sizeX","sizeY","width","height","x","Math","round","y","globalCompositeOperation","drawImage","fillRect","stringifyScratch","Array","label","cache","JSON","stringify","item","canvas","document","createElement","getContext","resource","Resource","promise","fetchImage","then","writeTextToCanvas","font","array","n","t","j","length","i","transform","identity","x0","y0","kx","ky","dx","translate","dy","input","output","topology","o","objects","type","features","geometries","map","feature","bbox","properties","geometry","object","transformPoint","arcs","arc","points","pop","a","k","push","reverse","point","p","line","ring","polygon","coordinates","defaultCrsFunction","Cartesian3","crsNames","crsLinkHrefs","crsLinkTypes","defaultMarkerSymbol","defaultMarkerSize","defaultMarkerColor","defaultStroke","defaultStrokeWidth","defaultFill","defaultClampToGround","sizes","small","medium","large","simpleStyleIdentifiers","defaultDescribe","nameProperty","html","key","hasOwnProperty","indexOf","value","createDescriptionCallback","describe","description","time","result","defaultDescribeProperty","CallbackProperty","createObject","geoJson","entityCollection","finalId","getById","createGuid","entity","getOrCreateEntity","name","title","namePropertyPrecedence","Number","MAX_VALUE","lowerKey","toLowerCase","test","ConstantProperty","coordinatesArrayToCartesianArray","crsFunction","positions","geoJsonObjectTypes","Feature","processFeature","FeatureCollection","processFeatureCollection","GeometryCollection","processGeometryCollection","LineString","processLineString","MultiLineString","processMultiLineString","MultiPoint","processMultiPoint","MultiPolygon","processMultiPolygon","Point","processPoint","Polygon","processPolygon","Topology","processTopology","geometryTypes","dataSource","notUsed","options","_entityCollection","RuntimeError","geometryType","geometryHandler","featureCollection","len","geometryCollection","createPoint","symbol","markerSymbol","markerColor","markerSize","cssColor","defaultValue","canvasOrPromise","_pinBuilder","toUpperCase","billboard","BillboardGraphics","verticalOrigin","VerticalOrigin","clampToGround","heightReference","HeightReference","position","ConstantPositionProperty","Promise","resolve","catch","_promises","createLineString","material","strokeMaterialProperty","widthProperty","strokeWidthProperty","opacity","getValue","clone","alpha","ColorMaterialProperty","polylineGraphics","PolylineGraphics","polyline","arcType","ArcType","lineStrings","createPolygon","outlineColorProperty","fillMaterialProperty","fillColor","materialColor","PolygonGraphics","outline","outlineColor","outlineWidth","holes","PolygonHierarchy","hierarchy","perPositionHeight","polygons","property","topojson","typeHandler","GeoJsonDataSource","_name","_changed","Event","_error","_isLoading","_loading","EntityCollection","_entityCluster","EntityCluster","_credit","_resourceCredits","preload","that","data","clear","DataSource","credit","Credit","sourceUri","fetchJson","getUrlComponent","resourceCredits","credits","strokeWidth","load","error","raiseEvent","crs","handler","href","code","removeAll","all","Object","defineProperties","get","set","clock","writable","entities","isLoading","changedEvent","errorEvent","loadingEvent","show","clustering","process","update"],"sourceRoot":""}