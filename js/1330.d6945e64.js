"use strict";(self["webpackChunkwebgis"]=self["webpackChunkwebgis"]||[]).push([[1330],{31330:function(e,n,o){o.r(n),o.d(n,{default:function(){return m}});var t=o(73396);const i={id:"cesiumContainer"};function r(e,n,o,r,a,s){return(0,t.wg)(),(0,t.iD)("div",i)}var a=o(67474),s=o(48545),c=o(40985),u=o(40617),l=o(98482),v={mounted(){this.init()},methods:{async init(){var e=new a.Z("cesiumContainer",{terrainProvider:await s.Z()});c.Z.supportsImageRenderingPixelated()&&(e.resolutionScale=window.devicePixelRatio),e.scene.postProcessStages.fxaa.enabled=!0;const n=e.entities.add({position:u.Z.fromDegrees(108.4175,30.655,1e3),point:{}});e.zoomTo(n);const o="\n        in vec2 v_textureCoordinates;\n        uniform sampler2D colorTexture;\n        uniform float tiltAngle;\n        uniform float rainSize;\n        uniform float rainSpeed;\n        out vec4 fragColor;\n        float hash(float x) {\n            return fract(sin(x * 133.3) * 13.13);\n        }\n        void main(void) {\n            float time = czm_frameNumber / rainSpeed;\n            vec2 resolution = czm_viewport.zw;\n            vec2 uv = (gl_FragCoord.xy * 2. - resolution.xy) / min(resolution.x, resolution.y);\n            vec3 c = vec3(.6, .7, .8);\n            float a = tiltAngle;\n            float si = sin(a), co = cos(a);\n            uv *= mat2(co, -si, si, co);\n            uv *= length(uv + vec2(0, 4.9)) * rainSize + 1.;\n            float v = 1. - sin(hash(floor(uv.x * 100.)) * 2.);\n            float b = clamp(abs(sin(20. * time * v + uv.y * (5. / (2. + v)))) - .95, 0., 1.) * 20.;\n            c *= v * b;\n            fragColor = mix(texture(colorTexture, v_textureCoordinates), vec4(c, 1), .5);\n        }\n        ";e.scene.postProcessStages.add(new l.Z({fragmentShader:o,uniforms:{tiltAngle:-.3,rainSize:.5,rainSpeed:120}}))}}},f=o(40089);const d=(0,f.Z)(v,[["render",r],["__scopeId","data-v-24b8f4ee"]]);var m=d}}]);
//# sourceMappingURL=1330.d6945e64.js.map