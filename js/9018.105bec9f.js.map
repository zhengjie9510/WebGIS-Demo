{"version":3,"file":"js/9018.105bec9f.js","mappings":"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","sources":["webpack://webgis/./src/components/cesium/corrugated_circle.vue","webpack://webgis/./src/components/cesium/corrugated_circle.vue?4b03","webpack://webgis/./node_modules/@cesium/engine/Source/Core/CircleGeometry.js"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport * as Cesium from 'cesium'\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      var viewer = new Cesium.Viewer('cesiumContainer', { terrainProvider: Cesium.createWorldTerrain() })\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n      viewer.scene.primitives.add(Cesium.createOsmBuildings());\n\n      const fragmentShaderSource = `\n        uniform vec4 color;\n        uniform float percent;\n        uniform float offset;\n        czm_material czm_getMaterial(czm_materialInput materialInput)\n        {\n          czm_material material = czm_getDefaultMaterial(materialInput);\n          material.diffuse = czm_gammaCorrect(color.rgb); \n          vec2 st = materialInput.st;\n          float s = distance(st,vec2(0.5,0.5));\n          float a = s-mod(offset,0.5);\n          float l = 0.5*percent;\n          if(a < l && a > 0.0){\n              material.alpha = a/l;\n          }\n          else{\n              material.alpha = 0.0;\n          }\n          material.emission=vec3(0.5);\n          return material;\n        } \n      `\n\n      // Create the circle geometry.\n      var circleGeometry = new Cesium.CircleGeometry({\n        center: Cesium.Cartesian3.fromDegrees(-74.02, 40.69),\n        radius: 200.0,\n        vertexFormat: Cesium.VertexFormat.POSITION_AND_ST,\n      })\n      var instance = new Cesium.GeometryInstance({\n        geometry: circleGeometry,\n      })\n      const appearance = new Cesium.MaterialAppearance({\n        material: new Cesium.Material({\n          translucent: false,\n          fabric: {\n            uniforms: {\n              color: new Cesium.Color(0.0, 1.0, 0.0),\n              percent: 0.05,\n              offset: 0.0,\n            },\n            source: fragmentShaderSource\n          },\n        }),\n      })\n      var primitive = viewer.scene.primitives.add(\n        new Cesium.GroundPrimitive({\n          geometryInstances: instance,\n          appearance: appearance\n        })\n      )\n      viewer.scene.preUpdate.addEventListener(function () {\n        var offset = primitive.appearance.material.uniforms.offset\n        offset += 0.005\n        primitive.appearance.material.uniforms.offset = offset\n      })\n      viewer.camera.flyToBoundingSphere(\n        Cesium.CircleGeometry.createGeometry(circleGeometry).boundingSphere\n      )\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./corrugated_circle.vue?vue&type=template&id=07518f7d&scoped=true\"\nimport script from \"./corrugated_circle.vue?vue&type=script&lang=js\"\nexport * from \"./corrugated_circle.vue?vue&type=script&lang=js\"\n\nimport \"./corrugated_circle.vue?vue&type=style&index=0&id=07518f7d&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-07518f7d\"]])\n\nexport default __exports__","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {number[]} array The array to pack into.\n * @param {number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nconst scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {number[]} array The packed array.\n * @param {number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = circleGeometry._ellipseGeometry._granularity;\n  const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Cesium","terrainProvider","createWorldTerrain","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","primitives","add","createOsmBuildings","fragmentShaderSource","circleGeometry","center","radius","vertexFormat","instance","geometry","appearance","material","translucent","fabric","uniforms","color","percent","offset","source","primitive","geometryInstances","preUpdate","addEventListener","camera","flyToBoundingSphere","boundingSphere","__exports__","render","CircleGeometry","options","defaultValue","Check","ellipseGeometryOptions","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","stRotation","shadowVolume","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","VertexFormat","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints"],"sourceRoot":""}