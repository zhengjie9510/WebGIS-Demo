{"version":3,"file":"js/7137.84f8ba4f.js","mappings":"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","sources":["webpack://webgis/./src/components/public/migration_line.vue","webpack://webgis/./src/components/public/migration_line.vue?a6b3"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport {\n  Viewer,\n  FeatureDetection,\n  Cartesian3,\n  GeometryInstance,\n  Primitive,\n  PolylineMaterialAppearance,\n  PolylineGeometry,\n  Material,\n  Color,\n  OpenStreetMapImageryProvider\n} from 'cesium'\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    /**\n     * @desc 二阶贝塞尔\n     * @param {number} t 当前百分比\n     * @param {Array} p1 起点坐标\n     * @param {Array} p2 终点坐标\n     * @param {Array} cp 控制点\n     */\n    twoBezier(t, p1, cp, p2) {\n      const [x1, y1, z1] = p1\n      const [cx, cy, cz] = cp\n      const [x2, y2, z2] = p2\n      let x = (1 - t) * (1 - t) * x1 + 2 * t * (1 - t) * cx + t * t * x2\n      let y = (1 - t) * (1 - t) * y1 + 2 * t * (1 - t) * cy + t * t * y2\n      let z = (1 - t) * (1 - t) * z1 + 2 * t * (1 - t) * cz + t * t * z2\n      return [x, y, z]\n    },\n    /**\n     * @desc 贝塞尔曲线\n     * @param {Array} p1 起点坐标\n     * @param {Array} p2 终点坐标\n     */\n    ceratBezierLine(p1, p2) {\n      const maxHeight = 1000000\n      const [x1, y1] = p1\n      const [x2, y2] = p2\n      const cp = [(x1 + x2) / 2, (y1 + y2) / 2, maxHeight]\n      const positions = []\n      for (let i = 0; i <= 1; i = i + 0.01) {\n        let point = this.twoBezier(i, [p1, 0].flat(), cp, [p2, 0].flat())\n        positions.push(point)\n      }\n      return positions.flat()\n    },\n    init() {\n      var viewer = new Viewer('cesiumContainer', {\n        imageryProvider: new OpenStreetMapImageryProvider({\n          url: 'https://a.tile.openstreetmap.org/'\n        })\n      })\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n\n      const points = {\n        start: { 四川: [104.06, 30.67] },\n        end: {\n          甘肃: [103.73, 36.03],\n          青海: [101.74, 36.56],\n          河北: [114.48, 38.03],\n          云南: [102.73, 25.04],\n          贵州: [106.71, 26.57],\n          湖北: [114.31, 30.52],\n          河南: [113.65, 34.76],\n          山东: [117, 36.65],\n          江苏: [118.78, 32.04],\n          安徽: [117.27, 31.86],\n          浙江: [120.19, 30.26],\n          江西: [115.89, 28.68],\n          福建: [119.3, 26.08],\n          广东: [113.23, 23.16],\n          湖南: [113, 28.21],\n          海南: [110.35, 20.02],\n          辽宁: [123.38, 41.8],\n          吉林: [125.35, 43.88],\n          黑龙江: [126.63, 45.75],\n          山西: [112.53, 37.87],\n          陕西: [108.95, 34.27],\n          台湾: [121.3, 25.03],\n          北京: [116.46, 39.92],\n          上海: [121.48, 31.22],\n          重庆: [106.54, 29.59],\n          天津: [117.2, 39.13],\n          内蒙古: [111.65, 40.82],\n          广西: [108.33, 22.84],\n          西藏: [91.11, 29.97],\n          宁夏: [106.27, 38.47],\n          新疆: [87.68, 43.77],\n          香港: [114.17, 22.28],\n          澳门: [113.54, 22.19],\n        },\n      }\n\n      let geometryInstances = []\n      let startPoint = points['start'][Object.keys(points['start'])[0]]\n      for (let key in points['end']) {\n        let endPoint = points['end'][key]\n        let polylineGeometry = new PolylineGeometry({\n          positions: Cartesian3.fromDegreesArrayHeights(this.ceratBezierLine(startPoint, endPoint)),\n          width: 2,\n        })\n        let geometryInstance = new GeometryInstance({ geometry: polylineGeometry })\n        geometryInstances.push(geometryInstance)\n      }\n\n      let line = viewer.scene.primitives.add(\n        new Primitive({\n          geometryInstances: geometryInstances,\n          appearance: new PolylineMaterialAppearance({\n            material: new Material({\n              fabric: {\n                uniforms: {\n                  color: new Color(1.0, 0.5, 0.0, 1.0),\n                  percentage: 0.5, // 尾迹百分比\n                  offset: 0.0,\n                },\n                source: `\n                    uniform vec4 color;\n                    uniform float percentage;\n                    uniform float offset;\n                    czm_material czm_getMaterial(czm_materialInput materialInput)\n                    {\n                        czm_material material = czm_getDefaultMaterial(materialInput);\n                        float s = materialInput.s;\n                        float offset = mod(offset,1.0);\n                        material.diffuse = color.rgb;\n                        if((percentage + offset)<=1.0){\n                            if(s > percentage + offset || s < offset){\n                                material.alpha = 0.0;\n                            }\n                            else{\n                                material.alpha = (s-offset)/percentage;\n                            }\n                        }\n                        else{\n                            if(s>offset){\n                                material.alpha = (s-offset)/percentage;\n                            }\n                            else if(s <= percentage + offset - 1.0){\n                                material.alpha = (1.0+s-offset)/percentage;\n                            }\n                            else{\n                                material.alpha = 0.0;\n                            }\n                        }\n                        return material;\n                    }`,\n              },\n            }),\n          }),\n        })\n      )\n      viewer.camera.flyTo({ destination: Cartesian3.fromDegrees(startPoint[0], startPoint[1], 10000000) })\n      viewer.scene.preUpdate.addEventListener(function () {\n        var offset = line.appearance.material.uniforms.offset\n        offset += 0.005\n        if (offset > 1.0) {\n          offset = 0.0\n        }\n        line.appearance.material.uniforms.offset = offset\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./migration_line.vue?vue&type=template&id=5f1f5f46&scoped=true\"\nimport script from \"./migration_line.vue?vue&type=script&lang=js\"\nexport * from \"./migration_line.vue?vue&type=script&lang=js\"\n\nimport \"./migration_line.vue?vue&type=style&index=0&id=5f1f5f46&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5f1f5f46\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","twoBezier","t","p1","cp","p2","x1","y1","z1","cx","cy","cz","x2","y2","z2","x","y","z","ceratBezierLine","maxHeight","positions","i","point","flat","push","viewer","Viewer","imageryProvider","OpenStreetMapImageryProvider","url","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","points","start","四川","end","甘肃","青海","河北","云南","贵州","湖北","河南","山东","江苏","安徽","浙江","江西","福建","广东","湖南","海南","辽宁","吉林","黑龙江","山西","陕西","台湾","北京","上海","重庆","天津","内蒙古","广西","西藏","宁夏","新疆","香港","澳门","geometryInstances","startPoint","Object","keys","key","endPoint","polylineGeometry","PolylineGeometry","Cartesian3","width","geometryInstance","GeometryInstance","geometry","line","primitives","add","Primitive","appearance","PolylineMaterialAppearance","material","Material","fabric","uniforms","color","Color","percentage","offset","source","camera","flyTo","destination","preUpdate","addEventListener","__exports__","render"],"sourceRoot":""}