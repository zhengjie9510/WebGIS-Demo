{"version":3,"file":"js/4739.f58569e0.js","mappings":"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","sources":["webpack://webgis/./src/components/public/select_hightlight.vue","webpack://webgis/./node_modules/@cesium/engine/Source/Scene/ConditionsExpression.js","webpack://webgis/./node_modules/@cesium/engine/Source/Scene/Cesium3DTileStyle.js","webpack://webgis/./src/components/public/select_hightlight.vue?a26c"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\nexport default {\r\n  data() {\r\n    return { path: process.env.BASE_URL }\r\n  },\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    async init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer')\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      viewer.scene.debugShowFramesPerSecond = true;\r\n\r\n      const tileset = await Cesium.Cesium3DTileset.fromUrl(this.path + 'SampleData/Cesium3DTiles/Tilesets/Tileset/tileset.json')\r\n      viewer.scene.primitives.add(tileset)\r\n      tileset.style = new Cesium.Cesium3DTileStyle({\r\n        color: {\r\n          conditions: [\r\n            [\"${Height} >= 83\", \"color('purple')\"],\r\n            [\"${Height} >= 80\", \"color('red')\"],\r\n            [\"${Height} >= 70\", \"color('orange')\"],\r\n            [\"${Height} >= 12\", \"color('yellow')\"],\r\n            [\"${Height} >= 7\", \"color('lime')\"],\r\n            [\"${Height} >= 1\", \"color('DARKORANGE')\"],\r\n            [\"true\", \"color('blue')\"],\r\n          ],\r\n        },\r\n      });\r\n      viewer.zoomTo(tileset);\r\n      const highlighted = {\r\n        primitive: undefined,\r\n        originalColor: new Cesium.Color(),\r\n      }\r\n      const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\r\n      handler.setInputAction((click) => {\r\n        const pickobject = viewer.scene.pick(click.position);\r\n        // step1 恢复已高亮的primitie颜色\r\n        if (highlighted.primitive) {\r\n          highlighted.primitive.color = highlighted.originColor\r\n          highlighted.primitive = undefined\r\n          highlighted.originColor = undefined\r\n        }\r\n        // step2 对选中的primitive改变颜色\r\n        if (Cesium.defined(pickobject)) {\r\n          highlighted.primitive = pickobject\r\n          highlighted.originColor = Cesium.Color.clone(pickobject.color)\r\n          pickobject.color = Cesium.Color.CYAN\r\n        }\r\n      }, Cesium.ScreenSpaceEventType.LEFT_CLICK)\r\n\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates a conditions expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * Implements the {@link StyleExpression} interface.\n * </p>\n *\n * @alias ConditionsExpression\n * @constructor\n *\n * @param {object} [conditionsExpression] The conditions expression defined using the 3D Tiles Styling language.\n * @param {object} [defines] Defines in the style.\n *\n * @example\n * const expression = new Cesium.ConditionsExpression({\n *     conditions : [\n *         ['${Area} > 10, 'color(\"#FF0000\")'],\n *         ['${id} !== \"1\"', 'color(\"#00FF00\")'],\n *         ['true', 'color(\"#FFFFFF\")']\n *     ]\n * });\n * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n */\nfunction ConditionsExpression(conditionsExpression, defines) {\n  this._conditionsExpression = clone(conditionsExpression, true);\n  this._conditions = conditionsExpression.conditions;\n  this._runtimeConditions = undefined;\n\n  setRuntime(this, defines);\n}\n\nObject.defineProperties(ConditionsExpression.prototype, {\n  /**\n   * Gets the conditions expression defined in the 3D Tiles Styling language.\n   *\n   * @memberof ConditionsExpression.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  conditionsExpression: {\n    get: function () {\n      return this._conditionsExpression;\n    },\n  },\n});\n\nfunction Statement(condition, expression) {\n  this.condition = condition;\n  this.expression = expression;\n}\n\nfunction setRuntime(expression, defines) {\n  const runtimeConditions = [];\n  const conditions = expression._conditions;\n  if (!defined(conditions)) {\n    return;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    const cond = String(statement[0]);\n    const condExpression = String(statement[1]);\n    runtimeConditions.push(\n      new Statement(\n        new Expression(cond, defines),\n        new Expression(condExpression, defines)\n      )\n    );\n  }\n  expression._runtimeConditions = runtimeConditions;\n}\n\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {object} [result] The object onto which to store the result.\n * @returns {boolean|number|string|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\nConditionsExpression.prototype.evaluate = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluate(feature, result);\n    }\n  }\n};\n\n/**\n * Evaluates the result of a Color expression, using the values defined by a feature.\n * <p>\n * This is equivalent to {@link ConditionsExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nConditionsExpression.prototype.evaluateColor = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluateColor(feature, result);\n    }\n  }\n};\n\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {string} returnType The return type of the generated function.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nConditionsExpression.prototype.getShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n  returnType\n) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return undefined;\n  }\n\n  let shaderFunction = \"\";\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n\n    const condition = statement.condition.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState\n    );\n    const expression = statement.expression.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState\n    );\n\n    // Build the if/else chain from the list of conditions\n    shaderFunction +=\n      `    ${i === 0 ? \"if\" : \"else if\"} (${condition})\\n` +\n      `    {\\n` +\n      `        return ${expression};\\n` +\n      `    }\\n`;\n  }\n\n  shaderFunction =\n    `${returnType} ${functionSignature}\\n` +\n    `{\\n${shaderFunction}    return ${returnType}(1.0);\\n` + // Return a default value if no conditions are met\n    `}\\n`;\n\n  return shaderFunction;\n};\n\n/**\n * Gets the variables used by the expression.\n *\n * @returns {string[]} The variables used by the expression.\n *\n * @private\n */\nConditionsExpression.prototype.getVariables = function () {\n  let variables = [];\n\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return variables;\n  }\n\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    variables.push.apply(variables, statement.condition.getVariables());\n    variables.push.apply(variables, statement.expression.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default ConditionsExpression;\n","import clone from \"../Core/clone.js\";\nimport defaultValue from \"../Core/defaultValue.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ConditionsExpression from \"./ConditionsExpression.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {object} [style] An object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n */\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n\n  this._colorShaderTranslucent = false;\n\n  setup(this, style);\n}\n\nfunction setup(that, styleJson) {\n  styleJson = defaultValue(clone(styleJson, true), that._style);\n  that._style = styleJson;\n\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n\n  const meta = {};\n  if (defined(styleJson.meta)) {\n    const defines = styleJson.defines;\n    const metaJson = defaultValue(styleJson.meta, defaultValue.EMPTY_OBJECT);\n    for (const property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new Expression(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  const defines = defaultValue(tileStyle._style, defaultValue.EMPTY_OBJECT)\n    .defines;\n\n  if (!defined(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new Expression(String(value));\n  } else if (typeof value === \"string\") {\n    return new Expression(value, defines);\n  } else if (defined(value.conditions)) {\n    return new ConditionsExpression(value, defines);\n  }\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!defined(expression)) {\n    return undefined;\n  } else if (defined(expression.expression)) {\n    return expression.expression;\n  } else if (defined(expression.conditionsExpression)) {\n    return clone(expression.conditionsExpression, true);\n  }\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default {}\n   */\n  style: {\n    get: function () {\n      return this._style;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(\n        this._pointOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(\n        this._pointOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(\n        this._labelOutlineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(\n        this._labelOutlineWidth\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelStyle : `(\\${Temperature} > 90) ? ${LabelStyle.FILL_AND_OUTLINE} : ${LabelStyle.FILL}`\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(\n        this._backgroundColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(\n        this._backgroundPadding\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(\n        this._backgroundEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(\n        this._scaleByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(\n        this._translucencyByDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(\n        this._distanceDisplayCondition\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(\n        this._anchorLineEnabled\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(\n        this._anchorLineColor\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(\n        this._disableDepthTestDistance\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(\n        this._horizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    },\n  },\n\n  /**\n   Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n    * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n    * <p>\n    * The expression must return a <code>HorizontalOrigin</code>.\n    * </p>\n    * <p>\n    * This expression is only applicable to point features in a Vector tile.\n    * </p>\n    *\n    * @memberof Cesium3DTileStyle.prototype\n    *\n    * @type {StyleExpression}\n    *\n    * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n    *\n    * @example\n    * const style = new Cesium3DTileStyle({\n    *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n    * });\n    * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n    *\n    * @example\n    * const style = new Cesium.Cesium3DTileStyle();\n    * // Override labelHorizontalOrigin expression with a custom function\n    * style.labelHorizontalOrigin = {\n    *     evaluate : function(feature) {\n    *         return HorizontalOrigin.CENTER;\n    *     }\n    * };\n    */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(\n        this._labelHorizontalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(\n        this._labelVerticalOrigin\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    },\n  },\n});\n\n/**\n * Asynchronously creates a Cesium3DTileStyle from a url.\n *\n * @param {Resource|string} url The url of the style to be loaded.\n *\n * @returns {Promise<Cesium3DTileStyle>} A promise which resolves to the created style\n *\n * @private\n */\nCesium3DTileStyle.fromUrl = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  return resource.fetchJson(url).then(function (styleJson) {\n    return new Cesium3DTileStyle(styleJson);\n  });\n};\n\n/**\n * Gets the color shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getColorShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent;\n    // Return the cached result, may be undefined\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  if (defined(this.color) && defined(this.color.getShaderFunction)) {\n    this._colorShaderFunction = this.color.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"vec4\"\n    );\n  } else {\n    this._colorShaderFunction = undefined;\n  }\n\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n\n/**\n * Gets the show shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getShowShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n\n  if (defined(this.show) && defined(this.show.getShaderFunction)) {\n    this._showShaderFunction = this.show.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"bool\"\n    );\n  } else {\n    this._showShaderFunction = undefined;\n  }\n  return this._showShaderFunction;\n};\n\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState\n) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  if (defined(this.pointSize) && defined(this.pointSize.getShaderFunction)) {\n    this._pointSizeShaderFunction = this.pointSize.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"float\"\n    );\n  } else {\n    this._pointSizeShaderFunction = undefined;\n  }\n\n  return this._pointSizeShaderFunction;\n};\n\n/**\n * Gets the variables used by the style.\n *\n * @returns {string[]} The variables used by the style.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getVariables = function () {\n  let variables = [];\n\n  if (defined(this.color) && defined(this.color.getVariables)) {\n    variables.push.apply(variables, this.color.getVariables());\n  }\n\n  if (defined(this.show) && defined(this.show.getVariables)) {\n    variables.push.apply(variables, this.show.getVariables());\n  }\n\n  if (defined(this.pointSize) && defined(this.pointSize.getVariables)) {\n    variables.push.apply(variables, this.pointSize.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default Cesium3DTileStyle;\n","import { render } from \"./select_hightlight.vue?vue&type=template&id=2aa8bdc3&scoped=true\"\nimport script from \"./select_hightlight.vue?vue&type=script&lang=js\"\nexport * from \"./select_hightlight.vue?vue&type=script&lang=js\"\n\nimport \"./select_hightlight.vue?vue&type=style&index=0&id=2aa8bdc3&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-2aa8bdc3\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","ConditionsExpression","conditionsExpression","defines","this","_conditionsExpression","clone","_conditions","conditions","_runtimeConditions","undefined","setRuntime","Statement","condition","expression","runtimeConditions","defined","length","i","statement","cond","String","condExpression","push","Expression","Object","defineProperties","prototype","get","evaluate","feature","result","evaluateColor","getShaderFunction","functionSignature","variableSubstitutionMap","shaderState","returnType","shaderFunction","getShaderExpression","getVariables","variables","apply","filter","variable","index","indexOf","Cesium3DTileStyle","style","_style","_ready","_show","_color","_pointSize","_pointOutlineColor","_pointOutlineWidth","_labelColor","_labelOutlineColor","_labelOutlineWidth","_font","_labelStyle","_labelText","_backgroundColor","_backgroundPadding","_backgroundEnabled","_scaleByDistance","_translucencyByDistance","_distanceDisplayCondition","_heightOffset","_anchorLineEnabled","_anchorLineColor","_image","_disableDepthTestDistance","_horizontalOrigin","_verticalOrigin","_labelHorizontalOrigin","_labelVerticalOrigin","_meta","_colorShaderFunction","_showShaderFunction","_pointSizeShaderFunction","_colorShaderFunctionReady","_showShaderFunctionReady","_pointSizeShaderFunctionReady","_colorShaderTranslucent","setup","that","styleJson","defaultValue","show","color","pointSize","pointOutlineColor","pointOutlineWidth","labelColor","labelOutlineColor","labelOutlineWidth","labelStyle","font","labelText","backgroundColor","backgroundPadding","backgroundEnabled","scaleByDistance","translucencyByDistance","distanceDisplayCondition","heightOffset","anchorLineEnabled","anchorLineColor","image","disableDepthTestDistance","horizontalOrigin","verticalOrigin","labelHorizontalOrigin","labelVerticalOrigin","meta","metaJson","property","hasOwnProperty","getExpression","tileStyle","value","getJsonFromExpression","set","fromUrl","url","DeveloperError","resource","Resource","fetchJson","then","getColorShaderFunction","translucent","getShowShaderFunction","getPointSizeShaderFunction","data","path","process","mounted","init","methods","async","viewer","Cesium","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","debugShowFramesPerSecond","tileset","primitives","add","zoomTo","highlighted","primitive","originalColor","handler","canvas","setInputAction","click","pickobject","pick","position","originColor","__exports__","render"],"sourceRoot":""}