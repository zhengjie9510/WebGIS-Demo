{"version":3,"file":"js/337.fe6c83be.js","mappings":"iLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,4DAOF,GACEC,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIC,EAAAA,EAAc,kBAAmB,CAAEC,gBAAiBD,EAAAA,MACjEA,EAAAA,EAAAA,oCACFD,EAAOG,gBAAkBC,OAAOC,kBAElCL,EAAOM,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9C,MAAMC,EAASV,EAAOW,SAASC,IAAI,CACjCC,SAAUZ,EAAAA,EAAAA,YAA8B,MAAO,KAAO,MACtDa,MAAO,CAAC,IAEVd,EAAOe,OAAOL,GACd,MAAMM,EAAuB,k0CAkC7BhB,EAAOM,MAAMC,kBAAkBK,IAC7B,IAAIX,EAAAA,EAAwB,CAC1BgB,eAAgBD,EAChBE,SAAU,CACRC,SAAU,IACVC,UAAW,MAInB,I,WC5DJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O,uECwBA,SAASC,EAAmBC,IAC1BC,EAAAA,EAAAA,GACE,qBACA,6HAGFD,GAAUE,EAAAA,EAAAA,GAAaF,EAASE,EAAAA,EAAAA,cAEhC,MAAMC,EAAW,IAAIC,EAAAA,EAAsB,CACzCC,sBAAsBH,EAAAA,EAAAA,GAAaF,EAAQK,sBAAsB,GACjEC,kBAAkBJ,EAAAA,EAAAA,GAAaF,EAAQM,kBAAkB,KAc3D,OATAH,EAASI,cAAgBH,EAAAA,EAAAA,wBACvB,CACEI,IAAKC,EAAAA,EAAAA,YAAwB,GAC7BJ,sBAAsBH,EAAAA,EAAAA,GAAaF,EAAQK,sBAAsB,GACjEC,kBAAkBJ,EAAAA,EAAAA,GAAaF,EAAQM,kBAAkB,IAE3DH,GAGKA,CACT,CACA,Q","sources":["webpack://webgis/./src/components/cesium/snow_effect.vue","webpack://webgis/./src/components/cesium/snow_effect.vue?fa95","webpack://webgis/./node_modules/@cesium/engine/Source/Core/createWorldTerrain.js"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport * as Cesium from 'cesium'\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Cesium.Viewer('cesiumContainer', { terrainProvider: Cesium.createWorldTerrain() })\r\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      const entity = viewer.entities.add({\r\n        position: Cesium.Cartesian3.fromDegrees(86.57, 27.70, 15000),\r\n        point: {}\r\n      })\r\n      viewer.zoomTo(entity)\r\n      const fragmentShaderSource = `\r\n        uniform sampler2D colorTexture;\r\n        in vec2 v_textureCoordinates;\r\n        uniform float snowSpeed;\r\n        uniform float snowSize;\r\n        out vec4 fragColor;\r\n        float snow(vec2 uv,float scale)\r\n        {\r\n            float time=czm_frameNumber/snowSpeed;\r\n            float w=smoothstep(1.,0.,-uv.y*(scale/10.));if(w<.1)return 0.;\r\n            uv+=time/scale;uv.y+=time*2./scale;uv.x+=sin(uv.y+time*.5)/scale;\r\n            uv*=scale;vec2 s=floor(uv),f=fract(uv),p;float k=3.,d;\r\n            p=.5+.35*sin(11.*fract(sin((s+p+scale)*mat2(7,3,6,5))*5.))-f;d=length(p);k=min(d,k);\r\n            k=smoothstep(0.,k,sin(f.x+f.y)*snowSize);\r\n            return k*w;\r\n        }\r\n        void main(){\r\n            vec2 resolution=czm_viewport.zw;\r\n            vec2 uv=(gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y);\r\n            vec3 finalColor=vec3(0);\r\n            // float c=smoothstep(1.,0.3,clamp(uv.y*.3+.8,0.,.75));\r\n            float c=0.;\r\n            c+=snow(uv,30.)*.0;\r\n            c+=snow(uv,20.)*.0;\r\n            c+=snow(uv,15.)*.0;\r\n            c+=snow(uv,10.);\r\n            c+=snow(uv,8.);\r\n            c+=snow(uv,6.);\r\n            c+=snow(uv,5.);\r\n            finalColor=(vec3(c));\r\n            fragColor=mix(texture(colorTexture,v_textureCoordinates),vec4(finalColor,1),.5);\r\n        }\r\n      `;\r\n\r\n      viewer.scene.postProcessStages.add(\r\n        new Cesium.PostProcessStage({\r\n          fragmentShader: fragmentShaderSource,\r\n          uniforms: {\r\n            snowSize: 0.02,\r\n            snowSpeed: 60.0\r\n          },\r\n        })\r\n      );\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./snow_effect.vue?vue&type=template&id=1eb12515&scoped=true\"\nimport script from \"./snow_effect.vue?vue&type=script&lang=js\"\nexport * from \"./snow_effect.vue?vue&type=script&lang=js\"\n\nimport \"./snow_effect.vue?vue&type=style&index=0&id=1eb12515&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1eb12515\"]])\n\nexport default __exports__","import CesiumTerrainProvider from \"./CesiumTerrainProvider.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport deprecationWarning from \"./deprecationWarning.js\";\nimport IonResource from \"./IonResource.js\";\n\n/**\n * Creates a {@link CesiumTerrainProvider} instance for the {@link https://cesium.com/content/#cesium-world-terrain|Cesium World Terrain}.\n *\n * @function\n *\n * @param {object} [options] Object with the following properties:\n * @param {boolean} [options.requestVertexNormals=false] Flag that indicates if the client should request additional lighting information from the server if available.\n * @param {boolean} [options.requestWaterMask=false] Flag that indicates if the client should request per tile water masks from the server if available.\n * @returns {CesiumTerrainProvider}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium World Terrain with default settings\n * const viewer = new Cesium.Viewer('cesiumContainer', {\n *     terrainProvider : Cesium.createWorldTerrain();\n * });\n *\n * @example\n * // Create Cesium World Terrain with water and normals.\n * const viewer1 = new Cesium.Viewer('cesiumContainer', {\n *     terrainProvider : Cesium.createWorldTerrain({\n *         requestWaterMask : true,\n *         requestVertexNormals : true\n *     });\n * });\n *\n */\nfunction createWorldTerrain(options) {\n  deprecationWarning(\n    \"createWorldTerrain\",\n    \"createWorldTerrain was deprecated in CesiumJS 1.104.  It will be in CesiumJS 1.107.  Use createWorldTerrainAsync instead.\"\n  );\n\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  const provider = new CesiumTerrainProvider({\n    requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n    requestWaterMask: defaultValue(options.requestWaterMask, false),\n  });\n\n  // This is here in order to avoid throwing a second deprecation error\n  // by using the deprecated url parameter in the constructor above\n  provider._readyPromise = CesiumTerrainProvider._initializeReadyPromise(\n    {\n      url: IonResource.fromAssetId(1),\n      requestVertexNormals: defaultValue(options.requestVertexNormals, false),\n      requestWaterMask: defaultValue(options.requestWaterMask, false),\n    },\n    provider\n  );\n\n  return provider;\n}\nexport default createWorldTerrain;\n"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Cesium","terrainProvider","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","entity","entities","add","position","point","zoomTo","fragmentShaderSource","fragmentShader","uniforms","snowSize","snowSpeed","__exports__","render","createWorldTerrain","options","deprecationWarning","defaultValue","provider","CesiumTerrainProvider","requestVertexNormals","requestWaterMask","_readyPromise","url","IonResource"],"sourceRoot":""}