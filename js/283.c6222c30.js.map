{"version":3,"file":"js/283.c6222c30.js","mappings":"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","sources":["webpack://webgis/./src/components/cesium/dynamic_building.vue","webpack://webgis/./src/components/cesium/plugins/PolygonGeometry.js","webpack://webgis/./src/components/cesium/dynamic_building.vue?090c"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport {\n  Viewer,\n  FeatureDetection,\n  MaterialAppearance,\n  GeometryInstance,\n  Primitive,\n  Material,\n  Color,\n  GeoJsonDataSource,\n  Cartesian3,\n  Matrix4\n} from 'cesium'\nimport { default as PolygonGeometry } from './plugins/PolygonGeometry'\nconst building = require('../../../public/SampleData/building.json')\n\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      var viewer = new Viewer('cesiumContainer')\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n      const scene = viewer.scene\n\n      const fragmentShaderSource = `\n        uniform float offset2;\n        uniform float offset1;\n        uniform vec4 color;\n        const float pi = 3.1415926;\n        czm_material czm_getMaterial(czm_materialInput materialInput)\n        {\n          czm_material material = czm_getDefaultMaterial(materialInput);\n          vec2 st = materialInput.st;\n\n          material.diffuse = czm_gammaCorrect(color.rgb); \n          // material.diffuse = vec3(st.t,st.t,st.t);\n          float a = abs(cos(st.t * pi * 3.0));\n          if(a<=0.2){\n            material.diffuse = vec3(189.0/255.0,196.0/255.0,210.0/255.0);\n          }\n          if(st.t> offset1-offset2 && st.t< offset1+offset2)\n          {\n            material.emission=vec3(0.7);\n          }\n          material.alpha = 1.0; \n          return material;\n        }\n        `\n\n      GeoJsonDataSource.load(building).then((dataSource) => {\n        const entities = dataSource.entities.values\n        const geometryInstances = []\n        for (const entity of entities) {\n          const polygon = new PolygonGeometry({\n            polygonHierarchy: entity.polygon.hierarchy.getValue(),\n            extrudedHeight: Math.random() * 40 + 10,\n          })\n          const geometry = PolygonGeometry.createGeometry(polygon)\n          const geometryInstance = new GeometryInstance({\n            geometry: geometry,\n          })\n          geometryInstances.push(geometryInstance)\n        }\n        const primitive = scene.primitives.add(\n          new Primitive({\n            asynchronous: false,\n            geometryInstances: geometryInstances,\n            appearance: new MaterialAppearance({\n              material: new Material({\n                translucent: false,\n                fabric: {\n                  uniforms: {\n                    color: new Color(87 / 255, 122 / 255, 150 / 255),\n                    offset1: 0.02,\n                    offset2: 0.02,\n                  },\n                  source: fragmentShaderSource\n                },\n              }),\n            }),\n          })\n        )\n\n        // 动态修改材质中的offset变量，从而实现动态效果。\n        viewer.scene.preUpdate.addEventListener(function () {\n          var offset = primitive.appearance.material.uniforms.offset1\n          offset += 0.01\n          if (offset > 0.98) {\n            offset = 0.02\n          }\n          primitive.appearance.material.uniforms.offset1 = offset\n        })\n        const center = Cartesian3.fromDegrees(104.06, 30.66);\n        viewer.camera.lookAt(center, new Cartesian3(0.0, -4790.0, 3930.0));\n        viewer.camera.lookAtTransform(Matrix4.IDENTITY);\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import {\n  ArcType, BoundingRectangle, BoundingSphere, Cartesian2, Cartesian3, Cartographic,\n  Check, ComponentDatatype, defaultValue, defined, DeveloperError, Ellipsoid,\n  EllipsoidGeodesic, EllipsoidTangentPlane, Geometry, GeometryAttribute, GeometryInstance,\n  GeometryOffsetAttribute, GeometryPipeline, IndexDatatype, Math as CesiumMath, Matrix3, PolygonGeometryLibrary,\n  PolygonPipeline, Quaternion, Rectangle, VertexFormat, WindingOrder,\n} from 'cesium'\n\n\nconst scratchCarto1 = new Cartographic();\nconst scratchCarto2 = new Cartographic();\nfunction adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n  const carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n  const height = carto1.height;\n  const p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n  p1Carto.height = height;\n  ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n  const p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n  p2Carto.height = height - 100;\n  ellipsoid.cartographicToCartesian(p2Carto, p2);\n}\n\nconst scratchBoundingRectangle = new BoundingRectangle();\nconst scratchPosition = new Cartesian3();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst p1Scratch = new Cartesian3();\nconst p2Scratch = new Cartesian3();\nlet scratchPerPosNormal = new Cartesian3();\nlet scratchPerPosTangent = new Cartesian3();\nlet scratchPerPosBitangent = new Cartesian3();\n\nconst appendTextureCoordinatesOrigin = new Cartesian2();\nconst appendTextureCoordinatesCartesian2 = new Cartesian2();\nconst appendTextureCoordinatesCartesian3 = new Cartesian3();\nconst appendTextureCoordinatesQuaternion = new Quaternion();\nconst appendTextureCoordinatesMatrix3 = new Matrix3();\nconst tangentMatrixScratch = new Matrix3();\n\nfunction computeAttributes(options) {\n  const vertexFormat = options.vertexFormat;\n  const geometry = options.geometry;\n  const shadowVolume = options.shadowVolume;\n  const flatPositions = geometry.attributes.position.values;\n  const flatTexcoords = defined(geometry.attributes.st)\n    ? geometry.attributes.st.values\n    : undefined;\n\n  let length = flatPositions.length;\n  const wall = options.wall;\n  const top = options.top || wall;\n  const bottom = options.bottom || wall;\n  if (\n    vertexFormat.st ||\n    vertexFormat.normal ||\n    vertexFormat.tangent ||\n    vertexFormat.bitangent ||\n    shadowVolume\n  ) {\n    // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n    // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n    const boundingRectangle = options.boundingRectangle;\n    const tangentPlane = options.tangentPlane;\n    const ellipsoid = options.ellipsoid;\n    const stRotation = options.stRotation;\n    const perPositionHeight = options.perPositionHeight;\n\n    const origin = appendTextureCoordinatesOrigin;\n    origin.x = boundingRectangle.x;\n    origin.y = boundingRectangle.y;\n\n    const textureCoordinates = vertexFormat.st\n      ? new Float32Array(2 * (length / 3))\n      : undefined;\n    let normals;\n    if (vertexFormat.normal) {\n      if (perPositionHeight && top && !wall) {\n        normals = geometry.attributes.normal.values;\n      } else {\n        normals = new Float32Array(length);\n      }\n    }\n    const tangents = vertexFormat.tangent\n      ? new Float32Array(length)\n      : undefined;\n    const bitangents = vertexFormat.bitangent\n      ? new Float32Array(length)\n      : undefined;\n    const extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\n\n    let textureCoordIndex = 0;\n    let attrIndex = 0;\n\n    let normal = scratchNormal;\n    let tangent = scratchTangent;\n    let bitangent = scratchBitangent;\n    let recomputeNormal = true;\n\n    let textureMatrix = appendTextureCoordinatesMatrix3;\n    let tangentRotationMatrix = tangentMatrixScratch;\n    if (stRotation !== 0.0) {\n      let rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n      rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        -stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      tangentRotationMatrix = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationMatrix\n      );\n    } else {\n      textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n      tangentRotationMatrix = Matrix3.clone(\n        Matrix3.IDENTITY,\n        tangentRotationMatrix\n      );\n    }\n\n    let bottomOffset = 0;\n    let bottomOffset2 = 0;\n\n    if (top && bottom) {\n      bottomOffset = length / 2;\n      bottomOffset2 = length / 3;\n\n      length /= 2;\n    }\n\n    for (let i = 0; i < length; i += 3) {\n      const position = Cartesian3.fromArray(\n        flatPositions,\n        i,\n        appendTextureCoordinatesCartesian3\n      );\n\n      if (vertexFormat.st) {\n        if (!defined(flatTexcoords)) {\n          let p = Matrix3.multiplyByVector(\n            textureMatrix,\n            position,\n            scratchPosition\n          );\n          p = ellipsoid.scaleToGeodeticSurface(p, p);\n          const st = tangentPlane.projectPointOntoPlane(\n            p,\n            appendTextureCoordinatesCartesian2\n          );\n          Cartesian2.subtract(st, origin, st);\n          // 修改纹理坐标值 开始\n          // const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n          // const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n          if (bottom) {\n            textureCoordinates[textureCoordIndex + bottomOffset2] = 0;\n            textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = 0;\n          }\n          if (top) {\n            textureCoordinates[textureCoordIndex] = 0;\n            textureCoordinates[textureCoordIndex + 1] = 1;\n          }\n          // 修改纹理坐标值 结束\n\n          textureCoordIndex += 2;\n        }\n      }\n\n      if (\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent ||\n        shadowVolume\n      ) {\n        const attrIndex1 = attrIndex + 1;\n        const attrIndex2 = attrIndex + 2;\n\n        if (wall) {\n          if (i + 3 < length) {\n            const p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\n\n            if (recomputeNormal) {\n              const p2 = Cartesian3.fromArray(\n                flatPositions,\n                i + length,\n                p2Scratch\n              );\n              if (perPositionHeight) {\n                adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\n              }\n              Cartesian3.subtract(p1, position, p1);\n              Cartesian3.subtract(p2, position, p2);\n              normal = Cartesian3.normalize(\n                Cartesian3.cross(p2, p1, normal),\n                normal\n              );\n              recomputeNormal = false;\n            }\n\n            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) {\n              // if we've reached a corner\n              recomputeNormal = true;\n            }\n          }\n\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\n            if (vertexFormat.tangent) {\n              tangent = Cartesian3.normalize(\n                Cartesian3.cross(bitangent, normal, tangent),\n                tangent\n              );\n            }\n          }\n        } else {\n          normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            if (perPositionHeight) {\n              scratchPerPosNormal = Cartesian3.fromArray(\n                normals,\n                attrIndex,\n                scratchPerPosNormal\n              );\n              scratchPerPosTangent = Cartesian3.cross(\n                Cartesian3.UNIT_Z,\n                scratchPerPosNormal,\n                scratchPerPosTangent\n              );\n              scratchPerPosTangent = Cartesian3.normalize(\n                Matrix3.multiplyByVector(\n                  tangentRotationMatrix,\n                  scratchPerPosTangent,\n                  scratchPerPosTangent\n                ),\n                scratchPerPosTangent\n              );\n              if (vertexFormat.bitangent) {\n                scratchPerPosBitangent = Cartesian3.normalize(\n                  Cartesian3.cross(\n                    scratchPerPosNormal,\n                    scratchPerPosTangent,\n                    scratchPerPosBitangent\n                  ),\n                  scratchPerPosBitangent\n                );\n              }\n            }\n\n            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n            tangent = Cartesian3.normalize(\n              Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent),\n              tangent\n            );\n            if (vertexFormat.bitangent) {\n              bitangent = Cartesian3.normalize(\n                Cartesian3.cross(normal, tangent, bitangent),\n                bitangent\n              );\n            }\n          }\n        }\n\n        if (vertexFormat.normal) {\n          if (options.wall) {\n            normals[attrIndex + bottomOffset] = normal.x;\n            normals[attrIndex1 + bottomOffset] = normal.y;\n            normals[attrIndex2 + bottomOffset] = normal.z;\n          } else if (bottom) {\n            normals[attrIndex + bottomOffset] = -normal.x;\n            normals[attrIndex1 + bottomOffset] = -normal.y;\n            normals[attrIndex2 + bottomOffset] = -normal.z;\n          }\n\n          if ((top && !perPositionHeight) || wall) {\n            normals[attrIndex] = normal.x;\n            normals[attrIndex1] = normal.y;\n            normals[attrIndex2] = normal.z;\n          }\n        }\n\n        if (shadowVolume) {\n          if (wall) {\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          }\n          extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n          extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n          extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n        }\n\n        if (vertexFormat.tangent) {\n          if (options.wall) {\n            tangents[attrIndex + bottomOffset] = tangent.x;\n            tangents[attrIndex1 + bottomOffset] = tangent.y;\n            tangents[attrIndex2 + bottomOffset] = tangent.z;\n          } else if (bottom) {\n            tangents[attrIndex + bottomOffset] = -tangent.x;\n            tangents[attrIndex1 + bottomOffset] = -tangent.y;\n            tangents[attrIndex2 + bottomOffset] = -tangent.z;\n          }\n\n          if (top) {\n            if (perPositionHeight) {\n              tangents[attrIndex] = scratchPerPosTangent.x;\n              tangents[attrIndex1] = scratchPerPosTangent.y;\n              tangents[attrIndex2] = scratchPerPosTangent.z;\n            } else {\n              tangents[attrIndex] = tangent.x;\n              tangents[attrIndex1] = tangent.y;\n              tangents[attrIndex2] = tangent.z;\n            }\n          }\n        }\n\n        if (vertexFormat.bitangent) {\n          if (bottom) {\n            bitangents[attrIndex + bottomOffset] = bitangent.x;\n            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n          }\n          if (top) {\n            if (perPositionHeight) {\n              bitangents[attrIndex] = scratchPerPosBitangent.x;\n              bitangents[attrIndex1] = scratchPerPosBitangent.y;\n              bitangents[attrIndex2] = scratchPerPosBitangent.z;\n            } else {\n              bitangents[attrIndex] = bitangent.x;\n              bitangents[attrIndex1] = bitangent.y;\n              bitangents[attrIndex2] = bitangent.z;\n            }\n          }\n        }\n        attrIndex += 3;\n      }\n    }\n\n    if (vertexFormat.st && !defined(flatTexcoords)) {\n      geometry.attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: textureCoordinates,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      geometry.attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      geometry.attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      geometry.attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    if (shadowVolume) {\n      geometry.attributes.extrudeDirection = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: extrudeNormals,\n      });\n    }\n  }\n\n  if (options.extrude && defined(options.offsetAttribute)) {\n    const size = flatPositions.length / 3;\n    let offsetAttribute = new Uint8Array(size);\n\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      if ((top && bottom) || wall) {\n        offsetAttribute = offsetAttribute.fill(1, 0, size / 2);\n      } else if (top) {\n        offsetAttribute = offsetAttribute.fill(1);\n      }\n    } else {\n      const offsetValue =\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = offsetAttribute.fill(offsetValue);\n    }\n\n    geometry.attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return geometry;\n}\n\nconst startCartographicScratch = new Cartographic();\nconst endCartographicScratch = new Cartographic();\nconst idlCross = {\n  westOverIDL: 0.0,\n  eastOverIDL: 0.0,\n};\nlet ellipsoidGeodesic = new EllipsoidGeodesic();\nfunction computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n  result = defaultValue(result, new Rectangle());\n  if (!defined(positions) || positions.length < 3) {\n    result.west = 0.0;\n    result.north = 0.0;\n    result.south = 0.0;\n    result.east = 0.0;\n    return result;\n  }\n\n  if (arcType === ArcType.RHUMB) {\n    return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n  }\n\n  if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n    ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n  }\n\n  result.west = Number.POSITIVE_INFINITY;\n  result.east = Number.NEGATIVE_INFINITY;\n  result.south = Number.POSITIVE_INFINITY;\n  result.north = Number.NEGATIVE_INFINITY;\n\n  idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n  idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n  const inverseChordLength =\n    1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n  const positionsLength = positions.length;\n  let endCartographic = ellipsoid.cartesianToCartographic(\n    positions[0],\n    endCartographicScratch\n  );\n  let startCartographic = startCartographicScratch;\n  let swap;\n\n  for (let i = 1; i < positionsLength; i++) {\n    swap = startCartographic;\n    startCartographic = endCartographic;\n    endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n    ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n    interpolateAndGrowRectangle(\n      ellipsoidGeodesic,\n      inverseChordLength,\n      result,\n      idlCross\n    );\n  }\n\n  swap = startCartographic;\n  startCartographic = endCartographic;\n  endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n  ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n  interpolateAndGrowRectangle(\n    ellipsoidGeodesic,\n    inverseChordLength,\n    result,\n    idlCross\n  );\n\n  if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\n    result.west = idlCross.westOverIDL;\n    result.east = idlCross.eastOverIDL;\n\n    if (result.east > CesiumMath.PI) {\n      result.east = result.east - CesiumMath.TWO_PI;\n    }\n    if (result.west > CesiumMath.PI) {\n      result.west = result.west - CesiumMath.TWO_PI;\n    }\n  }\n\n  return result;\n}\n\nconst interpolatedCartographicScratch = new Cartographic();\nfunction interpolateAndGrowRectangle(\n  ellipsoidGeodesic,\n  inverseChordLength,\n  result,\n  idlCross\n) {\n  const segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n  const numPoints = Math.ceil(segmentLength * inverseChordLength);\n  const subsegmentDistance =\n    numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\n  let interpolationDistance = 0.0;\n\n  for (let i = 0; i < numPoints; i++) {\n    const interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\n      interpolationDistance,\n      interpolatedCartographicScratch\n    );\n    interpolationDistance += subsegmentDistance;\n    const longitude = interpolatedCartographic.longitude;\n    const latitude = interpolatedCartographic.latitude;\n\n    result.west = Math.min(result.west, longitude);\n    result.east = Math.max(result.east, longitude);\n    result.south = Math.min(result.south, latitude);\n    result.north = Math.max(result.north, latitude);\n\n    const lonAdjusted =\n      longitude >= 0 ? longitude : longitude + CesiumMath.TWO_PI;\n    idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n    idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n  }\n}\n\nconst createGeometryFromPositionsExtrudedPositions = [];\n\nfunction createGeometryFromPositionsExtruded(\n  ellipsoid,\n  polygon,\n  textureCoordinates,\n  granularity,\n  hierarchy,\n  perPositionHeight,\n  closeTop,\n  closeBottom,\n  vertexFormat,\n  arcType\n) {\n  const geos = {\n    walls: [],\n  };\n  let i;\n\n  if (closeTop || closeBottom) {\n    const topGeo = PolygonGeometryLibrary.createGeometryFromPositions(\n      ellipsoid,\n      polygon,\n      textureCoordinates,\n      granularity,\n      perPositionHeight,\n      vertexFormat,\n      arcType\n    );\n\n    const edgePoints = topGeo.attributes.position.values;\n    const indices = topGeo.indices;\n    let numPositions;\n    let newIndices;\n\n    if (closeTop && closeBottom) {\n      const topBottomPositions = edgePoints.concat(edgePoints);\n\n      numPositions = topBottomPositions.length / 3;\n\n      newIndices = IndexDatatype.createTypedArray(\n        numPositions,\n        indices.length * 2\n      );\n      newIndices.set(indices);\n      const ilength = indices.length;\n\n      const length = numPositions / 2;\n\n      for (i = 0; i < ilength; i += 3) {\n        const i0 = newIndices[i] + length;\n        const i1 = newIndices[i + 1] + length;\n        const i2 = newIndices[i + 2] + length;\n\n        newIndices[i + ilength] = i2;\n        newIndices[i + 1 + ilength] = i1;\n        newIndices[i + 2 + ilength] = i0;\n      }\n\n      topGeo.attributes.position.values = topBottomPositions;\n      if (perPositionHeight && vertexFormat.normal) {\n        const normals = topGeo.attributes.normal.values;\n        topGeo.attributes.normal.values = new Float32Array(\n          topBottomPositions.length\n        );\n        topGeo.attributes.normal.values.set(normals);\n      }\n\n      if (vertexFormat.st && defined(textureCoordinates)) {\n        const texcoords = topGeo.attributes.st.values;\n        topGeo.attributes.st.values = new Float32Array(numPositions * 2);\n        topGeo.attributes.st.values = texcoords.concat(texcoords);\n      }\n\n      topGeo.indices = newIndices;\n    } else if (closeBottom) {\n      numPositions = edgePoints.length / 3;\n      newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\n\n      for (i = 0; i < indices.length; i += 3) {\n        newIndices[i] = indices[i + 2];\n        newIndices[i + 1] = indices[i + 1];\n        newIndices[i + 2] = indices[i];\n      }\n\n      topGeo.indices = newIndices;\n    }\n\n    geos.topAndBottom = new GeometryInstance({\n      geometry: topGeo,\n    });\n  }\n\n  let outerRing = hierarchy.outerRing;\n  let tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n  let positions2D = tangentPlane.projectPointsOntoPlane(\n    outerRing,\n    createGeometryFromPositionsExtrudedPositions\n  );\n\n  let windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n  if (windingOrder === WindingOrder.CLOCKWISE) {\n    outerRing = outerRing.slice().reverse();\n  }\n\n  let wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n    outerRing,\n    textureCoordinates,\n    ellipsoid,\n    granularity,\n    perPositionHeight,\n    arcType\n  );\n  geos.walls.push(\n    new GeometryInstance({\n      geometry: wallGeo,\n    })\n  );\n\n  const holes = hierarchy.holes;\n  for (i = 0; i < holes.length; i++) {\n    let hole = holes[i];\n\n    tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n    positions2D = tangentPlane.projectPointsOntoPlane(\n      hole,\n      createGeometryFromPositionsExtrudedPositions\n    );\n\n    windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n    if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n      hole = hole.slice().reverse();\n    }\n\n    wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n      hole,\n      textureCoordinates,\n      ellipsoid,\n      granularity,\n      perPositionHeight,\n      arcType\n    );\n    geos.walls.push(\n      new GeometryInstance({\n        geometry: wallGeo,\n      })\n    );\n  }\n\n  return geos;\n}\n\n/**\n * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias PolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n *\n * @see PolygonGeometry#createGeometry\n * @see PolygonGeometry#fromPositions\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n *\n * @example\n * // 1. create a polygon from points\n * const polygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * // 2. create a nested polygon with holes\n * const polygonWithHole = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -109.0, 30.0,\n *       -95.0, 30.0,\n *       -95.0, 40.0,\n *       -109.0, 40.0\n *     ]),\n *     [new Cesium.PolygonHierarchy(\n *       Cesium.Cartesian3.fromDegreesArray([\n *         -107.0, 31.0,\n *         -107.0, 39.0,\n *         -97.0, 39.0,\n *         -97.0, 31.0\n *       ]),\n *       [new Cesium.PolygonHierarchy(\n *         Cesium.Cartesian3.fromDegreesArray([\n *           -105.0, 33.0,\n *           -99.0, 33.0,\n *           -99.0, 37.0,\n *           -105.0, 37.0\n *         ]),\n *         [new Cesium.PolygonHierarchy(\n *           Cesium.Cartesian3.fromDegreesArray([\n *             -103.0, 34.0,\n *             -101.0, 34.0,\n *             -101.0, 36.0,\n *             -103.0, 36.0\n *           ])\n *         )]\n *       )]\n *     )]\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n *\n * // 3. create extruded polygon\n * const extrudedPolygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   ),\n *   extrudedHeight: 300000\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n */\nfunction PolygonGeometry(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  if (\n    defined(options.perPositionHeight) &&\n    options.perPositionHeight &&\n    defined(options.height)\n  ) {\n    throw new DeveloperError(\n      \"Cannot use both options.perPositionHeight and options.height\"\n    );\n  }\n  if (\n    defined(options.arcType) &&\n    options.arcType !== ArcType.GEODESIC &&\n    options.arcType !== ArcType.RHUMB\n  ) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const stRotation = defaultValue(options.stRotation, 0.0);\n  const textureCoordinates = options.textureCoordinates;\n  const perPositionHeight = defaultValue(options.perPositionHeight, false);\n  const perPositionHeightExtrude =\n    perPositionHeight && defined(options.extrudedHeight);\n  let height = defaultValue(options.height, 0.0);\n  let extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  if (!perPositionHeightExtrude) {\n    const h = Math.max(height, extrudedHeight);\n    extrudedHeight = Math.min(height, extrudedHeight);\n    height = h;\n  }\n\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._granularity = granularity;\n  this._stRotation = stRotation;\n  this._height = height;\n  this._extrudedHeight = extrudedHeight;\n  this._closeTop = defaultValue(options.closeTop, true);\n  this._closeBottom = defaultValue(options.closeBottom, true);\n  this._polygonHierarchy = polygonHierarchy;\n  this._perPositionHeight = perPositionHeight;\n  this._perPositionHeightExtrude = perPositionHeightExtrude;\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createPolygonGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n  this._rectangle = undefined;\n  this._textureCoordinateRotationPoints = undefined;\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3\n    ) +\n    Ellipsoid.packedLength +\n    VertexFormat.packedLength +\n    (textureCoordinates\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\n        textureCoordinates,\n        Cartesian2\n      )\n      : 1) +\n    12;\n}\n\n/**\n * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {Number} [options.height=0.0] The height of the polygon.\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n * @returns {PolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.PolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    granularity: options.granularity,\n    perPositionHeight: options.perPositionHeight,\n    closeTop: options.closeTop,\n    closeBottom: options.closeBottom,\n    offsetAttribute: options.offsetAttribute,\n    arcType: options.arcType,\n    textureCoordinates: options.textureCoordinates,\n  };\n  return new PolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n  array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n  array[startingIndex++] = value._arcType;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n      value._textureCoordinates,\n      array,\n      startingIndex,\n      Cartesian2\n    );\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\n\n//Only used to avoid inability to default construct.\nconst dummyOptions = {\n  polygonHierarchy: {},\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonGeometry} [result] The object into which to store the result.\n */\nPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const height = array[startingIndex++];\n  const extrudedHeight = array[startingIndex++];\n  const granularity = array[startingIndex++];\n  const stRotation = array[startingIndex++];\n  const perPositionHeightExtrude = array[startingIndex++] === 1.0;\n  const perPositionHeight = array[startingIndex++] === 1.0;\n  const closeTop = array[startingIndex++] === 1.0;\n  const closeBottom = array[startingIndex++] === 1.0;\n  const shadowVolume = array[startingIndex++] === 1.0;\n  const offsetAttribute = array[startingIndex++];\n  const arcType = array[startingIndex++];\n  const textureCoordinates =\n    array[startingIndex] === -1.0\n      ? undefined\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\n        array,\n        startingIndex,\n        Cartesian2\n      );\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n\n  if (!defined(result)) {\n    result = new PolygonGeometry(dummyOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._granularity = granularity;\n  result._stRotation = stRotation;\n  result._perPositionHeightExtrude = perPositionHeightExtrude;\n  result._perPositionHeight = perPositionHeight;\n  result._closeTop = closeTop;\n  result._closeBottom = closeBottom;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n  result._arcType = arcType;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Returns the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle\n */\nPolygonGeometry.computeRectangle = function (options, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n  //>>includeStart('debug', pragmas.debug);\n  if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  return computeRectangle(\n    polygonHierarchy.positions,\n    ellipsoid,\n    arcType,\n    granularity,\n    result\n  );\n};\n\n/**\n * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const granularity = polygonGeometry._granularity;\n  const stRotation = polygonGeometry._stRotation;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const perPositionHeight = polygonGeometry._perPositionHeight;\n  const closeTop = polygonGeometry._closeTop;\n  const closeBottom = polygonGeometry._closeBottom;\n  const arcType = polygonGeometry._arcType;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n\n  const hasTextureCoordinates = defined(textureCoordinates);\n\n  let outerPositions = polygonHierarchy.positions;\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  const tangentPlane = EllipsoidTangentPlane.fromPoints(\n    outerPositions,\n    ellipsoid\n  );\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    hasTextureCoordinates,\n    tangentPlane.projectPointsOntoPlane.bind(tangentPlane),\n    !perPositionHeight,\n    ellipsoid\n  );\n\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n\n  const textureCoordinatePolygons = hasTextureCoordinates\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\n      textureCoordinates,\n      true,\n      dummyFunction,\n      false\n    ).polygons\n    : undefined;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n\n  outerPositions = hierarchy[0].outerRing;\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    tangentPlane.plane.normal,\n    tangentPlane.projectPointOntoPlane.bind(tangentPlane),\n    outerPositions,\n    stRotation,\n    scratchBoundingRectangle\n  );\n\n  const geometries = [];\n\n  const height = polygonGeometry._height;\n  const extrudedHeight = polygonGeometry._extrudedHeight;\n  const extrude =\n    polygonGeometry._perPositionHeightExtrude ||\n    !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n  const options = {\n    perPositionHeight: perPositionHeight,\n    vertexFormat: vertexFormat,\n    geometry: undefined,\n    tangentPlane: tangentPlane,\n    boundingRectangle: boundingRectangle,\n    ellipsoid: ellipsoid,\n    stRotation: stRotation,\n    textureCoordinates: undefined,\n    bottom: false,\n    top: true,\n    wall: false,\n    extrude: false,\n    arcType: arcType,\n  };\n\n  let i;\n\n  if (extrude) {\n    options.extrude = true;\n    options.top = closeTop;\n    options.bottom = closeBottom;\n    options.shadowVolume = polygonGeometry._shadowVolume;\n    options.offsetAttribute = polygonGeometry._offsetAttribute;\n    for (i = 0; i < polygons.length; i++) {\n      const splitGeometry = createGeometryFromPositionsExtruded(\n        ellipsoid,\n        polygons[i],\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n        granularity,\n        hierarchy[i],\n        perPositionHeight,\n        closeTop,\n        closeBottom,\n        vertexFormat,\n        arcType\n      );\n\n      let topAndBottom;\n      if (closeTop && closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          topAndBottom.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n      } else if (closeTop) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          height,\n          ellipsoid,\n          !perPositionHeight\n        );\n        options.geometry = topAndBottom.geometry;\n      } else if (closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          extrudedHeight,\n          ellipsoid,\n          true\n        );\n        options.geometry = topAndBottom.geometry;\n      }\n      if (closeTop || closeBottom) {\n        options.wall = false;\n        topAndBottom.geometry = computeAttributes(options);\n        geometries.push(topAndBottom);\n      }\n\n      const walls = splitGeometry.walls;\n      options.wall = true;\n      for (let k = 0; k < walls.length; k++) {\n        const wall = walls[k];\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          wall.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n        wall.geometry = computeAttributes(options);\n        geometries.push(wall);\n      }\n    }\n  } else {\n    for (i = 0; i < polygons.length; i++) {\n      const geometryInstance = new GeometryInstance({\n        geometry: PolygonGeometryLibrary.createGeometryFromPositions(\n          ellipsoid,\n          polygons[i],\n          hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n          granularity,\n          perPositionHeight,\n          vertexFormat,\n          arcType\n        ),\n      });\n      geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n        geometryInstance.geometry.attributes.position.values,\n        height,\n        ellipsoid,\n        !perPositionHeight\n      );\n      options.geometry = geometryInstance.geometry;\n\n      geometryInstance.geometry = computeAttributes(options);\n\n      if (defined(polygonGeometry._offsetAttribute)) {\n        const length =\n          geometryInstance.geometry.attributes.position.values.length;\n        const offsetValue =\n          polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n            ? 0\n            : 1;\n        const applyOffset = new Uint8Array(length / 3).fill(offsetValue);\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n          {\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: applyOffset,\n          }\n        );\n      }\n\n      geometries.push(geometryInstance);\n    }\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  const attributes = geometry.attributes;\n  const boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values\n  );\n\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n    offsetAttribute: polygonGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nPolygonGeometry.createShadowVolume = function (\n  polygonGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = polygonGeometry._granularity;\n  const ellipsoid = polygonGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new PolygonGeometry({\n    polygonHierarchy: polygonGeometry._polygonHierarchy,\n    ellipsoid: ellipsoid,\n    stRotation: polygonGeometry._stRotation,\n    granularity: granularity,\n    perPositionHeight: false,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n    arcType: polygonGeometry._arcType,\n  });\n};\n\nfunction textureCoordinateRotationPoints(polygonGeometry) {\n  const stRotation = -polygonGeometry._stRotation;\n  if (stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const positions = polygonGeometry._polygonHierarchy.positions;\n  const boundingRectangle = polygonGeometry.rectangle;\n  return Geometry._textureCoordinateRotationPoints(\n    positions,\n    stRotation,\n    ellipsoid,\n    boundingRectangle\n  );\n}\n\nObject.defineProperties(PolygonGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        const positions = this._polygonHierarchy.positions;\n        this._rectangle = computeRectangle(\n          positions,\n          this._ellipsoid,\n          this._arcType,\n          this._granularity\n        );\n      }\n\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!defined(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default PolygonGeometry;\n","import { render } from \"./dynamic_building.vue?vue&type=template&id=07106fe7&scoped=true\"\nimport script from \"./dynamic_building.vue?vue&type=script&lang=js\"\nexport * from \"./dynamic_building.vue?vue&type=script&lang=js\"\n\nimport \"./dynamic_building.vue?vue&type=style&index=0&id=07106fe7&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-07106fe7\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","scratchCarto1","Cartographic","scratchCarto2","adjustPosHeightsForNormal","position","p1","p2","ellipsoid","carto1","cartesianToCartographic","height","p1Carto","cartographicToCartesian","p2Carto","scratchBoundingRectangle","BoundingRectangle","scratchPosition","Cartesian3","scratchNormal","scratchTangent","scratchBitangent","p1Scratch","p2Scratch","scratchPerPosNormal","scratchPerPosTangent","scratchPerPosBitangent","appendTextureCoordinatesOrigin","Cartesian2","appendTextureCoordinatesCartesian2","appendTextureCoordinatesCartesian3","appendTextureCoordinatesQuaternion","Quaternion","appendTextureCoordinatesMatrix3","Matrix3","tangentMatrixScratch","computeAttributes","options","vertexFormat","geometry","shadowVolume","flatPositions","attributes","values","flatTexcoords","defined","st","undefined","length","wall","top","bottom","normal","tangent","bitangent","boundingRectangle","tangentPlane","stRotation","perPositionHeight","origin","x","y","textureCoordinates","Float32Array","normals","tangents","bitangents","extrudeNormals","textureCoordIndex","attrIndex","recomputeNormal","textureMatrix","tangentRotationMatrix","rotation","_plane","bottomOffset","bottomOffset2","i","p","scaleToGeodeticSurface","projectPointOntoPlane","attrIndex1","attrIndex2","CesiumMath","geodeticSurfaceNormal","z","GeometryAttribute","componentDatatype","ComponentDatatype","componentsPerAttribute","extrudeDirection","extrude","offsetAttribute","size","Uint8Array","GeometryOffsetAttribute","fill","offsetValue","applyOffset","startCartographicScratch","endCartographicScratch","idlCross","westOverIDL","eastOverIDL","ellipsoidGeodesic","EllipsoidGeodesic","computeRectangle","positions","arcType","granularity","result","defaultValue","Rectangle","west","north","south","east","ArcType","equals","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","inverseChordLength","maximumRadius","positionsLength","swap","endCartographic","startCartographic","setEndPoints","interpolateAndGrowRectangle","interpolatedCartographicScratch","segmentLength","surfaceDistance","numPoints","Math","ceil","subsegmentDistance","interpolationDistance","interpolatedCartographic","interpolateUsingSurfaceDistance","longitude","latitude","min","max","lonAdjusted","createGeometryFromPositionsExtrudedPositions","createGeometryFromPositionsExtruded","polygon","hierarchy","closeTop","closeBottom","geos","walls","topGeo","PolygonGeometryLibrary","edgePoints","indices","numPositions","newIndices","topBottomPositions","concat","IndexDatatype","set","ilength","i0","i1","i2","texcoords","topAndBottom","GeometryInstance","outerRing","EllipsoidTangentPlane","positions2D","projectPointsOntoPlane","windingOrder","PolygonPipeline","WindingOrder","slice","reverse","wallGeo","push","holes","hole","PolygonGeometry","Check","polygonHierarchy","DeveloperError","VertexFormat","Ellipsoid","perPositionHeightExtrude","extrudedHeight","h","this","_vertexFormat","_ellipsoid","_granularity","_stRotation","_height","_extrudedHeight","_closeTop","_closeBottom","_polygonHierarchy","_perPositionHeight","_perPositionHeightExtrude","_shadowVolume","_workerName","_offsetAttribute","_arcType","_rectangle","_textureCoordinateRotationPoints","_textureCoordinates","packedLength","fromPositions","newOptions","pack","value","array","startingIndex","scratchEllipsoid","scratchVertexFormat","dummyOptions","textureCoordinateRotationPoints","polygonGeometry","rectangle","Geometry","unpack","createGeometry","hasTextureCoordinates","outerPositions","results","bind","polygons","dummyFunction","identity","textureCoordinatePolygons","plane","geometries","splitGeometry","k","geometryInstance","GeometryPipeline","Float64Array","boundingSphere","BoundingSphere","primitiveType","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","Object","defineProperties","prototype","get","building","require","mounted","init","methods","viewer","Viewer","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","fragmentShaderSource","GeoJsonDataSource","then","dataSource","entities","geometryInstances","entity","getValue","random","primitive","primitives","add","Primitive","asynchronous","appearance","MaterialAppearance","material","Material","translucent","fabric","uniforms","color","Color","offset1","offset2","source","preUpdate","addEventListener","offset","center","camera","lookAt","lookAtTransform","Matrix4","__exports__","render"],"sourceRoot":""}