{"version":3,"file":"js/9127.5a06cd22.js","mappings":"wOACOA,MAAM,a,UAAYC,EAAAA,EAAAA,GAAwB,UAAhBC,GAAG,KAAG,W,GAAdC,G,0CAAvBC,EAAAA,EAAAA,IAAqD,MAArDC,EAAqD,E,2BCDvD,MAAMC,EAELC,YAAaC,EAAQ,IAAKC,EAAS,KAElC,MAAMC,EAASC,SAASC,cAAe,UACvCF,EAAOF,MAAQA,EACfE,EAAOD,OAASA,EAEhB,MAAMI,EAAUH,EAAOI,WAAY,MACnCD,EAAQE,UAAY,mBACpBF,EAAQG,SAAU,EAAG,EAAGR,EAAOC,GAE/B,IAAM,IAAIQ,EAAI,EAAGA,EAAI,IAAMA,IAAO,CAEjC,MAAMC,EAAIC,KAAKC,SAAWZ,EACpBa,EAAIF,KAAKC,SAAWX,EACpBa,EAAoB,EAAhBH,KAAKC,SAAe,EAE9B,IAAIG,EAAqB,EAAhBJ,KAAKC,SAAe,EACzBI,EAAqB,EAAhBL,KAAKC,SAAe,EACzBK,EAAK,IAET,MAAMC,EAAIP,KAAKQ,KAAMJ,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAE9CF,GAAMG,EAAGF,GAAME,EAAGD,GAAMC,EAExBb,EAAQE,UAAY,QAAgB,IAALQ,EAAW,KAAQ,KAAa,IAALC,EAAW,KAAQ,IAAa,IAALC,EAAa,IAClGZ,EAAQe,YACRf,EAAQgB,IAAKX,EAAGG,EAAGC,EAAG,EAAa,EAAVH,KAAKW,IAC9BjB,EAAQkB,MAET,CAEA,OAAOrB,CAER,E,kBCvBD,MAAMsB,UAAmBC,EAAAA,IAExB1B,YAAa2B,GAEZC,MAAOD,GAEPE,KAAKC,KAAOC,EAAAA,GAEb,CAIAC,MAAOC,GAEN,MAGCC,GAAwB,EAGxBC,EAAkB,EAClBC,EAAmB,EACnBC,EAAoB,EACpBC,EAAoB,EACpBC,EAAa,SAAWC,EAAiBC,GAExC,OAASD,GAER,KAAKL,EAAiBO,QAAQC,MAAO,iCAAoCF,GAAO,KAC/E,MACD,KAAKL,EAAkBM,QAAQC,MAAO,kCAAqCF,GAAO,KACjF,MACD,KAAKJ,EAAmBK,QAAQC,MAAO,sCAAyCF,GAAO,KACtF,MACD,QACA,KAAKH,EAAmBI,QAAQC,MAAO,6BAAgCF,GAAO,KAI/E,OAAOP,CAER,EAWAU,EAAyB,EACzBC,EAAoB,EACpBC,EAAwB,EAExBC,EAAU,KAEVC,EAAQ,SAAWf,EAAQgB,EAAWC,GAErC,MAAMC,EAAY,IAElBF,EAAcA,GAAY,KAC1B,IAAIG,EAAInB,EAAOoB,IACd3C,GAAM,EAAG4C,EAAM,EAAGC,EAAI,GACtBC,EAAQC,OAAOC,aAAaC,MAAO,KAAM,IAAIC,YAAa3B,EAAO4B,SAAUT,EAAGA,EAAID,KAEnF,MAAU,GAAMzC,EAAI8C,EAAMM,QAASf,KAAmBO,EAAML,GAAiBG,EAAInB,EAAO8B,WAEvFR,GAAKC,EAAOF,GAAOE,EAAMQ,OACzBZ,GAAKD,EACLK,GAASC,OAAOC,aAAaC,MAAO,KAAM,IAAIC,YAAa3B,EAAO4B,SAAUT,EAAGA,EAAID,KAIpF,OAAO,EAAIzC,KAQL,IAAUwC,IAAUjB,EAAOoB,KAAOC,EAAM5C,EAAI,GAC1C6C,EAAIC,EAAMS,MAAO,EAAGvD,GAM7B,EAGAwD,EAAkB,SAAWjC,GAI5B,MAAMkC,EAAiB,YACtBC,EAAW,oCACXC,EAAc,uCACdC,EAAY,uBACZC,EAAgB,oCAGhBC,EAAS,CAERC,MAAO,EAEPC,OAAQ,GAERC,SAAU,GAEVC,YAAa,OAEbC,OAAQ,GAERC,MAAO,EAEPC,SAAU,EAEV9E,MAAO,EAAGC,OAAQ,GAIpB,IAAI8E,EAAMC,EAEV,GAAKhD,EAAOoB,KAAOpB,EAAO8B,cAAkBiB,EAAOhC,EAAOf,IAEzD,OAAOM,EAAYJ,EAAiB,mBAKrC,KAAS8C,EAAQD,EAAKC,MAAOd,IAE5B,OAAO5B,EAAYF,EAAmB,qBAIvCmC,EAAOC,OAAS7B,EAChB4B,EAAOI,YAAcK,EAAO,GAC5BT,EAAOE,QAAUM,EAAO,KAExB,MAAQ,EAAO,CAGd,GADAA,EAAOhC,EAAOf,IACT,IAAU+C,EAAO,MAGtB,GAFAR,EAAOE,QAAUM,EAAO,KAEnB,MAAQA,EAAKE,OAAQ,IAkC1B,IA3BKD,EAAQD,EAAKC,MAAOb,MAExBI,EAAOM,MAAQK,WAAYF,EAAO,GAAK,MAInCA,EAAQD,EAAKC,MAAOZ,MAExBG,EAAOO,SAAWI,WAAYF,EAAO,GAAK,MAItCA,EAAQD,EAAKC,MAAOX,MAExBE,EAAOC,OAAS5B,EAChB2B,EAAOK,OAASI,EAAO,KAInBA,EAAQD,EAAKC,MAAOV,MAExBC,EAAOC,OAAS3B,EAChB0B,EAAOtE,OAASkF,SAAUH,EAAO,GAAK,IACtCT,EAAOvE,MAAQmF,SAAUH,EAAO,GAAK,KAI/BT,EAAOC,MAAQ5B,GAAyB2B,EAAOC,MAAQ3B,EAA0B,WAhCvF0B,EAAOG,UAAYK,EAAO,IAkC5B,CAEA,OAASR,EAAOC,MAAQ5B,EAMf2B,EAAOC,MAAQ3B,EAMjB0B,EAJCjC,EAAYF,EAAmB,gCAN/BE,EAAYF,EAAmB,2BAYxC,EAEAgD,EAAsB,SAAWpD,EAAQqD,EAAGC,GAE3C,MAAMC,EAAiBF,EAEvB,GAEKE,EAAiB,GAASA,EAAiB,OAE3C,IAAMvD,EAAQ,IAAW,IAAMA,EAAQ,IAAyB,IAAdA,EAAQ,GAI9D,OAAO,IAAIwD,WAAYxD,GAIxB,GAAKuD,KAAuBvD,EAAQ,IAAO,EAAMA,EAAQ,IAExD,OAAOM,EAAYF,EAAmB,wBAIvC,MAAMqD,EAAY,IAAID,WAAY,EAAIH,EAAIC,GAE1C,IAAOG,EAAU1B,OAEhB,OAAOzB,EAAYD,EAAmB,mCAIvC,IAAIqD,EAAS,EAAGtC,EAAM,EAEtB,MAAMuC,EAAU,EAAIJ,EACdK,EAAY,IAAIJ,WAAY,GAC5BK,EAAkB,IAAIL,WAAYG,GACxC,IAAIG,EAAgBR,EAGpB,MAAUQ,EAAgB,GAAS1C,EAAMpB,EAAO8B,WAAe,CAE9D,GAAKV,EAAM,EAAIpB,EAAO8B,WAErB,OAAOxB,EAAYJ,GASpB,GALA0D,EAAW,GAAM5D,EAAQoB,KACzBwC,EAAW,GAAM5D,EAAQoB,KACzBwC,EAAW,GAAM5D,EAAQoB,KACzBwC,EAAW,GAAM5D,EAAQoB,KAElB,GAAKwC,EAAW,IAAW,GAAKA,EAAW,KAAeA,EAAW,IAAO,EAAMA,EAAW,KAASL,EAE5G,OAAOjD,EAAYF,EAAmB,4BAMvC,IAAa2D,EAATC,EAAM,EAEV,MAAUA,EAAML,GAAevC,EAAMpB,EAAO8B,WAAe,CAE1DiC,EAAQ/D,EAAQoB,KAChB,MAAM6C,EAAeF,EAAQ,IAG7B,GAFKE,IAAeF,GAAS,KAEtB,IAAMA,GAAaC,EAAMD,EAAQJ,EAEvC,OAAOrD,EAAYF,EAAmB,qBAIvC,GAAK6D,EAAe,CAGnB,MAAMC,EAAYlE,EAAQoB,KAC1B,IAAM,IAAI3C,EAAI,EAAGA,EAAIsF,EAAOtF,IAE3BoF,EAAiBG,KAAWE,CAK9B,MAGCL,EAAgBM,IAAKnE,EAAO4B,SAAUR,EAAKA,EAAM2C,GAASC,GAC1DA,GAAOD,EAAO3C,GAAO2C,CAIvB,CAKA,MAAM7E,EAAIqE,EACV,IAAM,IAAI9E,EAAI,EAAGA,EAAIS,EAAGT,IAAO,CAE9B,IAAI2F,EAAM,EACVX,EAAWC,GAAWG,EAAiBpF,EAAI2F,GAC3CA,GAAOb,EACPE,EAAWC,EAAS,GAAMG,EAAiBpF,EAAI2F,GAC/CA,GAAOb,EACPE,EAAWC,EAAS,GAAMG,EAAiBpF,EAAI2F,GAC/CA,GAAOb,EACPE,EAAWC,EAAS,GAAMG,EAAiBpF,EAAI2F,GAC/CV,GAAU,CAEX,CAEAI,GAED,CAEA,OAAOL,CAER,EAEKY,EAAqB,SAAWC,EAAaC,EAAcC,EAAWC,GAE3E,MAAMC,EAAIJ,EAAaC,EAAe,GAChCI,EAAQhG,KAAKiG,IAAK,EAAKF,EAAI,KAAU,IAE3CF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMI,EAChEH,EAAWC,EAAa,GAAM,CAE/B,EAEMI,EAAoB,SAAWP,EAAaC,EAAcC,EAAWC,GAE1E,MAAMC,EAAIJ,EAAaC,EAAe,GAChCI,EAAQhG,KAAKiG,IAAK,EAAKF,EAAI,KAAU,IAG3CF,EAAWC,EAAa,GAAMK,EAAAA,IAAAA,YAAuBnG,KAAKoG,IAAKT,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMK,EAAAA,IAAAA,YAAuBnG,KAAKoG,IAAKT,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMK,EAAAA,IAAAA,YAAuBnG,KAAKoG,IAAKT,EAAaC,EAAe,GAAMI,EAAO,QACxGH,EAAWC,EAAa,GAAMK,EAAAA,IAAAA,YAAuB,EAEtD,EAEME,EAAY,IAAIxB,WAAYxD,GAClCgF,EAAU5D,IAAM,EAChB,MAAM6D,EAAmBhD,EAAiB+C,GAE1C,GAAK/E,IAAwBgF,EAAmB,CAE/C,MAAM5B,EAAI4B,EAAiBjH,MAC1BsF,EAAI2B,EAAiBhH,OACrBiH,EAAkB9B,EAAqB4B,EAAUpD,SAAUoD,EAAU5D,KAAOiC,EAAGC,GAEhF,GAAKrD,IAAwBiF,EAAkB,CAE9C,IAAIC,EAAMvC,EAAQ/C,EACduF,EAEJ,OAASxF,KAAKC,MAEb,KAAKwF,EAAAA,IAEJD,EAAcF,EAAgBnD,OAAS,EACvC,MAAMuD,EAAa,IAAIC,aAA4B,EAAdH,GAErC,IAAM,IAAII,EAAI,EAAGA,EAAIJ,EAAaI,IAEjCnB,EAAoBa,EAAqB,EAAJM,EAAOF,EAAgB,EAAJE,GAIzDL,EAAOG,EACPzF,EAAOwF,EAAAA,IACP,MAED,KAAKvF,EAAAA,IAEJsF,EAAcF,EAAgBnD,OAAS,EACvC,MAAM0D,EAAY,IAAI9D,YAA2B,EAAdyD,GAEnC,IAAM,IAAII,EAAI,EAAGA,EAAIJ,EAAaI,IAEjCX,EAAmBK,EAAqB,EAAJM,EAAOC,EAAe,EAAJD,GAIvDL,EAAOM,EACP5F,EAAOC,EAAAA,IACP,MAED,QAECW,QAAQC,MAAO,uCAAwCd,KAAKC,MAC5D,MAIF,MAAO,CACN7B,MAAOqF,EAAGpF,OAAQqF,EAClB6B,KAAMA,EACN5C,OAAQ0C,EAAiBxC,OACzBI,MAAOoC,EAAiBpC,MACxBC,SAAUmC,EAAiBnC,SAC3BF,OAAQA,EACR/C,KAAMA,EAGR,CAED,CAEA,OAAO,IAER,CAEA6F,YAAaC,GAGZ,OADA/F,KAAKC,KAAO8F,EACL/F,IAER,CAEAgG,KAAMC,EAAKC,EAAQC,EAAYC,GAE9B,SAASC,EAAgBC,EAASC,GAEjC,OAASD,EAAQrG,MAEhB,KAAKwF,EAAAA,IAEJa,EAAQE,SAAWC,EAAAA,IACnBH,EAAQI,UAAYC,EAAAA,IACpBL,EAAQM,UAAYD,EAAAA,IACpBL,EAAQO,iBAAkB,EAC1BP,EAAQQ,OAAQ,EAChB,MAED,KAAK5G,EAAAA,IAEJoG,EAAQE,SAAWC,EAAAA,IACnBH,EAAQI,UAAYC,EAAAA,IACpBL,EAAQM,UAAYD,EAAAA,IACpBL,EAAQO,iBAAkB,EAC1BP,EAAQQ,OAAQ,EAChB,MAIGZ,GAASA,EAAQI,EAASC,EAEhC,CAEA,OAAOxG,MAAMiG,KAAMC,EAAKI,EAAgBF,EAAYC,EAErD,EF9cD,OACEW,UACE/G,KAAKgH,MACP,EACAC,QAAS,CACPD,OACE,MAAM1I,EAASC,SAAS2I,cAAc,MAEhCC,EAAQ,IAAIC,EAAAA,IACZC,EAAS,IAAID,EAAAA,IAAwB,GAAI9I,EAAOgJ,YAAchJ,EAAOiJ,aAAc,GAAK,KAC9FF,EAAOG,SAASC,EAAI,IACpBN,EAAMO,IAAIL,GAEV,MAAMM,EAAW,IAAIP,EAAAA,IAAoB,CAAE9I,OAAQA,EAAQsJ,WAAW,IACtED,EAASE,QAAQvJ,EAAOwJ,WAAYxJ,EAAOyJ,aAC3CJ,EAASK,cAAcC,OAAOC,kBAC9BP,EAASQ,eAAiBf,EAAAA,IAE1B,MAAMgB,EAAW,IAAIC,EAAAA,EAAchB,EAAQM,EAASW,YAE9ChC,EAAU,IAAIc,EAAAA,IAAoB,IAAIlJ,GAC5CoI,EAAQiC,MAAQnB,EAAAA,IAChBd,EAAQkC,MAAQpB,EAAAA,IAChBd,EAAQmC,OAAO3J,EAAI,GACnBwH,EAAQmC,OAAOxJ,EAAI,EAEnB,MAAMyJ,EAAe,IAAItB,EAAAA,IAAqBO,GAuB9C,SAASgB,IACP,GAAIC,EAA4BjB,GAAW,CACzC,MAAMrJ,EAASqJ,EAASW,WACxBjB,EAAOwB,OAASvK,EAAOgJ,YAAchJ,EAAOiJ,aAC5CF,EAAOyB,wBACT,CACAV,EAASW,SACTpB,EAASqB,OAAO7B,EAAOE,GACvB4B,sBAAsBN,EACxB,CAEA,SAASC,EAA4BjB,GACnC,MAAMrJ,EAASqJ,EAASW,WAClBlK,EAAQE,EAAOgJ,YACfjJ,EAASC,EAAOiJ,aAChB2B,EAAa5K,EAAOF,QAAUA,GAASE,EAAOD,SAAWA,EAI/D,OAHI6K,GACFvB,EAASE,QAAQzJ,EAAOC,GAAQ,GAE3B6K,CACT,EA1CA,IAAItJ,GAAauJ,QAAQ,iBAAiBnD,KAAK,sBAAsB,SAAUoD,GAC7E,MAAMC,EAASX,EAAaY,YAAYF,GAClCG,EAAe,CACnBC,UAAW,EACXC,kBAAmB,GACnBC,UAAW,GACXC,UAAW,GACXC,MAAO,QACPC,UAAWvD,EACXwD,YAAa,IAAI1C,EAAAA,IAAc,IAAM,KACrC2C,OAAQV,EAAO/C,SAEjB8C,EAAOY,QAAU5C,EAAAA,IACjBD,EAAM8C,WAAab,EAEnB,MAAMc,EAAW,IAAI9C,EAAAA,IAAqB,IAAK,GAAI,IAC7C+C,EAAW,IAAI/C,EAAAA,IAA2BmC,GAC1Ca,EAAO,IAAIhD,EAAAA,IAAW8C,EAAUC,GACtChD,EAAMO,IAAI0C,EACZ,IAEAzB,GAsBF,I,WGxEJ,MAAM0B,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASrB,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/three/realistic_material.vue","webpack://webgis/./node_modules/three/examples/jsm/textures/FlakesTexture.js","webpack://webgis/./node_modules/three/examples/jsm/loaders/RGBELoader.js","webpack://webgis/./src/components/three/realistic_material.vue?e4e8"],"sourcesContent":["<template>\r\n  <div class=\"container\"><canvas id=\"c\"></canvas></div>\r\n</template>\r\n<script>\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { FlakesTexture } from 'three/examples/jsm/textures/FlakesTexture';\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader'\r\n\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      const canvas = document.querySelector('#c')\r\n\r\n      const scene = new THREE.Scene()\r\n      const camera = new THREE.PerspectiveCamera(45, canvas.clientWidth / canvas.clientHeight, 0.1, 10000)\r\n      camera.position.z = 500\r\n      scene.add(camera)\r\n\r\n      const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\r\n      renderer.setSize(canvas.innerWidth, canvas.innerHeight)\r\n      renderer.setPixelRatio(window.devicePixelRatio)\r\n      renderer.outputEncoding = THREE.sRGBEncoding;\r\n\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n      const texture = new THREE.CanvasTexture(new FlakesTexture());\r\n      texture.wrapS = THREE.RepeatWrapping;\r\n      texture.wrapT = THREE.RepeatWrapping;\r\n      texture.repeat.x = 10;\r\n      texture.repeat.y = 6;\r\n\r\n      const envmaploader = new THREE.PMREMGenerator(renderer);\r\n      new RGBELoader().setPath('./SampleData/').load('garden_nook_2k.hdr', function (hdrmap) {\r\n        const envmap = envmaploader.fromCubemap(hdrmap);\r\n        const ballMaterial = {\r\n          clearcoat: 1.0,\r\n          cleacoatRoughness: 0.1,\r\n          metalness: 0.9,\r\n          roughness: 0.5,\r\n          color: 0x8418ca,\r\n          normalMap: texture,\r\n          normalScale: new THREE.Vector2(0.15, 0.15),\r\n          envMap: envmap.texture\r\n        };\r\n        hdrmap.mapping = THREE.EquirectangularReflectionMapping;\r\n        scene.background = hdrmap;\r\n\r\n        const geometry = new THREE.SphereGeometry(100, 64, 64)\r\n        const material = new THREE.MeshPhysicalMaterial(ballMaterial);\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        scene.add(mesh);\r\n      })\r\n\r\n      animate();\r\n      function animate() {\r\n        if (resizeRendererToDisplaySize(renderer)) {\r\n          const canvas = renderer.domElement\r\n          camera.aspect = canvas.clientWidth / canvas.clientHeight\r\n          camera.updateProjectionMatrix()\r\n        }\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        requestAnimationFrame(animate);\r\n      }\r\n\r\n      function resizeRendererToDisplaySize(renderer) {\r\n        const canvas = renderer.domElement\r\n        const width = canvas.clientWidth\r\n        const height = canvas.clientHeight\r\n        const needResize = canvas.width !== width || canvas.height !== height\r\n        if (needResize) {\r\n          renderer.setSize(width, height, false)\r\n        }\r\n        return needResize\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.container {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n#c {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0%;\r\n}\r\n</style>\r\n","class FlakesTexture {\n\n\tconstructor( width = 512, height = 512 ) {\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.fillStyle = 'rgb(127,127,255)';\n\t\tcontext.fillRect( 0, 0, width, height );\n\n\t\tfor ( let i = 0; i < 4000; i ++ ) {\n\n\t\t\tconst x = Math.random() * width;\n\t\t\tconst y = Math.random() * height;\n\t\t\tconst r = Math.random() * 3 + 3;\n\n\t\t\tlet nx = Math.random() * 2 - 1;\n\t\t\tlet ny = Math.random() * 2 - 1;\n\t\t\tlet nz = 1.5;\n\n\t\t\tconst l = Math.sqrt( nx * nx + ny * ny + nz * nz );\n\n\t\t\tnx /= l; ny /= l; nz /= l;\n\n\t\t\tcontext.fillStyle = 'rgb(' + ( nx * 127 + 127 ) + ',' + ( ny * 127 + 127 ) + ',' + ( nz * 255 ) + ')';\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc( x, y, r, 0, Math.PI * 2 );\n\t\t\tcontext.fill();\n\n\t\t}\n\n\t\treturn canvas;\n\n\t}\n\n}\n\nexport { FlakesTexture };\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, format, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\ttype = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\ttype = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n","import { render } from \"./realistic_material.vue?vue&type=template&id=5010464c&scoped=true\"\nimport script from \"./realistic_material.vue?vue&type=script&lang=js\"\nexport * from \"./realistic_material.vue?vue&type=script&lang=js\"\n\nimport \"./realistic_material.vue?vue&type=style&index=0&id=5010464c&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\Z-Personal\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5010464c\"]])\n\nexport default __exports__"],"names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","FlakesTexture","constructor","width","height","canvas","document","createElement","context","getContext","fillStyle","fillRect","i","x","Math","random","y","r","nx","ny","nz","l","sqrt","beginPath","arc","PI","fill","RGBELoader","DataTextureLoader","manager","super","this","type","HalfFloatType","parse","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","count","ptr","isEncodedRun","byteValue","set","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","pow","RGBEByteToRGBHalf","DataUtils","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","FloatType","floatArray","Float32Array","j","halfArray","setDataType","value","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","LinearEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","flipY","mounted","init","methods","querySelector","scene","THREE","camera","clientWidth","clientHeight","position","z","add","renderer","antialias","setSize","innerWidth","innerHeight","setPixelRatio","window","devicePixelRatio","outputEncoding","controls","OrbitControls","domElement","wrapS","wrapT","repeat","envmaploader","animate","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","update","render","requestAnimationFrame","needResize","setPath","hdrmap","envmap","fromCubemap","ballMaterial","clearcoat","cleacoatRoughness","metalness","roughness","color","normalMap","normalScale","envMap","mapping","background","geometry","material","mesh","__exports__"],"sourceRoot":""}