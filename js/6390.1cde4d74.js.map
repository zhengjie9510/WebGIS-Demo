{"version":3,"file":"js/6390.1cde4d74.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,kNAQF,SAASC,EAAUC,GACjB,OAAOC,MAAMD,GACVE,MAAKC,IACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAO,uBAAsBF,EAASG,UAElD,OAAOH,EAASI,MAAM,IAEvBC,OAAMC,IACLC,QAAQD,MAAM,SAAUA,EAAM,GAEpC,CAGA,OACEE,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,MAAME,EAAS,IAAIC,EAAAA,EAAc,kBAAmB,CAClDC,gBAAiB,IAAID,EAAAA,EAAkC,CACrDhB,IAAK,6DACLkB,WAAY,CAAC,IAAK,IAAK,IAAK,SAG5BF,EAAAA,EAAAA,oCAEFD,EAAOI,gBAAkBC,OAAOC,kBAElCN,EAAOO,MAAMC,kBAAkBC,KAAKC,SAAU,EAE9C1B,EAAU2B,wCACPxB,MAAKyB,IACJ,IAAIC,EAAY,IAAIC,aAAaF,EAAKC,WAClCE,EAAS,IAAIC,WAAWJ,EAAKG,QAE7BE,EAAa,IAAIhB,EAAAA,EAA0B,CAC7CiB,SAAU,IAAIjB,EAAAA,EAAyB,CACrCkB,kBAAmBlB,EAAAA,EAAAA,OACnBmB,uBAAwB,EACxBC,OAAQR,IAEVS,MAAO,IAAIrB,EAAAA,EAAyB,CAClCkB,kBAAmBlB,EAAAA,EAAAA,MACnBmB,uBAAwB,EACxBC,OAAQN,MAKRQ,EAAU,IAAIC,YAAYZ,EAAKW,SAE/BE,EAAW,IAAIxB,EAAAA,EAAgB,CACjCgB,WAAYA,EACZM,QAASA,EACTG,cAAezB,EAAAA,EAAAA,UACf0B,eAAgB1B,EAAAA,EAAAA,aAAmCY,KAGrDY,EAAWxB,EAAAA,EAAAA,cAAsCwB,GAGjD,IAAIG,EAAc3B,EAAAA,EAAAA,wBAChBA,EAAAA,EAAAA,YAA8BW,EAAKiB,SAASC,EAAGlB,EAAKiB,SAASE,IAI3DC,EAAW,IAAI/B,EAAAA,EAAwB,CACzCwB,SAAUA,EACVG,YAAaA,IAGf,SAASK,IACP,MAAO,mrBAoBT,CAEA,SAASC,IACP,MAAO,yUAQT,CAEA,IAAIC,EAAa,IAAIlC,EAAAA,EAA0B,CAC7CmC,aAAa,EACbC,mBAAoBJ,IACpBK,SAAU,IAAIrC,EAAAA,EAAgB,CAC5BmC,aAAa,EACbG,OAAQ,CACNC,KAAM,UACNC,OAAQP,OAGZQ,gBAAiBzC,EAAAA,EAAAA,gBAAAA,MACjB0C,YAAa,CACXC,SAAU3C,EAAAA,EAAAA,YACV4C,UAAW,CAAEnC,SAAS,GACtBoC,WAAW,KAIf,MAAMC,EAAY,IAAI9C,EAAAA,EAAiB,CACrC+C,kBAAmBhB,EACnBG,WAAYA,EACZc,cAAc,IAGhBjD,EAAOO,MAAM2C,WAAWC,IAAIJ,GAC5B,IAAIK,EAASnD,EAAAA,EAAAA,YAA8BW,EAAKiB,SAASC,EAAGlB,EAAKiB,SAASE,GACtEsB,EAAS,IACbrD,EAAOsD,OAAOC,oBAAoB,IAAItD,EAAAA,EAAsBmD,EAAQC,GAAS,CAAEG,SAAU,GAAI,GAEnG,I,WC1IJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/cesium/custom_geometry_1.vue","webpack://webgis/./src/components/cesium/custom_geometry_1.vue?a717"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport * as Cesium from 'cesium'\n\n\nfunction fetchJSON(url) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n}\n\n\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      const viewer = new Cesium.Viewer('cesiumContainer', {\n        imageryProvider: new Cesium.UrlTemplateImageryProvider({\n          url: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\",\n          subdomains: [\"a\", \"b\", \"c\", \"d\"],\n        })\n      })\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n\n      fetchJSON(process.env.BASE_URL + 'SampleData/surface.json')\n        .then(data => {\n          let positions = new Float32Array(data.positions)\n          let colors = new Uint8Array(data.colors)\n\n          let attributes = new Cesium.GeometryAttributes({\n            position: new Cesium.GeometryAttribute({\n              componentDatatype: Cesium.ComponentDatatype.DOUBLE,\n              componentsPerAttribute: 3,\n              values: positions,\n            }),\n            color: new Cesium.GeometryAttribute({\n              componentDatatype: Cesium.ComponentDatatype.FLOAT,\n              componentsPerAttribute: 4,\n              values: colors,\n            }),\n          })\n\n\n          let indices = new Uint32Array(data.indices)\n\n          let geometry = new Cesium.Geometry({\n            attributes: attributes,\n            indices: indices,\n            primitiveType: Cesium.PrimitiveType.TRIANGLES,\n            boundingSphere: Cesium.BoundingSphere.fromVertices(positions),\n          })\n\n          geometry = Cesium.GeometryPipeline.computeNormal(geometry)\n\n          //模型矩阵\n          let modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(\n            Cesium.Cartesian3.fromDegrees(data.centroid.x, data.centroid.y)\n          )\n\n          //四面体的实例\n          let instance = new Cesium.GeometryInstance({\n            geometry: geometry,\n            modelMatrix: modelMatrix,\n          })\n\n          function v_shader() {\n            return `\n            in vec3 position3DHigh;\n            in vec3 position3DLow;\n            in vec3 normal;\n            in vec4 color;\n            in float batchId;\n\n            out vec3 v_positionEC;\n            out vec3 v_normalEC;\n            out vec4 v_color;\n\n            void main()\n            {\n                vec4 p = czm_computePosition();\n\n                v_positionEC = (czm_modelViewRelativeToEye * p).xyz;      // position in eye coordinates\n                v_normalEC = czm_normal * normal;                         // normal in eye coordinates\n                v_color = color;\n                gl_Position = czm_modelViewProjectionRelativeToEye * p;\n            }`\n          }\n\n          function f_shader() {\n            return `\n            in vec4 v_color;\n            czm_material czm_getMaterial(czm_materialInput materialInput)\n            {\n                czm_material material = czm_getDefaultMaterial(materialInput);\n                material.diffuse = czm_gammaCorrect(1. - v_color.rgb/255.); \n                return material;\n            }`\n          }\n\n          let appearance = new Cesium.MaterialAppearance({\n            translucent: true,\n            vertexShaderSource: v_shader(),\n            material: new Cesium.Material({\n              translucent: false,\n              fabric: {\n                type: 'MyColor',\n                source: f_shader(),\n              }\n            }),\n            materialSupport: Cesium.MaterialAppearance.MaterialSupport.BASIC,\n            renderState: {\n              blending: Cesium.BlendingState.ALPHA_BLEND, //使用Alpha混合功能启用混合\n              depthTest: { enabled: true }, //深度检测\n              depthMask: true, //将深度值写入深度缓冲区\n            },\n          })\n\n          const primitive = new Cesium.Primitive({\n            geometryInstances: instance,\n            appearance: appearance,\n            asynchronous: false,\n          })\n\n          viewer.scene.primitives.add(primitive)\n          let center = Cesium.Cartesian3.fromDegrees(data.centroid.x, data.centroid.y)\n          let radius = 5000\n          viewer.camera.flyToBoundingSphere(new Cesium.BoundingSphere(center, radius), { duration: 0 })\n        });\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./custom_geometry_1.vue?vue&type=template&id=60980ce3&scoped=true\"\nimport script from \"./custom_geometry_1.vue?vue&type=script&lang=js\"\nexport * from \"./custom_geometry_1.vue?vue&type=script&lang=js\"\n\nimport \"./custom_geometry_1.vue?vue&type=style&index=0&id=60980ce3&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-60980ce3\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","fetchJSON","url","fetch","then","response","ok","Error","status","json","catch","error","console","mounted","this","init","methods","viewer","Cesium","imageryProvider","subdomains","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","process","data","positions","Float32Array","colors","Uint8Array","attributes","position","componentDatatype","componentsPerAttribute","values","color","indices","Uint32Array","geometry","primitiveType","boundingSphere","modelMatrix","centroid","x","y","instance","v_shader","f_shader","appearance","translucent","vertexShaderSource","material","fabric","type","source","materialSupport","renderState","blending","depthTest","depthMask","primitive","geometryInstances","asynchronous","primitives","add","center","radius","camera","flyToBoundingSphere","duration","__exports__","render"],"sourceRoot":""}