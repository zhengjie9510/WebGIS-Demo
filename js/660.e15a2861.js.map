{"version":3,"file":"js/660.e15a2861.js","mappings":"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","sources":["webpack://webgis/./src/components/cesium/radar_scan.vue","webpack://webgis/./src/components/cesium/radar_scan.vue?ea85","webpack://webgis/./node_modules/cesium/Source/Core/CircleGeometry.js"],"sourcesContent":["<template>\r\n  <div id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\r\nimport {\r\n  Viewer,\r\n  FeatureDetection,\r\n  Cartesian3,\r\n  GeometryInstance,\r\n  Primitive,\r\n  Material,\r\n  CircleGeometry,\r\n  MaterialAppearance,\r\n  VertexFormat,\r\n  Color,\r\n} from 'cesium'\r\nexport default {\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  methods: {\r\n    init() {\r\n      var viewer = new Viewer('cesiumContainer')\r\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\r\n        //判断是否支持图像渲染像素化处理\r\n        viewer.resolutionScale = window.devicePixelRatio\r\n      }\r\n      viewer.scene.postProcessStages.fxaa.enabled = true\r\n      // Create the scene.\r\n      var scene = viewer.scene\r\n      // Create the circle geometry.\r\n      var circleGeometry = new CircleGeometry({\r\n        center: Cartesian3.fromDegrees(114.0, 33.0),\r\n        radius: 250.0,\r\n        vertexFormat: VertexFormat.POSITION_AND_ST,\r\n      })\r\n      // Create a geometry instance using the circle geometry\r\n      // created above. We can also specify a color attribute,\r\n      // in this case, we're creating a translucent red color.\r\n      var redCircleInstance = new GeometryInstance({\r\n        geometry: circleGeometry,\r\n      })\r\n      // Add the geometry instance to primitives.\r\n      var primitive = scene.primitives.add(\r\n        new Primitive({\r\n          geometryInstances: redCircleInstance,\r\n          appearance: new MaterialAppearance({\r\n            material: new Material({\r\n              translucent: false,\r\n              fabric: {\r\n                uniforms: {\r\n                  color: new Color(0.0, 1.0, 0.0),\r\n                  rotate: 90.0,\r\n                  percent: 0.1,\r\n                },\r\n                source: `\r\n                  float get_angle(vec2 base,vec2 dir)\r\n                  { \r\n                    base = normalize(base);\r\n                    dir = normalize(dir);\r\n                    float angle = degrees(acos(abs(dot(dir,base))));\r\n                    if (dir.s > 0.0 && dir.t > 0.0){angle = angle;}\r\n                    else if (dir.s < 0.0 && dir.t > 0.0){angle = 180.0 - angle;}\r\n                    else if (dir.s < 0.0 && dir.t < 0.0){angle = 180.0 + angle;}\r\n                    else{angle = 360.0 - angle;}\r\n                    return angle;\r\n                  }\r\n\r\n                  uniform vec4 color;\r\n                  uniform float rotate;\r\n                  uniform float percent;\r\n                  czm_material czm_getMaterial(czm_materialInput materialInput)\r\n                  {\r\n                  czm_material material = czm_getDefaultMaterial(materialInput);\r\n                  material.diffuse = czm_gammaCorrect(color.rgb); \r\n\r\n                  vec2 st = materialInput.st;\r\n                  vec2 base = vec2(0.5,0.0);\r\n                  vec2 dir = st-vec2(0.5,0.5);\r\n                  float len = length(dir);\r\n                  if(len > 0.49){\r\n                    material.alpha = (len - 0.49)/0.01;\r\n                  }\r\n                  else{\r\n                    float angle = get_angle(base,dir);\r\n                    material.alpha = (mod(angle+rotate,360.0)-(1.0-percent)*360.0)/(360.0*percent);\r\n                  } \r\n                  material.emission=vec3(0.5);\r\n                  return material;\r\n                }`,\r\n              },\r\n            }),\r\n          }),\r\n        })\r\n      )\r\n      viewer.camera.flyToBoundingSphere(\r\n        CircleGeometry.createGeometry(circleGeometry).boundingSphere\r\n      )\r\n      viewer.scene.preUpdate.addEventListener(function() {\r\n        var rotate = primitive.appearance.material.uniforms.rotate\r\n        rotate -= 1\r\n        primitive.appearance.material.uniforms.rotate = rotate\r\n      })\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#cesiumContainer {\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n</style>\r\n","import { render } from \"./radar_scan.vue?vue&type=template&id=83277918&scoped=true\"\nimport script from \"./radar_scan.vue?vue&type=script&lang=js\"\nexport * from \"./radar_scan.vue?vue&type=script&lang=js\"\n\nimport \"./radar_scan.vue?vue&type=style&index=0&id=83277918&lang=scss&scoped=true\"\n\nimport exportComponent from \"D:\\\\Documents\\\\GitHub\\\\webgis\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-83277918\"]])\n\nexport default __exports__","import Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport EllipseGeometry from \"./EllipseGeometry.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\n/**\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias CircleGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\n * @param {Number} options.radius The radius in meters.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n *\n * @exception {DeveloperError} radius must be greater than zero.\n * @exception {DeveloperError} granularity must be greater than zero.\n *\n * @see CircleGeometry.createGeometry\n * @see Packable\n *\n * @example\n * // Create a circle.\n * const circle = new Cesium.CircleGeometry({\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\n *   radius : 100000.0\n * });\n * const geometry = Cesium.CircleGeometry.createGeometry(circle);\n */\nfunction CircleGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const radius = options.radius;\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.number(\"radius\", radius);\n  //>>includeEnd('debug');\n\n  const ellipseGeometryOptions = {\n    center: options.center,\n    semiMajorAxis: radius,\n    semiMinorAxis: radius,\n    ellipsoid: options.ellipsoid,\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    granularity: options.granularity,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    shadowVolume: options.shadowVolume,\n  };\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\n  this._workerName = \"createCircleGeometry\";\n}\n\n/**\n * The number of elements used to pack the object into an array.\n * @type {Number}\n */\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CircleGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCircleGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  //>>includeEnd('debug');\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\n};\n\nconst scratchEllipseGeometry = new EllipseGeometry({\n  center: new Cartesian3(),\n  semiMajorAxis: 1.0,\n  semiMinorAxis: 1.0,\n});\nconst scratchOptions = {\n  center: new Cartesian3(),\n  radius: undefined,\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\n  height: undefined,\n  extrudedHeight: undefined,\n  granularity: undefined,\n  vertexFormat: new VertexFormat(),\n  stRotation: undefined,\n  semiMajorAxis: undefined,\n  semiMinorAxis: undefined,\n  shadowVolume: undefined,\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CircleGeometry} [result] The object into which to store the result.\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\n */\nCircleGeometry.unpack = function (array, startingIndex, result) {\n  const ellipseGeometry = EllipseGeometry.unpack(\n    array,\n    startingIndex,\n    scratchEllipseGeometry\n  );\n  scratchOptions.center = Cartesian3.clone(\n    ellipseGeometry._center,\n    scratchOptions.center\n  );\n  scratchOptions.ellipsoid = Ellipsoid.clone(\n    ellipseGeometry._ellipsoid,\n    scratchOptions.ellipsoid\n  );\n  scratchOptions.height = ellipseGeometry._height;\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\n  scratchOptions.granularity = ellipseGeometry._granularity;\n  scratchOptions.vertexFormat = VertexFormat.clone(\n    ellipseGeometry._vertexFormat,\n    scratchOptions.vertexFormat\n  );\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\n\n  if (!defined(result)) {\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\n    return new CircleGeometry(scratchOptions);\n  }\n\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\n  return result;\n};\n\n/**\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\n *\n * @param {CircleGeometry} circleGeometry A description of the circle.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCircleGeometry.createGeometry = function (circleGeometry) {\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\n};\n\n/**\n * @private\n */\nCircleGeometry.createShadowVolume = function (\n  circleGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = circleGeometry._ellipseGeometry._granularity;\n  const ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new CircleGeometry({\n    center: circleGeometry._ellipseGeometry._center,\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\n    ellipsoid: ellipsoid,\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\n    granularity: granularity,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n  });\n};\n\nObject.defineProperties(CircleGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      return this._ellipseGeometry.rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default CircleGeometry;\n"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Viewer","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","circleGeometry","CircleGeometry","center","Cartesian3","radius","vertexFormat","VertexFormat","redCircleInstance","GeometryInstance","geometry","primitive","primitives","add","Primitive","geometryInstances","appearance","MaterialAppearance","material","Material","translucent","fabric","uniforms","color","Color","rotate","percent","source","camera","flyToBoundingSphere","boundingSphere","preUpdate","addEventListener","__exports__","render","options","defaultValue","Check","ellipseGeometryOptions","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","stRotation","shadowVolume","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipseGeometry","scratchOptions","undefined","Ellipsoid","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints"],"sourceRoot":""}