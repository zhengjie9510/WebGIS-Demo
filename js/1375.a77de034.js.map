{"version":3,"file":"js/1375.a77de034.js","mappings":"kLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,iHAOF,MAAMC,EACJC,YAAYC,GACVC,KAAKC,mBAAqB,IAAIC,EAAAA,EAC9BF,KAAKG,YAASC,EACdJ,KAAKK,YAASD,EACdJ,KAAKM,MAAQP,EAAQO,MACrBN,KAAKO,MAAQR,EAAQQ,KAEvB,CACIC,iBACF,OAAO,CACT,CAEIC,wBACF,OAAOT,KAAKC,kBACd,CAEAS,QAAQC,GACN,OAAOT,EAAAA,EAAAA,6BACT,CAEAU,SAASD,EAAME,GAMb,OALKX,EAAAA,EAAeW,KAClBA,EAAS,CAAC,GAEZA,EAAOP,MAAQJ,EAAAA,EAAAA,kBAAkCF,KAAKG,OAAQQ,EAAMT,EAAAA,EAAAA,IAAkBW,EAAOP,OAC7FO,EAAON,MAAQL,EAAAA,EAAAA,kBAAkCF,KAAKK,OAAQM,EAAM,GAAIE,EAAON,OACxEM,CACT,CAEAC,OAAOC,GACL,OAAQf,OAASe,GACdA,aAAiBlB,GAChBK,EAAAA,EAAAA,OAAuBF,KAAKG,OAAQY,EAAMZ,SAC1CD,EAAAA,EAAAA,OAAuBF,KAAKK,OAAQU,EAAMV,OAChD,EAEFW,OAAOC,iBAAiBpB,EAAkCqB,UAAW,CACnEZ,MAAOJ,EAAAA,EAAgC,SACvCK,MAAOL,EAAAA,EAAgC,WAEzCA,EAAOL,kCAAoCA,EAC3CK,EAAAA,EAAAA,8BAAgD,gCAChDA,EAAAA,EAAAA,gCACE,06DA+EFA,EAAAA,EAAAA,eAAAA,YAA2CA,EAAAA,EAAAA,8BAA+C,CACxFiB,OAAQ,CACNC,KAAMlB,EAAAA,EAAAA,8BACNmB,SAAU,CACRf,MAAO,IAAIJ,EAAAA,EAAa,EAAK,EAAK,EAAK,GACvCK,MAAO,IAETe,OAAQpB,EAAAA,EAAAA,iCAGVqB,YAAa,SAAUC,GACrB,OAAO,CACT,IAGF,OACEC,UACEzB,KAAK0B,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAI1B,EAAAA,EAAc,mBAC3BA,EAAAA,EAAAA,oCACF0B,EAAOC,gBAAkBC,OAAOC,kBAElCH,EAAOI,MAAMC,kBAAkBC,KAAKC,SAAU,EAE9C,MAAMC,EAASR,EAAOS,SAASC,IAAI,CACjCC,SAAUrC,EAAAA,EAAAA,aAA+B,SAAU,QACnDsC,KAAM,OACNC,UAAW,CACTC,MAAO,IAAIxC,EAAAA,EAAkB,IAAO,IAAO,KAC3CsB,SAAU,IAAItB,EAAOL,kCAAkC,CACrDS,MAAO,IAAIJ,EAAAA,EAAa,EAAK,GAAK,EAAK,GACvCK,MAAO,QAIbqB,EAAOe,OAAOP,EAChB,I,WCnKJ,MAAMQ,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/public/ellipsoid_electric.vue","webpack://webgis/./src/components/public/ellipsoid_electric.vue?0e81"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport * as Cesium from 'cesium'\n\nclass EllipsoidElectricMaterialProperty {\n  constructor(options) {\n    this._definitionChanged = new Cesium.Event();\n    this._color = undefined;\n    this._speed = undefined;\n    this.color = options.color;\n    this.speed = options.speed;\n\n  }\n  get isConstant() {\n    return false;\n  }\n\n  get definitionChanged() {\n    return this._definitionChanged;\n  }\n  // eslint-disable-next-line\n  getType(time) {\n    return Cesium.Material.EllipsoidElectricMaterialType;\n  }\n\n  getValue(time, result) {\n    if (!Cesium.defined(result)) {\n      result = {};\n    }\n    result.color = Cesium.Property.getValueOrDefault(this._color, time, Cesium.Color.RED, result.color);\n    result.speed = Cesium.Property.getValueOrDefault(this._speed, time, 10, result.speed);\n    return result;\n  }\n\n  equals(other) {\n    return (this === other ||\n      (other instanceof EllipsoidElectricMaterialProperty &&\n        Cesium.Property.equals(this._color, other._color) &&\n        Cesium.Property.equals(this._speed, other._speed)))\n  }\n}\nObject.defineProperties(EllipsoidElectricMaterialProperty.prototype, {\n  color: Cesium.createPropertyDescriptor('color'),\n  speed: Cesium.createPropertyDescriptor('speed')\n})\nCesium.EllipsoidElectricMaterialProperty = EllipsoidElectricMaterialProperty\nCesium.Material.EllipsoidElectricMaterialType = 'EllipsoidElectricMaterialType';\nCesium.Material.EllipsoidElectricMaterialSource =\n  `\n\tuniform vec4 color;\n\tuniform float speed;\n\t\n\t#define pi 3.1415926535\n\t#define PI2RAD 0.01745329252\n\t#define TWO_PI (2. * PI)\n\t\n\tfloat rands(float p){\n    return fract(sin(p) * 10000.0);\n\t}\n\t\n\tfloat noise(vec2 p){\n    float time = fract( czm_frameNumber * speed / 1000.0);\n    float t = time / 20000.0;\n    if(t > 1.0) t -= floor(t);\n    return rands(p.x * 14. + p.y * sin(t) * 0.5);\n\t}\n\t\n\tvec2 sw(vec2 p){\n    return vec2(floor(p.x), floor(p.y));\n\t}\n\t\n\tvec2 se(vec2 p){\n    return vec2(ceil(p.x), floor(p.y));\n\t}\n\t\n\tvec2 nw(vec2 p){\n\treturn vec2(floor(p.x), ceil(p.y));\n\t}\n\t\n\tvec2 ne(vec2 p){\n    return vec2(ceil(p.x), ceil(p.y));\n\t}\n\t\n\tfloat smoothNoise(vec2 p){\n    vec2 inter = smoothstep(0.0, 1.0, fract(p));\n    float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n    float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n    return mix(s, n, inter.y);\n\t}\n\t\n\tfloat fbm(vec2 p){\n    float z = 2.0;\n    float rz = 0.0;\n    vec2 bp = p;\n    for(float i = 1.0; i < 6.0; i++){\n      rz += abs((smoothNoise(p) - 0.5)* 2.0) / z;\n      z *= 2.0;\n      p *= 2.0;\n    }\n    return rz;\n\t}\n\t\n\tczm_material czm_getMaterial(czm_materialInput materialInput){\n    czm_material material = czm_getDefaultMaterial(materialInput);\n    vec2 st = materialInput.st;\n    vec2 st2 = materialInput.st;\n    float time = fract( czm_frameNumber * speed / 1000.0);\n    if (st.t < 0.5) {\n      discard;\n    }\n    st *= 4.;\n    float rz = fbm(st);\n    st /= exp(mod( time * 2.0, pi));\n    rz *= pow(15., 0.9);\n    vec4 temp = vec4(0);\n    temp = mix( color / rz, vec4(color.rgb, 0.1), 0.2);\n    if (st2.s < 0.05) {\n      temp = mix(vec4(color.rgb, 0.1), temp, st2.s / 0.05);\n    }\n    if (st2.s > 0.95){\n      temp = mix(temp, vec4(color.rgb, 0.1), (st2.s - 0.95) / 0.05);\n    }\n    material.diffuse = temp.rgb;\n    material.alpha = temp.a * 2.0;\n    return material;\n\t}\n\t`\nCesium.Material._materialCache.addMaterial(Cesium.Material.EllipsoidElectricMaterialType, {\n  fabric: {\n    type: Cesium.Material.EllipsoidElectricMaterialType,\n    uniforms: {\n      color: new Cesium.Color(1.0, 1.0, 0.0, 1.0),\n      speed: 10.0\n    },\n    source: Cesium.Material.EllipsoidElectricMaterialSource\n  },\n  // eslint-disable-next-line\n  translucent: function (material) {\n    return true;\n  }\n})\n\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      var viewer = new Cesium.Viewer('cesiumContainer')\n      if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n\n      const entity = viewer.entities.add({\n        position: Cesium.Cartesian3.fromDegrees(-122.4175, 37.655),\n        name: '电弧球体',\n        ellipsoid: {\n          radii: new Cesium.Cartesian3(100.0, 100.0, 100.0),\n          material: new Cesium.EllipsoidElectricMaterialProperty({\n            color: new Cesium.Color(1.0, 0.5, 0.0, 1.0),\n            speed: 10.0\n          })\n        }\n      })\n      viewer.zoomTo(entity)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./ellipsoid_electric.vue?vue&type=template&id=5284e0f1&scoped=true\"\nimport script from \"./ellipsoid_electric.vue?vue&type=script&lang=js\"\nexport * from \"./ellipsoid_electric.vue?vue&type=script&lang=js\"\n\nimport \"./ellipsoid_electric.vue?vue&type=style&index=0&id=5284e0f1&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5284e0f1\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","EllipsoidElectricMaterialProperty","constructor","options","this","_definitionChanged","Cesium","_color","undefined","_speed","color","speed","isConstant","definitionChanged","getType","time","getValue","result","equals","other","Object","defineProperties","prototype","fabric","type","uniforms","source","translucent","material","mounted","init","methods","viewer","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","entity","entities","add","position","name","ellipsoid","radii","zoomTo","__exports__","render"],"sourceRoot":""}