{"version":3,"file":"js/5223.84237189.js","mappings":"iLACOA,GAAG,mB,0CAARC,EAAAA,EAAAA,IAAgC,MAAhCC,E,8HAkBF,GACEC,UACEC,KAAKC,MACP,EACAC,QAAS,CACPD,OACE,IAAIE,EAAS,IAAIC,EAAAA,EAAO,mBACpBC,EAAAA,EAAAA,oCAEFF,EAAOG,gBAAkBC,OAAOC,kBAElCL,EAAOM,MAAMC,kBAAkBC,KAAKC,SAAU,EAC9C,IAAIH,EAAQN,EAAOM,MAMfI,EAAkB,IAAIC,EAAAA,EAAiB,CACzCC,SAAUC,EAAAA,EAAAA,oBAAiC,CACzCC,UAAWC,EAAAA,EAAAA,iBAA4B,EAAE,IAAO,IAAO,GAAM,KAC7DC,cAAe,IACfC,cAAe,IACfC,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,QAKhDC,EAAUlB,EAAMmB,WAAWC,IAC7B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBlB,EACnBmB,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAsBdC,EAAoB,IAAI1B,EAAAA,EAAiB,CAC3CC,SAAUC,EAAAA,EAAAA,oBAAiC,CACzCC,UAAWC,EAAAA,EAAAA,iBAA4B,EACpC,IACD,IACC,GACD,IACC,GACD,IACC,IACD,IACC,IACD,KAEFC,cAAe,IACfE,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,UAKhDe,EAAYhC,EAAMmB,WAAWC,IAC/B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBS,EACnBR,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAsBdtB,EAAYC,EAAAA,EAAAA,iBAA4B,EACzC,IACD,IACC,MACD,IACC,IACD,IACC,MACD,IACC,IACD,IACC,MACD,IACC,IACD,IACC,KACD,IACC,GACD,IACC,KACD,IACC,GACD,KAEEwB,EAAiB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEEC,EAAiB,CACnB,EACA,IACA,EACA,IACA,EACA,IACA,EACA,IACA,EACA,IACA,GAGEC,EAAmB,IAAI9B,EAAAA,EAAiB,CAC1CC,SAAU,IAAIC,EAAAA,EAAa,CACzBC,UAAWA,EACXyB,eAAgBA,EAChBC,eAAgBA,EAChBtB,aAAcC,EAAAA,EAAAA,kBAEhBC,WAAY,CACVC,MAAOC,EAAAA,EAAAA,UAAyCC,EAAAA,EAAAA,SAKhDmB,EAAWpC,EAAMmB,WAAWC,IAC9B,IAAIC,EAAAA,EAAU,CACZC,kBAAmBa,EACnBZ,WAAY,IAAIC,EAAAA,EAAmB,CACjCC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,OAAQ,CACNC,SAAU,CACRb,MAAO,IAAIE,EAAAA,EAAM,EAAK,EAAK,GAC3BY,OAAQ,GAEVC,OAAQ,0vBAmBlBpC,EAAOM,MAAMqC,UAAUC,kBAAiB,WACtC,IAAIC,EAAYrB,EAAQK,WAAWE,SAASG,SAASC,OACrDU,GAAa,IACTA,EAAY,IACdA,EAAY,GAEdrB,EAAQK,WAAWE,SAASG,SAASC,OAASU,EAE9C,IAAIC,EAAcR,EAAUT,WAAWE,SAASG,SAASC,OACzDW,GAAe,IACXA,EAAc,IAChBA,EAAc,GAEhBR,EAAUT,WAAWE,SAASG,SAASC,OAASW,EAEhD,IAAIC,EAAaL,EAASb,WAAWE,SAASG,SAASC,OACvDY,GAAc,IACVA,EAAa,IACfA,EAAa,GAEfL,EAASb,WAAWE,SAASG,SAASC,OAASY,CACjD,GACF,I,WCrPJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://webgis/./src/components/public/dynamic_wall.vue","webpack://webgis/./src/components/public/dynamic_wall.vue?c89e"],"sourcesContent":["<template>\n  <div id=\"cesiumContainer\"></div>\n</template>\n\n<script>\nimport 'cesium/Build/Cesium/Widgets/widgets.css'\nimport {\n  Viewer,\n  FeatureDetection,\n  WallGeometry,\n  Cartesian3,\n  VertexFormat,\n  GeometryInstance,\n  Primitive,\n  MaterialAppearance,\n  Material,\n  ColorGeometryInstanceAttribute,\n  Color,\n} from 'cesium'\nexport default {\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      var viewer = new Viewer('cesiumContainer')\n      if (FeatureDetection.supportsImageRenderingPixelated()) {\n        //判断是否支持图像渲染像素化处理\n        viewer.resolutionScale = window.devicePixelRatio\n      }\n      viewer.scene.postProcessStages.fxaa.enabled = true\n      var scene = viewer.scene\n\n      // Example 1: Draw a red wall with constant min and max heights\n\n      // Use the maximumHeight and minumumHeight options to specify\n      // the heights of the top and bottom of the wall.\n      var redWallInstance = new GeometryInstance({\n        geometry: WallGeometry.fromConstantHeights({\n          positions: Cartesian3.fromDegreesArray([-115.0, 44.0, -90.0, 44.0]),\n          maximumHeight: 200000.0,\n          minimumHeight: 100000.0,\n          vertexFormat: VertexFormat.POSITION_AND_ST,\n        }),\n        attributes: {\n          color: ColorGeometryInstanceAttribute.fromColor(Color.RED),\n        },\n      })\n\n      // Add red wall instances to primitives.\n      var redWall = scene.primitives.add(\n        new Primitive({\n          geometryInstances: redWallInstance,\n          appearance: new MaterialAppearance({\n            material: new Material({\n              fabric: {\n                uniforms: {\n                  color: new Color(1.0, 0.0, 0.0),\n                  offset: 0.0,\n                },\n                source: `\n                                    uniform vec4 color;\n                                    uniform float offset;\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\n                                    {\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\n                                        vec2 st = materialInput.st;\n                                        material.diffuse = color.rgb;\n                                        material.alpha = fract(1.0 - st.t + offset);\n                                        material.emission=vec3(0.5);\n                                        return material;\n                                    }`,\n              },\n            }),\n          }),\n        })\n      )\n\n      // Example 2: Draw a green wall with constant height\n\n      // If minumumHeight is not specified, the wall will be\n      // drawn on the globe surface.\n      var greenWallInstance = new GeometryInstance({\n        geometry: WallGeometry.fromConstantHeights({\n          positions: Cartesian3.fromDegreesArray([\n            -107.0,\n            43.0,\n            -97.0,\n            43.0,\n            -97.0,\n            40.0,\n            -107.0,\n            40.0,\n            -107.0,\n            43.0,\n          ]),\n          maximumHeight: 100000.0,\n          vertexFormat: VertexFormat.POSITION_AND_ST,\n        }),\n        attributes: {\n          color: ColorGeometryInstanceAttribute.fromColor(Color.GREEN),\n        },\n      })\n\n      // Add green wall instances to primitives.\n      var greenWall = scene.primitives.add(\n        new Primitive({\n          geometryInstances: greenWallInstance,\n          appearance: new MaterialAppearance({\n            material: new Material({\n              fabric: {\n                uniforms: {\n                  color: new Color(0.0, 1.0, 0.0),\n                  offset: 0.0,\n                },\n                source: `\n                                    uniform vec4 color;\n                                    uniform float offset;\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\n                                    {\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\n                                        vec2 st = materialInput.st;\n                                        material.diffuse = color.rgb;\n                                        material.alpha = fract(1.0 - st.t + offset);\n                                        material.emission=vec3(0.5);\n                                        return material;\n                                    }`,\n              },\n            }),\n          }),\n        })\n      )\n\n      // Example 3: Draw a blue wall with per position heights\n      // To use per position heights, create an array of heights\n      // for maximumHeights (and optionally minumumHeights)\n      // with a length equal to the number of positions.\n      var positions = Cartesian3.fromDegreesArray([\n        -115.0,\n        50.0,\n        -112.5,\n        50.0,\n        -110.0,\n        50.0,\n        -107.5,\n        50.0,\n        -105.0,\n        50.0,\n        -102.5,\n        50.0,\n        -100.0,\n        50.0,\n        -97.5,\n        50.0,\n        -95.0,\n        50.0,\n        -92.5,\n        50.0,\n        -90.0,\n        50.0,\n      ])\n      var maximumHeights = [\n        100000,\n        200000,\n        100000,\n        200000,\n        100000,\n        200000,\n        100000,\n        200000,\n        100000,\n        200000,\n        100000,\n      ]\n      var minimumHeights = [\n        0,\n        100000,\n        0,\n        100000,\n        0,\n        100000,\n        0,\n        100000,\n        0,\n        100000,\n        0,\n      ]\n\n      var blueWallInstance = new GeometryInstance({\n        geometry: new WallGeometry({\n          positions: positions,\n          maximumHeights: maximumHeights,\n          minimumHeights: minimumHeights,\n          vertexFormat: VertexFormat.POSITION_AND_ST,\n        }),\n        attributes: {\n          color: ColorGeometryInstanceAttribute.fromColor(Color.BLUE),\n        },\n      })\n\n      // Add blue wall instances to primitives.\n      var blueWall = scene.primitives.add(\n        new Primitive({\n          geometryInstances: blueWallInstance,\n          appearance: new MaterialAppearance({\n            material: new Material({\n              fabric: {\n                uniforms: {\n                  color: new Color(0.0, 0.0, 1.0),\n                  offset: 0.0,\n                },\n                source: `\n                                    uniform vec4 color;\n                                    uniform float offset;\n                                    czm_material czm_getMaterial(czm_materialInput materialInput)\n                                    {\n                                        czm_material material = czm_getDefaultMaterial(materialInput);\n                                        vec2 st = materialInput.st;\n                                        material.diffuse = color.rgb;\n                                        material.alpha = fract(1.0 - st.t + offset);\n                                        material.emission=vec3(0.5);\n                                        return material;\n                                    }`,\n              },\n            }),\n          }),\n        })\n      )\n\n      // 动态修改雷达材质中的offset变量，从而实现动态效果。\n      viewer.scene.preUpdate.addEventListener(function() {\n        var redoffset = redWall.appearance.material.uniforms.offset\n        redoffset += 0.01\n        if (redoffset > 1.0) {\n          redoffset = 0.0\n        }\n        redWall.appearance.material.uniforms.offset = redoffset\n\n        var greenoffset = greenWall.appearance.material.uniforms.offset\n        greenoffset += 0.01\n        if (greenoffset > 1.0) {\n          greenoffset = 0.0\n        }\n        greenWall.appearance.material.uniforms.offset = greenoffset\n\n        var blueoffset = blueWall.appearance.material.uniforms.offset\n        blueoffset += 0.01\n        if (blueoffset > 1.0) {\n          blueoffset = 0.0\n        }\n        blueWall.appearance.material.uniforms.offset = blueoffset\n      })\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n#cesiumContainer {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n</style>\n","import { render } from \"./dynamic_wall.vue?vue&type=template&id=76299419&scoped=true\"\nimport script from \"./dynamic_wall.vue?vue&type=script&lang=js\"\nexport * from \"./dynamic_wall.vue?vue&type=script&lang=js\"\n\nimport \"./dynamic_wall.vue?vue&type=style&index=0&id=76299419&lang=scss&scoped=true\"\n\nimport exportComponent from \"/Users/zhengjie/Documents/webgis/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-76299419\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","mounted","this","init","methods","viewer","Viewer","FeatureDetection","resolutionScale","window","devicePixelRatio","scene","postProcessStages","fxaa","enabled","redWallInstance","GeometryInstance","geometry","WallGeometry","positions","Cartesian3","maximumHeight","minimumHeight","vertexFormat","VertexFormat","attributes","color","ColorGeometryInstanceAttribute","Color","redWall","primitives","add","Primitive","geometryInstances","appearance","MaterialAppearance","material","Material","fabric","uniforms","offset","source","greenWallInstance","greenWall","maximumHeights","minimumHeights","blueWallInstance","blueWall","preUpdate","addEventListener","redoffset","greenoffset","blueoffset","__exports__","render"],"sourceRoot":""}